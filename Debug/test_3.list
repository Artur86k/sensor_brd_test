
test_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068e4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000318  08006a78  08006a78  00016a78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006d90  08006d90  00016d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006d98  08006d98  00016d98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006d9c  08006d9c  00016d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000330  20000000  08006da0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020330  2**0
                  CONTENTS
  8 .bss          0000193c  20000330  20000330  00020330  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20001c6c  20001c6c  00020330  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020330  2**0
                  CONTENTS, READONLY
 11 .debug_info   00021ad6  00000000  00000000  00020360  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00004512  00000000  00000000  00041e36  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000ab39  00000000  00000000  00046348  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000de0  00000000  00000000  00050e88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001190  00000000  00000000  00051c68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00008e4b  00000000  00000000  00052df8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00004d88  00000000  00000000  0005bc43  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  000609cb  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003220  00000000  00000000  00060a48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000330 	.word	0x20000330
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006a5c 	.word	0x08006a5c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000334 	.word	0x20000334
 80001cc:	08006a5c 	.word	0x08006a5c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpun>:
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x10>
 8000b2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b32:	d10a      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x20>
 8000b3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0001 	mov.w	r0, #1
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2iz>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d215      	bcs.n	8000b86 <__aeabi_d2iz+0x36>
 8000b5a:	d511      	bpl.n	8000b80 <__aeabi_d2iz+0x30>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d912      	bls.n	8000b8c <__aeabi_d2iz+0x3c>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d105      	bne.n	8000b98 <__aeabi_d2iz+0x48>
 8000b8c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	bf08      	it	eq
 8000b92:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_uldivmod>:
 8000c40:	b953      	cbnz	r3, 8000c58 <__aeabi_uldivmod+0x18>
 8000c42:	b94a      	cbnz	r2, 8000c58 <__aeabi_uldivmod+0x18>
 8000c44:	2900      	cmp	r1, #0
 8000c46:	bf08      	it	eq
 8000c48:	2800      	cmpeq	r0, #0
 8000c4a:	bf1c      	itt	ne
 8000c4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c50:	f04f 30ff 	movne.w	r0, #4294967295
 8000c54:	f000 b97a 	b.w	8000f4c <__aeabi_idiv0>
 8000c58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c60:	f000 f806 	bl	8000c70 <__udivmoddi4>
 8000c64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c6c:	b004      	add	sp, #16
 8000c6e:	4770      	bx	lr

08000c70 <__udivmoddi4>:
 8000c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c74:	468c      	mov	ip, r1
 8000c76:	460d      	mov	r5, r1
 8000c78:	4604      	mov	r4, r0
 8000c7a:	9e08      	ldr	r6, [sp, #32]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d151      	bne.n	8000d24 <__udivmoddi4+0xb4>
 8000c80:	428a      	cmp	r2, r1
 8000c82:	4617      	mov	r7, r2
 8000c84:	d96d      	bls.n	8000d62 <__udivmoddi4+0xf2>
 8000c86:	fab2 fe82 	clz	lr, r2
 8000c8a:	f1be 0f00 	cmp.w	lr, #0
 8000c8e:	d00b      	beq.n	8000ca8 <__udivmoddi4+0x38>
 8000c90:	f1ce 0c20 	rsb	ip, lr, #32
 8000c94:	fa01 f50e 	lsl.w	r5, r1, lr
 8000c98:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000c9c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000ca0:	ea4c 0c05 	orr.w	ip, ip, r5
 8000ca4:	fa00 f40e 	lsl.w	r4, r0, lr
 8000ca8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000cac:	0c25      	lsrs	r5, r4, #16
 8000cae:	fbbc f8fa 	udiv	r8, ip, sl
 8000cb2:	fa1f f987 	uxth.w	r9, r7
 8000cb6:	fb0a cc18 	mls	ip, sl, r8, ip
 8000cba:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000cbe:	fb08 f309 	mul.w	r3, r8, r9
 8000cc2:	42ab      	cmp	r3, r5
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x6c>
 8000cc6:	19ed      	adds	r5, r5, r7
 8000cc8:	f108 32ff 	add.w	r2, r8, #4294967295
 8000ccc:	f080 8123 	bcs.w	8000f16 <__udivmoddi4+0x2a6>
 8000cd0:	42ab      	cmp	r3, r5
 8000cd2:	f240 8120 	bls.w	8000f16 <__udivmoddi4+0x2a6>
 8000cd6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cda:	443d      	add	r5, r7
 8000cdc:	1aed      	subs	r5, r5, r3
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb5 f0fa 	udiv	r0, r5, sl
 8000ce4:	fb0a 5510 	mls	r5, sl, r0, r5
 8000ce8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cec:	fb00 f909 	mul.w	r9, r0, r9
 8000cf0:	45a1      	cmp	r9, r4
 8000cf2:	d909      	bls.n	8000d08 <__udivmoddi4+0x98>
 8000cf4:	19e4      	adds	r4, r4, r7
 8000cf6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfa:	f080 810a 	bcs.w	8000f12 <__udivmoddi4+0x2a2>
 8000cfe:	45a1      	cmp	r9, r4
 8000d00:	f240 8107 	bls.w	8000f12 <__udivmoddi4+0x2a2>
 8000d04:	3802      	subs	r0, #2
 8000d06:	443c      	add	r4, r7
 8000d08:	eba4 0409 	sub.w	r4, r4, r9
 8000d0c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d10:	2100      	movs	r1, #0
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	d061      	beq.n	8000dda <__udivmoddi4+0x16a>
 8000d16:	fa24 f40e 	lsr.w	r4, r4, lr
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	6034      	str	r4, [r6, #0]
 8000d1e:	6073      	str	r3, [r6, #4]
 8000d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d24:	428b      	cmp	r3, r1
 8000d26:	d907      	bls.n	8000d38 <__udivmoddi4+0xc8>
 8000d28:	2e00      	cmp	r6, #0
 8000d2a:	d054      	beq.n	8000dd6 <__udivmoddi4+0x166>
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000d32:	4608      	mov	r0, r1
 8000d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d38:	fab3 f183 	clz	r1, r3
 8000d3c:	2900      	cmp	r1, #0
 8000d3e:	f040 808e 	bne.w	8000e5e <__udivmoddi4+0x1ee>
 8000d42:	42ab      	cmp	r3, r5
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xdc>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80fa 	bhi.w	8000f40 <__udivmoddi4+0x2d0>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb65 0503 	sbc.w	r5, r5, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	46ac      	mov	ip, r5
 8000d56:	2e00      	cmp	r6, #0
 8000d58:	d03f      	beq.n	8000dda <__udivmoddi4+0x16a>
 8000d5a:	e886 1010 	stmia.w	r6, {r4, ip}
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	b912      	cbnz	r2, 8000d6a <__udivmoddi4+0xfa>
 8000d64:	2701      	movs	r7, #1
 8000d66:	fbb7 f7f2 	udiv	r7, r7, r2
 8000d6a:	fab7 fe87 	clz	lr, r7
 8000d6e:	f1be 0f00 	cmp.w	lr, #0
 8000d72:	d134      	bne.n	8000dde <__udivmoddi4+0x16e>
 8000d74:	1beb      	subs	r3, r5, r7
 8000d76:	0c3a      	lsrs	r2, r7, #16
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000d82:	0c25      	lsrs	r5, r4, #16
 8000d84:	fb02 3318 	mls	r3, r2, r8, r3
 8000d88:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d8c:	fb0c f308 	mul.w	r3, ip, r8
 8000d90:	42ab      	cmp	r3, r5
 8000d92:	d907      	bls.n	8000da4 <__udivmoddi4+0x134>
 8000d94:	19ed      	adds	r5, r5, r7
 8000d96:	f108 30ff 	add.w	r0, r8, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x132>
 8000d9c:	42ab      	cmp	r3, r5
 8000d9e:	f200 80d1 	bhi.w	8000f44 <__udivmoddi4+0x2d4>
 8000da2:	4680      	mov	r8, r0
 8000da4:	1aed      	subs	r5, r5, r3
 8000da6:	b2a3      	uxth	r3, r4
 8000da8:	fbb5 f0f2 	udiv	r0, r5, r2
 8000dac:	fb02 5510 	mls	r5, r2, r0, r5
 8000db0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000db4:	fb0c fc00 	mul.w	ip, ip, r0
 8000db8:	45a4      	cmp	ip, r4
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x15c>
 8000dbc:	19e4      	adds	r4, r4, r7
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x15a>
 8000dc4:	45a4      	cmp	ip, r4
 8000dc6:	f200 80b8 	bhi.w	8000f3a <__udivmoddi4+0x2ca>
 8000dca:	4618      	mov	r0, r3
 8000dcc:	eba4 040c 	sub.w	r4, r4, ip
 8000dd0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dd4:	e79d      	b.n	8000d12 <__udivmoddi4+0xa2>
 8000dd6:	4631      	mov	r1, r6
 8000dd8:	4630      	mov	r0, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	f1ce 0420 	rsb	r4, lr, #32
 8000de2:	fa05 f30e 	lsl.w	r3, r5, lr
 8000de6:	fa07 f70e 	lsl.w	r7, r7, lr
 8000dea:	fa20 f804 	lsr.w	r8, r0, r4
 8000dee:	0c3a      	lsrs	r2, r7, #16
 8000df0:	fa25 f404 	lsr.w	r4, r5, r4
 8000df4:	ea48 0803 	orr.w	r8, r8, r3
 8000df8:	fbb4 f1f2 	udiv	r1, r4, r2
 8000dfc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000e00:	fb02 4411 	mls	r4, r2, r1, r4
 8000e04:	fa1f fc87 	uxth.w	ip, r7
 8000e08:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000e0c:	fb01 f30c 	mul.w	r3, r1, ip
 8000e10:	42ab      	cmp	r3, r5
 8000e12:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e16:	d909      	bls.n	8000e2c <__udivmoddi4+0x1bc>
 8000e18:	19ed      	adds	r5, r5, r7
 8000e1a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e1e:	f080 808a 	bcs.w	8000f36 <__udivmoddi4+0x2c6>
 8000e22:	42ab      	cmp	r3, r5
 8000e24:	f240 8087 	bls.w	8000f36 <__udivmoddi4+0x2c6>
 8000e28:	3902      	subs	r1, #2
 8000e2a:	443d      	add	r5, r7
 8000e2c:	1aeb      	subs	r3, r5, r3
 8000e2e:	fa1f f588 	uxth.w	r5, r8
 8000e32:	fbb3 f0f2 	udiv	r0, r3, r2
 8000e36:	fb02 3310 	mls	r3, r2, r0, r3
 8000e3a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e3e:	fb00 f30c 	mul.w	r3, r0, ip
 8000e42:	42ab      	cmp	r3, r5
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x1e6>
 8000e46:	19ed      	adds	r5, r5, r7
 8000e48:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e4c:	d26f      	bcs.n	8000f2e <__udivmoddi4+0x2be>
 8000e4e:	42ab      	cmp	r3, r5
 8000e50:	d96d      	bls.n	8000f2e <__udivmoddi4+0x2be>
 8000e52:	3802      	subs	r0, #2
 8000e54:	443d      	add	r5, r7
 8000e56:	1aeb      	subs	r3, r5, r3
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	e78f      	b.n	8000d7e <__udivmoddi4+0x10e>
 8000e5e:	f1c1 0720 	rsb	r7, r1, #32
 8000e62:	fa22 f807 	lsr.w	r8, r2, r7
 8000e66:	408b      	lsls	r3, r1
 8000e68:	fa05 f401 	lsl.w	r4, r5, r1
 8000e6c:	ea48 0303 	orr.w	r3, r8, r3
 8000e70:	fa20 fe07 	lsr.w	lr, r0, r7
 8000e74:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	ea4e 0e04 	orr.w	lr, lr, r4
 8000e7e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000e82:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000e86:	fb0c 5519 	mls	r5, ip, r9, r5
 8000e8a:	fa1f f883 	uxth.w	r8, r3
 8000e8e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000e92:	fb09 f408 	mul.w	r4, r9, r8
 8000e96:	42ac      	cmp	r4, r5
 8000e98:	fa02 f201 	lsl.w	r2, r2, r1
 8000e9c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000ea0:	d908      	bls.n	8000eb4 <__udivmoddi4+0x244>
 8000ea2:	18ed      	adds	r5, r5, r3
 8000ea4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ea8:	d243      	bcs.n	8000f32 <__udivmoddi4+0x2c2>
 8000eaa:	42ac      	cmp	r4, r5
 8000eac:	d941      	bls.n	8000f32 <__udivmoddi4+0x2c2>
 8000eae:	f1a9 0902 	sub.w	r9, r9, #2
 8000eb2:	441d      	add	r5, r3
 8000eb4:	1b2d      	subs	r5, r5, r4
 8000eb6:	fa1f fe8e 	uxth.w	lr, lr
 8000eba:	fbb5 f0fc 	udiv	r0, r5, ip
 8000ebe:	fb0c 5510 	mls	r5, ip, r0, r5
 8000ec2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000ec6:	fb00 f808 	mul.w	r8, r0, r8
 8000eca:	45a0      	cmp	r8, r4
 8000ecc:	d907      	bls.n	8000ede <__udivmoddi4+0x26e>
 8000ece:	18e4      	adds	r4, r4, r3
 8000ed0:	f100 35ff 	add.w	r5, r0, #4294967295
 8000ed4:	d229      	bcs.n	8000f2a <__udivmoddi4+0x2ba>
 8000ed6:	45a0      	cmp	r8, r4
 8000ed8:	d927      	bls.n	8000f2a <__udivmoddi4+0x2ba>
 8000eda:	3802      	subs	r0, #2
 8000edc:	441c      	add	r4, r3
 8000ede:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ee2:	eba4 0408 	sub.w	r4, r4, r8
 8000ee6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eea:	454c      	cmp	r4, r9
 8000eec:	46c6      	mov	lr, r8
 8000eee:	464d      	mov	r5, r9
 8000ef0:	d315      	bcc.n	8000f1e <__udivmoddi4+0x2ae>
 8000ef2:	d012      	beq.n	8000f1a <__udivmoddi4+0x2aa>
 8000ef4:	b156      	cbz	r6, 8000f0c <__udivmoddi4+0x29c>
 8000ef6:	ebba 030e 	subs.w	r3, sl, lr
 8000efa:	eb64 0405 	sbc.w	r4, r4, r5
 8000efe:	fa04 f707 	lsl.w	r7, r4, r7
 8000f02:	40cb      	lsrs	r3, r1
 8000f04:	431f      	orrs	r7, r3
 8000f06:	40cc      	lsrs	r4, r1
 8000f08:	6037      	str	r7, [r6, #0]
 8000f0a:	6074      	str	r4, [r6, #4]
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f12:	4618      	mov	r0, r3
 8000f14:	e6f8      	b.n	8000d08 <__udivmoddi4+0x98>
 8000f16:	4690      	mov	r8, r2
 8000f18:	e6e0      	b.n	8000cdc <__udivmoddi4+0x6c>
 8000f1a:	45c2      	cmp	sl, r8
 8000f1c:	d2ea      	bcs.n	8000ef4 <__udivmoddi4+0x284>
 8000f1e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f22:	eb69 0503 	sbc.w	r5, r9, r3
 8000f26:	3801      	subs	r0, #1
 8000f28:	e7e4      	b.n	8000ef4 <__udivmoddi4+0x284>
 8000f2a:	4628      	mov	r0, r5
 8000f2c:	e7d7      	b.n	8000ede <__udivmoddi4+0x26e>
 8000f2e:	4640      	mov	r0, r8
 8000f30:	e791      	b.n	8000e56 <__udivmoddi4+0x1e6>
 8000f32:	4681      	mov	r9, r0
 8000f34:	e7be      	b.n	8000eb4 <__udivmoddi4+0x244>
 8000f36:	4601      	mov	r1, r0
 8000f38:	e778      	b.n	8000e2c <__udivmoddi4+0x1bc>
 8000f3a:	3802      	subs	r0, #2
 8000f3c:	443c      	add	r4, r7
 8000f3e:	e745      	b.n	8000dcc <__udivmoddi4+0x15c>
 8000f40:	4608      	mov	r0, r1
 8000f42:	e708      	b.n	8000d56 <__udivmoddi4+0xe6>
 8000f44:	f1a8 0802 	sub.w	r8, r8, #2
 8000f48:	443d      	add	r5, r7
 8000f4a:	e72b      	b.n	8000da4 <__udivmoddi4+0x134>

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f50:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f52:	4a0e      	ldr	r2, [pc, #56]	; (8000f8c <HAL_InitTick+0x3c>)
 8000f54:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <HAL_InitTick+0x40>)
{
 8000f56:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f58:	7818      	ldrb	r0, [r3, #0]
 8000f5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f5e:	fbb3 f3f0 	udiv	r3, r3, r0
 8000f62:	6810      	ldr	r0, [r2, #0]
 8000f64:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f68:	f000 f8a8 	bl	80010bc <HAL_SYSTICK_Config>
 8000f6c:	4604      	mov	r4, r0
 8000f6e:	b958      	cbnz	r0, 8000f88 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f70:	2d0f      	cmp	r5, #15
 8000f72:	d809      	bhi.n	8000f88 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f74:	4602      	mov	r2, r0
 8000f76:	4629      	mov	r1, r5
 8000f78:	f04f 30ff 	mov.w	r0, #4294967295
 8000f7c:	f000 f85e 	bl	800103c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f80:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <HAL_InitTick+0x44>)
 8000f82:	4620      	mov	r0, r4
 8000f84:	601d      	str	r5, [r3, #0]
 8000f86:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000f88:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000f8a:	bd38      	pop	{r3, r4, r5, pc}
 8000f8c:	20000118 	.word	0x20000118
 8000f90:	20000000 	.word	0x20000000
 8000f94:	20000004 	.word	0x20000004

08000f98 <HAL_Init>:
{
 8000f98:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f9a:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <HAL_Init+0x30>)
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000fa2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000faa:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000fb2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb4:	2003      	movs	r0, #3
 8000fb6:	f000 f82f 	bl	8001018 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fba:	2000      	movs	r0, #0
 8000fbc:	f7ff ffc8 	bl	8000f50 <HAL_InitTick>
  HAL_MspInit();
 8000fc0:	f003 f97c 	bl	80042bc <HAL_MspInit>
}
 8000fc4:	2000      	movs	r0, #0
 8000fc6:	bd08      	pop	{r3, pc}
 8000fc8:	40023c00 	.word	0x40023c00

08000fcc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000fcc:	4a03      	ldr	r2, [pc, #12]	; (8000fdc <HAL_IncTick+0x10>)
 8000fce:	4b04      	ldr	r3, [pc, #16]	; (8000fe0 <HAL_IncTick+0x14>)
 8000fd0:	6811      	ldr	r1, [r2, #0]
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	440b      	add	r3, r1
 8000fd6:	6013      	str	r3, [r2, #0]
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	2000035c 	.word	0x2000035c
 8000fe0:	20000000 	.word	0x20000000

08000fe4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000fe4:	4b01      	ldr	r3, [pc, #4]	; (8000fec <HAL_GetTick+0x8>)
 8000fe6:	6818      	ldr	r0, [r3, #0]
}
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	2000035c 	.word	0x2000035c

08000ff0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ff0:	b538      	push	{r3, r4, r5, lr}
 8000ff2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000ff4:	f7ff fff6 	bl	8000fe4 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ff8:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000ffa:	bf1c      	itt	ne
 8000ffc:	4b05      	ldrne	r3, [pc, #20]	; (8001014 <HAL_Delay+0x24>)
 8000ffe:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8001000:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8001002:	bf18      	it	ne
 8001004:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001006:	f7ff ffed 	bl	8000fe4 <HAL_GetTick>
 800100a:	1b40      	subs	r0, r0, r5
 800100c:	4284      	cmp	r4, r0
 800100e:	d8fa      	bhi.n	8001006 <HAL_Delay+0x16>
  {
  }
}
 8001010:	bd38      	pop	{r3, r4, r5, pc}
 8001012:	bf00      	nop
 8001014:	20000000 	.word	0x20000000

08001018 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001018:	4a07      	ldr	r2, [pc, #28]	; (8001038 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800101a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800101c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001020:	041b      	lsls	r3, r3, #16
 8001022:	0c1b      	lsrs	r3, r3, #16
 8001024:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001028:	0200      	lsls	r0, r0, #8
 800102a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800102e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8001032:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001034:	60d3      	str	r3, [r2, #12]
 8001036:	4770      	bx	lr
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800103c:	4b17      	ldr	r3, [pc, #92]	; (800109c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800103e:	b530      	push	{r4, r5, lr}
 8001040:	68dc      	ldr	r4, [r3, #12]
 8001042:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001046:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800104a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800104c:	2b04      	cmp	r3, #4
 800104e:	bf28      	it	cs
 8001050:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001052:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001054:	f04f 0501 	mov.w	r5, #1
 8001058:	fa05 f303 	lsl.w	r3, r5, r3
 800105c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001060:	bf8c      	ite	hi
 8001062:	3c03      	subhi	r4, #3
 8001064:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001066:	4019      	ands	r1, r3
 8001068:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800106a:	fa05 f404 	lsl.w	r4, r5, r4
 800106e:	3c01      	subs	r4, #1
 8001070:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8001072:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001074:	ea42 0201 	orr.w	r2, r2, r1
 8001078:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107c:	bfaf      	iteee	ge
 800107e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001082:	f000 000f 	andlt.w	r0, r0, #15
 8001086:	4b06      	ldrlt	r3, [pc, #24]	; (80010a0 <HAL_NVIC_SetPriority+0x64>)
 8001088:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800108a:	bfa5      	ittet	ge
 800108c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8001090:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001092:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001094:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001098:	bd30      	pop	{r4, r5, pc}
 800109a:	bf00      	nop
 800109c:	e000ed00 	.word	0xe000ed00
 80010a0:	e000ed14 	.word	0xe000ed14

080010a4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80010a4:	0942      	lsrs	r2, r0, #5
 80010a6:	2301      	movs	r3, #1
 80010a8:	f000 001f 	and.w	r0, r0, #31
 80010ac:	fa03 f000 	lsl.w	r0, r3, r0
 80010b0:	4b01      	ldr	r3, [pc, #4]	; (80010b8 <HAL_NVIC_EnableIRQ+0x14>)
 80010b2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80010b6:	4770      	bx	lr
 80010b8:	e000e100 	.word	0xe000e100

080010bc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010bc:	3801      	subs	r0, #1
 80010be:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80010c2:	d20a      	bcs.n	80010da <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010c4:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c6:	4a07      	ldr	r2, [pc, #28]	; (80010e4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010c8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ca:	21f0      	movs	r1, #240	; 0xf0
 80010cc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010d0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010d2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010d4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80010da:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	e000e010 	.word	0xe000e010
 80010e4:	e000ed00 	.word	0xe000ed00

080010e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010ec:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ee:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80012a0 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010f4:	4a68      	ldr	r2, [pc, #416]	; (8001298 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010f6:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 80012a4 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010fa:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010fc:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 80010fe:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001102:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8001104:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001108:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 800110c:	45b6      	cmp	lr, r6
 800110e:	f040 80ae 	bne.w	800126e <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001112:	684c      	ldr	r4, [r1, #4]
 8001114:	f024 0710 	bic.w	r7, r4, #16
 8001118:	2f02      	cmp	r7, #2
 800111a:	d116      	bne.n	800114a <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 800111c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001120:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001124:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001128:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800112c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001130:	f04f 0c0f 	mov.w	ip, #15
 8001134:	fa0c fc0b 	lsl.w	ip, ip, fp
 8001138:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800113c:	690d      	ldr	r5, [r1, #16]
 800113e:	fa05 f50b 	lsl.w	r5, r5, fp
 8001142:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8001146:	f8ca 5020 	str.w	r5, [sl, #32]
 800114a:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800114e:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8001150:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001154:	fa05 f50a 	lsl.w	r5, r5, sl
 8001158:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800115a:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800115e:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001162:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001166:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001168:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800116c:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 800116e:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001172:	d811      	bhi.n	8001198 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8001174:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001176:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 800117a:	68cf      	ldr	r7, [r1, #12]
 800117c:	fa07 fc0a 	lsl.w	ip, r7, sl
 8001180:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8001184:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001186:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001188:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800118c:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8001190:	409f      	lsls	r7, r3
 8001192:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001196:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8001198:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800119a:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800119c:	688f      	ldr	r7, [r1, #8]
 800119e:	fa07 f70a 	lsl.w	r7, r7, sl
 80011a2:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80011a4:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011a6:	00e5      	lsls	r5, r4, #3
 80011a8:	d561      	bpl.n	800126e <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011aa:	f04f 0b00 	mov.w	fp, #0
 80011ae:	f8cd b00c 	str.w	fp, [sp, #12]
 80011b2:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011b6:	4d39      	ldr	r5, [pc, #228]	; (800129c <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b8:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80011bc:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80011c0:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80011c4:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80011c8:	9703      	str	r7, [sp, #12]
 80011ca:	9f03      	ldr	r7, [sp, #12]
 80011cc:	f023 0703 	bic.w	r7, r3, #3
 80011d0:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80011d4:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011d8:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80011dc:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011e0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80011e4:	f04f 0e0f 	mov.w	lr, #15
 80011e8:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011ec:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011ee:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011f2:	d043      	beq.n	800127c <HAL_GPIO_Init+0x194>
 80011f4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80011f8:	42a8      	cmp	r0, r5
 80011fa:	d041      	beq.n	8001280 <HAL_GPIO_Init+0x198>
 80011fc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001200:	42a8      	cmp	r0, r5
 8001202:	d03f      	beq.n	8001284 <HAL_GPIO_Init+0x19c>
 8001204:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001208:	42a8      	cmp	r0, r5
 800120a:	d03d      	beq.n	8001288 <HAL_GPIO_Init+0x1a0>
 800120c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001210:	42a8      	cmp	r0, r5
 8001212:	d03b      	beq.n	800128c <HAL_GPIO_Init+0x1a4>
 8001214:	4548      	cmp	r0, r9
 8001216:	d03b      	beq.n	8001290 <HAL_GPIO_Init+0x1a8>
 8001218:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800121c:	42a8      	cmp	r0, r5
 800121e:	d039      	beq.n	8001294 <HAL_GPIO_Init+0x1ac>
 8001220:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001224:	42a8      	cmp	r0, r5
 8001226:	bf14      	ite	ne
 8001228:	2508      	movne	r5, #8
 800122a:	2507      	moveq	r5, #7
 800122c:	fa05 f50c 	lsl.w	r5, r5, ip
 8001230:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001234:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8001236:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001238:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800123a:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800123e:	bf0c      	ite	eq
 8001240:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001242:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8001244:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8001246:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001248:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800124c:	bf0c      	ite	eq
 800124e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001250:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8001252:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001254:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001256:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800125a:	bf0c      	ite	eq
 800125c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800125e:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8001260:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8001262:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001264:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001266:	bf54      	ite	pl
 8001268:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 800126a:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 800126c:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800126e:	3301      	adds	r3, #1
 8001270:	2b10      	cmp	r3, #16
 8001272:	f47f af44 	bne.w	80010fe <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8001276:	b005      	add	sp, #20
 8001278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800127c:	465d      	mov	r5, fp
 800127e:	e7d5      	b.n	800122c <HAL_GPIO_Init+0x144>
 8001280:	2501      	movs	r5, #1
 8001282:	e7d3      	b.n	800122c <HAL_GPIO_Init+0x144>
 8001284:	2502      	movs	r5, #2
 8001286:	e7d1      	b.n	800122c <HAL_GPIO_Init+0x144>
 8001288:	2503      	movs	r5, #3
 800128a:	e7cf      	b.n	800122c <HAL_GPIO_Init+0x144>
 800128c:	2504      	movs	r5, #4
 800128e:	e7cd      	b.n	800122c <HAL_GPIO_Init+0x144>
 8001290:	2505      	movs	r5, #5
 8001292:	e7cb      	b.n	800122c <HAL_GPIO_Init+0x144>
 8001294:	2506      	movs	r5, #6
 8001296:	e7c9      	b.n	800122c <HAL_GPIO_Init+0x144>
 8001298:	40013c00 	.word	0x40013c00
 800129c:	40020000 	.word	0x40020000
 80012a0:	40023800 	.word	0x40023800
 80012a4:	40021400 	.word	0x40021400

080012a8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012a8:	b10a      	cbz	r2, 80012ae <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012aa:	6181      	str	r1, [r0, #24]
 80012ac:	4770      	bx	lr
 80012ae:	0409      	lsls	r1, r1, #16
 80012b0:	e7fb      	b.n	80012aa <HAL_GPIO_WritePin+0x2>

080012b2 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80012b2:	6802      	ldr	r2, [r0, #0]
 80012b4:	6953      	ldr	r3, [r2, #20]
 80012b6:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 80012ba:	d00d      	beq.n	80012d8 <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80012bc:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80012c0:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80012c2:	2304      	movs	r3, #4
 80012c4:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 80012c6:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 80012c8:	2300      	movs	r3, #0
 80012ca:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80012cc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 80012d0:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 80012d4:	2001      	movs	r0, #1
 80012d6:	4770      	bx	lr
  }
  return HAL_OK;
 80012d8:	4618      	mov	r0, r3
}
 80012da:	4770      	bx	lr

080012dc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80012dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80012e0:	4604      	mov	r4, r0
 80012e2:	4617      	mov	r7, r2
 80012e4:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80012e6:	f3c1 4807 	ubfx	r8, r1, #16, #8
 80012ea:	b28e      	uxth	r6, r1
 80012ec:	6825      	ldr	r5, [r4, #0]
 80012ee:	f1b8 0f01 	cmp.w	r8, #1
 80012f2:	bf0c      	ite	eq
 80012f4:	696b      	ldreq	r3, [r5, #20]
 80012f6:	69ab      	ldrne	r3, [r5, #24]
 80012f8:	ea36 0303 	bics.w	r3, r6, r3
 80012fc:	bf14      	ite	ne
 80012fe:	2001      	movne	r0, #1
 8001300:	2000      	moveq	r0, #0
 8001302:	b908      	cbnz	r0, 8001308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 8001304:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001308:	696b      	ldr	r3, [r5, #20]
 800130a:	055a      	lsls	r2, r3, #21
 800130c:	d512      	bpl.n	8001334 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800130e:	682b      	ldr	r3, [r5, #0]
 8001310:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001314:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001316:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800131a:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800131c:	2304      	movs	r3, #4
 800131e:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8001320:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 8001322:	2300      	movs	r3, #0
 8001324:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 8001326:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 800132a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 800132e:	2001      	movs	r0, #1
 8001330:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001334:	1c7b      	adds	r3, r7, #1
 8001336:	d0d9      	beq.n	80012ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001338:	b94f      	cbnz	r7, 800134e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 800133a:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 800133c:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 800133e:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001340:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001344:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 8001348:	2003      	movs	r0, #3
 800134a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800134e:	f7ff fe49 	bl	8000fe4 <HAL_GetTick>
 8001352:	eba0 0009 	sub.w	r0, r0, r9
 8001356:	4287      	cmp	r7, r0
 8001358:	d2c8      	bcs.n	80012ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 800135a:	e7ee      	b.n	800133a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

0800135c <I2C_WaitOnFlagUntilTimeout>:
{
 800135c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001360:	9e08      	ldr	r6, [sp, #32]
 8001362:	4604      	mov	r4, r0
 8001364:	4690      	mov	r8, r2
 8001366:	461f      	mov	r7, r3
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8001368:	f3c1 4907 	ubfx	r9, r1, #16, #8
 800136c:	b28d      	uxth	r5, r1
 800136e:	6823      	ldr	r3, [r4, #0]
 8001370:	f1b9 0f01 	cmp.w	r9, #1
 8001374:	bf0c      	ite	eq
 8001376:	695b      	ldreq	r3, [r3, #20]
 8001378:	699b      	ldrne	r3, [r3, #24]
 800137a:	ea35 0303 	bics.w	r3, r5, r3
 800137e:	bf0c      	ite	eq
 8001380:	2301      	moveq	r3, #1
 8001382:	2300      	movne	r3, #0
 8001384:	4543      	cmp	r3, r8
 8001386:	d002      	beq.n	800138e <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 8001388:	2000      	movs	r0, #0
}
 800138a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 800138e:	1c7b      	adds	r3, r7, #1
 8001390:	d0ed      	beq.n	800136e <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001392:	b95f      	cbnz	r7, 80013ac <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 8001394:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8001396:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001398:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 800139a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 800139e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 80013a2:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80013a4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80013a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80013ac:	f7ff fe1a 	bl	8000fe4 <HAL_GetTick>
 80013b0:	1b80      	subs	r0, r0, r6
 80013b2:	4287      	cmp	r7, r0
 80013b4:	d2db      	bcs.n	800136e <I2C_WaitOnFlagUntilTimeout+0x12>
 80013b6:	e7ed      	b.n	8001394 <I2C_WaitOnFlagUntilTimeout+0x38>

080013b8 <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 80013b8:	b570      	push	{r4, r5, r6, lr}
 80013ba:	4604      	mov	r4, r0
 80013bc:	460d      	mov	r5, r1
 80013be:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80013c0:	6823      	ldr	r3, [r4, #0]
 80013c2:	695b      	ldr	r3, [r3, #20]
 80013c4:	061b      	lsls	r3, r3, #24
 80013c6:	d501      	bpl.n	80013cc <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 80013c8:	2000      	movs	r0, #0
 80013ca:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80013cc:	4620      	mov	r0, r4
 80013ce:	f7ff ff70 	bl	80012b2 <I2C_IsAcknowledgeFailed>
 80013d2:	b9a8      	cbnz	r0, 8001400 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 80013d4:	1c6a      	adds	r2, r5, #1
 80013d6:	d0f3      	beq.n	80013c0 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80013d8:	b965      	cbnz	r5, 80013f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80013dc:	f043 0320 	orr.w	r3, r3, #32
 80013e0:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 80013e2:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80013e4:	2300      	movs	r3, #0
 80013e6:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80013e8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80013ec:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 80013f0:	2003      	movs	r0, #3
 80013f2:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80013f4:	f7ff fdf6 	bl	8000fe4 <HAL_GetTick>
 80013f8:	1b80      	subs	r0, r0, r6
 80013fa:	4285      	cmp	r5, r0
 80013fc:	d2e0      	bcs.n	80013c0 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 80013fe:	e7ec      	b.n	80013da <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8001400:	2001      	movs	r0, #1
}
 8001402:	bd70      	pop	{r4, r5, r6, pc}

08001404 <I2C_WaitOnRXNEFlagUntilTimeout>:
{  
 8001404:	b570      	push	{r4, r5, r6, lr}
 8001406:	4604      	mov	r4, r0
 8001408:	460d      	mov	r5, r1
 800140a:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800140c:	6820      	ldr	r0, [r4, #0]
 800140e:	6943      	ldr	r3, [r0, #20]
 8001410:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8001414:	d001      	beq.n	800141a <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8001416:	2000      	movs	r0, #0
}
 8001418:	bd70      	pop	{r4, r5, r6, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800141a:	6942      	ldr	r2, [r0, #20]
 800141c:	06d2      	lsls	r2, r2, #27
 800141e:	d50b      	bpl.n	8001438 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001420:	f06f 0210 	mvn.w	r2, #16
 8001424:	6142      	str	r2, [r0, #20]
      hi2c->State= HAL_I2C_STATE_READY;
 8001426:	2220      	movs	r2, #32
      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001428:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800142a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->PreviousState = I2C_STATE_NONE;
 800142e:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8001430:	2001      	movs	r0, #1
      hi2c->State= HAL_I2C_STATE_READY;
 8001432:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8001436:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001438:	b95d      	cbnz	r5, 8001452 <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800143a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800143c:	f043 0320 	orr.w	r3, r3, #32
 8001440:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8001442:	2320      	movs	r3, #32
 8001444:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      __HAL_UNLOCK(hi2c);
 8001448:	2300      	movs	r3, #0
 800144a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 800144e:	2003      	movs	r0, #3
 8001450:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001452:	f7ff fdc7 	bl	8000fe4 <HAL_GetTick>
 8001456:	1b80      	subs	r0, r0, r6
 8001458:	4285      	cmp	r5, r0
 800145a:	d2d7      	bcs.n	800140c <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 800145c:	e7ed      	b.n	800143a <I2C_WaitOnRXNEFlagUntilTimeout+0x36>

0800145e <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 800145e:	b570      	push	{r4, r5, r6, lr}
 8001460:	4604      	mov	r4, r0
 8001462:	460d      	mov	r5, r1
 8001464:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001466:	6823      	ldr	r3, [r4, #0]
 8001468:	695b      	ldr	r3, [r3, #20]
 800146a:	075b      	lsls	r3, r3, #29
 800146c:	d501      	bpl.n	8001472 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 800146e:	2000      	movs	r0, #0
 8001470:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001472:	4620      	mov	r0, r4
 8001474:	f7ff ff1d 	bl	80012b2 <I2C_IsAcknowledgeFailed>
 8001478:	b9a8      	cbnz	r0, 80014a6 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 800147a:	1c6a      	adds	r2, r5, #1
 800147c:	d0f3      	beq.n	8001466 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800147e:	b965      	cbnz	r5, 800149a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001480:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001482:	f043 0320 	orr.w	r3, r3, #32
 8001486:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8001488:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 800148a:	2300      	movs	r3, #0
 800148c:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 800148e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001492:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8001496:	2003      	movs	r0, #3
 8001498:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800149a:	f7ff fda3 	bl	8000fe4 <HAL_GetTick>
 800149e:	1b80      	subs	r0, r0, r6
 80014a0:	4285      	cmp	r5, r0
 80014a2:	d2e0      	bcs.n	8001466 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 80014a4:	e7ec      	b.n	8001480 <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 80014a6:	2001      	movs	r0, #1
}
 80014a8:	bd70      	pop	{r4, r5, r6, pc}
	...

080014ac <HAL_I2C_Init>:
{
 80014ac:	b570      	push	{r4, r5, r6, lr}
  if(hi2c == NULL)
 80014ae:	4604      	mov	r4, r0
 80014b0:	2800      	cmp	r0, #0
 80014b2:	d062      	beq.n	800157a <HAL_I2C_Init+0xce>
  if(hi2c->State == HAL_I2C_STATE_RESET)
 80014b4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80014b8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80014bc:	b91b      	cbnz	r3, 80014c6 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 80014be:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80014c2:	f002 ff1b 	bl	80042fc <HAL_I2C_MspInit>
  __HAL_I2C_DISABLE(hi2c);
 80014c6:	6822      	ldr	r2, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80014c8:	4e2d      	ldr	r6, [pc, #180]	; (8001580 <HAL_I2C_Init+0xd4>)
  freqrange = I2C_FREQRANGE(pclk1);
 80014ca:	4d2e      	ldr	r5, [pc, #184]	; (8001584 <HAL_I2C_Init+0xd8>)
  hi2c->State = HAL_I2C_STATE_BUSY;
 80014cc:	2324      	movs	r3, #36	; 0x24
 80014ce:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80014d2:	6813      	ldr	r3, [r2, #0]
 80014d4:	f023 0301 	bic.w	r3, r3, #1
 80014d8:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80014da:	f001 fb8b 	bl	8002bf4 <HAL_RCC_GetPCLK1Freq>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80014de:	6863      	ldr	r3, [r4, #4]
  hi2c->Instance->CR2 = freqrange;
 80014e0:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80014e2:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80014e6:	42b3      	cmp	r3, r6
 80014e8:	bf84      	itt	hi
 80014ea:	f44f 7196 	movhi.w	r1, #300	; 0x12c
 80014ee:	4369      	mulhi	r1, r5
  hi2c->Instance->CR2 = freqrange;
 80014f0:	6055      	str	r5, [r2, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80014f2:	bf91      	iteee	ls
 80014f4:	1c69      	addls	r1, r5, #1
 80014f6:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 80014fa:	fbb1 f1f5 	udivhi	r1, r1, r5
 80014fe:	3101      	addhi	r1, #1
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001500:	42b3      	cmp	r3, r6
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001502:	6211      	str	r1, [r2, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001504:	d821      	bhi.n	800154a <HAL_I2C_Init+0x9e>
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	fbb0 f0f3 	udiv	r0, r0, r3
 800150c:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001510:	2b03      	cmp	r3, #3
 8001512:	bf98      	it	ls
 8001514:	2004      	movls	r0, #4
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001516:	6a21      	ldr	r1, [r4, #32]
 8001518:	69e3      	ldr	r3, [r4, #28]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 800151a:	61d0      	str	r0, [r2, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800151c:	430b      	orrs	r3, r1
 800151e:	6013      	str	r3, [r2, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8001520:	68e1      	ldr	r1, [r4, #12]
 8001522:	6923      	ldr	r3, [r4, #16]
 8001524:	430b      	orrs	r3, r1
 8001526:	6093      	str	r3, [r2, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8001528:	69a1      	ldr	r1, [r4, #24]
 800152a:	6963      	ldr	r3, [r4, #20]
 800152c:	430b      	orrs	r3, r1
 800152e:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001530:	6813      	ldr	r3, [r2, #0]
 8001532:	f043 0301 	orr.w	r3, r3, #1
 8001536:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001538:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 800153a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800153c:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800153e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001542:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001544:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8001548:	bd70      	pop	{r4, r5, r6, pc}
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 800154a:	68a1      	ldr	r1, [r4, #8]
 800154c:	b949      	cbnz	r1, 8001562 <HAL_I2C_Init+0xb6>
 800154e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001552:	fbb0 f0f3 	udiv	r0, r0, r3
 8001556:	f3c0 030b 	ubfx	r3, r0, #0, #12
 800155a:	b163      	cbz	r3, 8001576 <HAL_I2C_Init+0xca>
 800155c:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8001560:	e7d9      	b.n	8001516 <HAL_I2C_Init+0x6a>
 8001562:	2119      	movs	r1, #25
 8001564:	434b      	muls	r3, r1
 8001566:	fbb0 f0f3 	udiv	r0, r0, r3
 800156a:	f3c0 030b 	ubfx	r3, r0, #0, #12
 800156e:	b113      	cbz	r3, 8001576 <HAL_I2C_Init+0xca>
 8001570:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8001574:	e7cf      	b.n	8001516 <HAL_I2C_Init+0x6a>
 8001576:	2001      	movs	r0, #1
 8001578:	e7cd      	b.n	8001516 <HAL_I2C_Init+0x6a>
    return HAL_ERROR;
 800157a:	2001      	movs	r0, #1
}
 800157c:	bd70      	pop	{r4, r5, r6, pc}
 800157e:	bf00      	nop
 8001580:	000186a0 	.word	0x000186a0
 8001584:	000f4240 	.word	0x000f4240

08001588 <HAL_I2C_Master_Transmit>:
{
 8001588:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800158c:	4604      	mov	r4, r0
 800158e:	461f      	mov	r7, r3
 8001590:	460d      	mov	r5, r1
 8001592:	4690      	mov	r8, r2
  tickstart = HAL_GetTick();
 8001594:	f7ff fd26 	bl	8000fe4 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001598:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800159c:	2b20      	cmp	r3, #32
  tickstart = HAL_GetTick();
 800159e:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 80015a0:	d004      	beq.n	80015ac <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 80015a2:	2502      	movs	r5, #2
}
 80015a4:	4628      	mov	r0, r5
 80015a6:	b004      	add	sp, #16
 80015a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80015ac:	9000      	str	r0, [sp, #0]
 80015ae:	2319      	movs	r3, #25
 80015b0:	2201      	movs	r2, #1
 80015b2:	495d      	ldr	r1, [pc, #372]	; (8001728 <HAL_I2C_Master_Transmit+0x1a0>)
 80015b4:	4620      	mov	r0, r4
 80015b6:	f7ff fed1 	bl	800135c <I2C_WaitOnFlagUntilTimeout>
 80015ba:	2800      	cmp	r0, #0
 80015bc:	d1f1      	bne.n	80015a2 <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 80015be:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d0ed      	beq.n	80015a2 <HAL_I2C_Master_Transmit+0x1a>
 80015c6:	2301      	movs	r3, #1
 80015c8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80015cc:	6823      	ldr	r3, [r4, #0]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 80015d2:	bf5e      	ittt	pl
 80015d4:	681a      	ldrpl	r2, [r3, #0]
 80015d6:	f042 0201 	orrpl.w	r2, r2, #1
 80015da:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015e2:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80015e4:	2221      	movs	r2, #33	; 0x21
 80015e6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80015ea:	2210      	movs	r2, #16
 80015ec:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015f0:	2200      	movs	r2, #0
 80015f2:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80015f4:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 80015f8:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80015fa:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80015fc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80015fe:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001600:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 8001602:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001606:	2a04      	cmp	r2, #4
 8001608:	d004      	beq.n	8001614 <HAL_I2C_Master_Transmit+0x8c>
 800160a:	2a01      	cmp	r2, #1
 800160c:	d002      	beq.n	8001614 <HAL_I2C_Master_Transmit+0x8c>
 800160e:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001612:	d104      	bne.n	800161e <HAL_I2C_Master_Transmit+0x96>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	e002      	b.n	8001624 <HAL_I2C_Master_Transmit+0x9c>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800161e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001620:	2a12      	cmp	r2, #18
 8001622:	d0f7      	beq.n	8001614 <HAL_I2C_Master_Transmit+0x8c>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001624:	9600      	str	r6, [sp, #0]
 8001626:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001628:	2200      	movs	r2, #0
 800162a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800162e:	4620      	mov	r0, r4
 8001630:	f7ff fe94 	bl	800135c <I2C_WaitOnFlagUntilTimeout>
 8001634:	bb28      	cbnz	r0, 8001682 <HAL_I2C_Master_Transmit+0xfa>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001636:	6923      	ldr	r3, [r4, #16]
 8001638:	6822      	ldr	r2, [r4, #0]
 800163a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800163e:	d112      	bne.n	8001666 <HAL_I2C_Master_Transmit+0xde>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001640:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8001644:	6115      	str	r5, [r2, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001646:	4633      	mov	r3, r6
 8001648:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800164a:	4938      	ldr	r1, [pc, #224]	; (800172c <HAL_I2C_Master_Transmit+0x1a4>)
 800164c:	4620      	mov	r0, r4
 800164e:	f7ff fe45 	bl	80012dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001652:	4605      	mov	r5, r0
 8001654:	b9a0      	cbnz	r0, 8001680 <HAL_I2C_Master_Transmit+0xf8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001656:	6823      	ldr	r3, [r4, #0]
 8001658:	9003      	str	r0, [sp, #12]
 800165a:	695a      	ldr	r2, [r3, #20]
 800165c:	9203      	str	r2, [sp, #12]
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	9303      	str	r3, [sp, #12]
 8001662:	9b03      	ldr	r3, [sp, #12]
    while(hi2c->XferSize > 0U)
 8001664:	e050      	b.n	8001708 <HAL_I2C_Master_Transmit+0x180>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001666:	11eb      	asrs	r3, r5, #7
 8001668:	f003 0306 	and.w	r3, r3, #6
 800166c:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8001670:	6113      	str	r3, [r2, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001672:	492f      	ldr	r1, [pc, #188]	; (8001730 <HAL_I2C_Master_Transmit+0x1a8>)
 8001674:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001676:	4633      	mov	r3, r6
 8001678:	4620      	mov	r0, r4
 800167a:	f7ff fe2f 	bl	80012dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800167e:	b148      	cbz	r0, 8001694 <HAL_I2C_Master_Transmit+0x10c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001680:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001682:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001684:	2b04      	cmp	r3, #4
 8001686:	f04f 0300 	mov.w	r3, #0
 800168a:	d107      	bne.n	800169c <HAL_I2C_Master_Transmit+0x114>
        __HAL_UNLOCK(hi2c);
 800168c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8001690:	2501      	movs	r5, #1
 8001692:	e787      	b.n	80015a4 <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001694:	6823      	ldr	r3, [r4, #0]
 8001696:	b2ed      	uxtb	r5, r5
 8001698:	611d      	str	r5, [r3, #16]
 800169a:	e7d4      	b.n	8001646 <HAL_I2C_Master_Transmit+0xbe>
        __HAL_UNLOCK(hi2c);
 800169c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_TIMEOUT;
 80016a0:	2503      	movs	r5, #3
 80016a2:	e77f      	b.n	80015a4 <HAL_I2C_Master_Transmit+0x1c>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016a4:	4632      	mov	r2, r6
 80016a6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80016a8:	4620      	mov	r0, r4
 80016aa:	f7ff fe85 	bl	80013b8 <I2C_WaitOnTXEFlagUntilTimeout>
 80016ae:	b140      	cbz	r0, 80016c2 <HAL_I2C_Master_Transmit+0x13a>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80016b2:	2b04      	cmp	r3, #4
 80016b4:	d1f4      	bne.n	80016a0 <HAL_I2C_Master_Transmit+0x118>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80016b6:	6822      	ldr	r2, [r4, #0]
 80016b8:	6813      	ldr	r3, [r2, #0]
 80016ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016be:	6013      	str	r3, [r2, #0]
 80016c0:	e7e6      	b.n	8001690 <HAL_I2C_Master_Transmit+0x108>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80016c2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80016c4:	6820      	ldr	r0, [r4, #0]
      hi2c->XferSize--;
 80016c6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80016c8:	1c4b      	adds	r3, r1, #1
 80016ca:	6263      	str	r3, [r4, #36]	; 0x24
 80016cc:	780b      	ldrb	r3, [r1, #0]
 80016ce:	6103      	str	r3, [r0, #16]
      hi2c->XferCount--;
 80016d0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80016d2:	3b01      	subs	r3, #1
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80016d8:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 80016da:	1e53      	subs	r3, r2, #1
 80016dc:	b29b      	uxth	r3, r3
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80016de:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 80016e0:	8523      	strh	r3, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80016e2:	d50a      	bpl.n	80016fa <HAL_I2C_Master_Transmit+0x172>
 80016e4:	b14b      	cbz	r3, 80016fa <HAL_I2C_Master_Transmit+0x172>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80016e6:	1c8b      	adds	r3, r1, #2
 80016e8:	6263      	str	r3, [r4, #36]	; 0x24
 80016ea:	784b      	ldrb	r3, [r1, #1]
 80016ec:	6103      	str	r3, [r0, #16]
        hi2c->XferCount--;
 80016ee:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80016f0:	3b01      	subs	r3, #1
 80016f2:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 80016f4:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 80016f6:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80016f8:	8522      	strh	r2, [r4, #40]	; 0x28
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016fa:	4632      	mov	r2, r6
 80016fc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80016fe:	4620      	mov	r0, r4
 8001700:	f7ff fead 	bl	800145e <I2C_WaitOnBTFFlagUntilTimeout>
 8001704:	2800      	cmp	r0, #0
 8001706:	d1d3      	bne.n	80016b0 <HAL_I2C_Master_Transmit+0x128>
    while(hi2c->XferSize > 0U)
 8001708:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1ca      	bne.n	80016a4 <HAL_I2C_Master_Transmit+0x11c>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800170e:	6821      	ldr	r1, [r4, #0]
 8001710:	680a      	ldr	r2, [r1, #0]
 8001712:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001716:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001718:	2220      	movs	r2, #32
 800171a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 800171e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001722:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8001726:	e73d      	b.n	80015a4 <HAL_I2C_Master_Transmit+0x1c>
 8001728:	00100002 	.word	0x00100002
 800172c:	00010002 	.word	0x00010002
 8001730:	00010008 	.word	0x00010008

08001734 <HAL_I2C_Master_Receive>:
{
 8001734:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001738:	4604      	mov	r4, r0
 800173a:	b089      	sub	sp, #36	; 0x24
 800173c:	4698      	mov	r8, r3
 800173e:	460d      	mov	r5, r1
 8001740:	4691      	mov	r9, r2
 8001742:	9f10      	ldr	r7, [sp, #64]	; 0x40
  tickstart = HAL_GetTick();
 8001744:	f7ff fc4e 	bl	8000fe4 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001748:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800174c:	2b20      	cmp	r3, #32
  tickstart = HAL_GetTick();
 800174e:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001750:	d004      	beq.n	800175c <HAL_I2C_Master_Receive+0x28>
    return HAL_BUSY;
 8001752:	2502      	movs	r5, #2
}
 8001754:	4628      	mov	r0, r5
 8001756:	b009      	add	sp, #36	; 0x24
 8001758:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800175c:	9000      	str	r0, [sp, #0]
 800175e:	2319      	movs	r3, #25
 8001760:	2201      	movs	r2, #1
 8001762:	499c      	ldr	r1, [pc, #624]	; (80019d4 <HAL_I2C_Master_Receive+0x2a0>)
 8001764:	4620      	mov	r0, r4
 8001766:	f7ff fdf9 	bl	800135c <I2C_WaitOnFlagUntilTimeout>
 800176a:	2800      	cmp	r0, #0
 800176c:	d1f1      	bne.n	8001752 <HAL_I2C_Master_Receive+0x1e>
    __HAL_LOCK(hi2c);
 800176e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001772:	2b01      	cmp	r3, #1
 8001774:	d0ed      	beq.n	8001752 <HAL_I2C_Master_Receive+0x1e>
 8001776:	2301      	movs	r3, #1
 8001778:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800177c:	6823      	ldr	r3, [r4, #0]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001782:	bf5e      	ittt	pl
 8001784:	681a      	ldrpl	r2, [r3, #0]
 8001786:	f042 0201 	orrpl.w	r2, r2, #1
 800178a:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001792:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001794:	2222      	movs	r2, #34	; 0x22
 8001796:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800179a:	2210      	movs	r2, #16
 800179c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80017a0:	2200      	movs	r2, #0
 80017a2:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017a4:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 80017a8:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017ac:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80017ae:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80017b0:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80017b2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80017b4:	6819      	ldr	r1, [r3, #0]
    hi2c->pBuffPtr    = pData;
 80017b6:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80017ba:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80017be:	2a04      	cmp	r2, #4
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80017c0:	6019      	str	r1, [r3, #0]
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80017c2:	d004      	beq.n	80017ce <HAL_I2C_Master_Receive+0x9a>
 80017c4:	2a01      	cmp	r2, #1
 80017c6:	d002      	beq.n	80017ce <HAL_I2C_Master_Receive+0x9a>
 80017c8:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80017cc:	d104      	bne.n	80017d8 <HAL_I2C_Master_Receive+0xa4>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	e002      	b.n	80017de <HAL_I2C_Master_Receive+0xaa>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80017d8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80017da:	2a11      	cmp	r2, #17
 80017dc:	d0f7      	beq.n	80017ce <HAL_I2C_Master_Receive+0x9a>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80017de:	9600      	str	r6, [sp, #0]
 80017e0:	463b      	mov	r3, r7
 80017e2:	2200      	movs	r2, #0
 80017e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80017e8:	4620      	mov	r0, r4
 80017ea:	f7ff fdb7 	bl	800135c <I2C_WaitOnFlagUntilTimeout>
 80017ee:	2800      	cmp	r0, #0
 80017f0:	d14a      	bne.n	8001888 <HAL_I2C_Master_Receive+0x154>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80017f2:	6923      	ldr	r3, [r4, #16]
 80017f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80017f8:	6823      	ldr	r3, [r4, #0]
 80017fa:	d136      	bne.n	800186a <HAL_I2C_Master_Receive+0x136>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80017fc:	f045 0501 	orr.w	r5, r5, #1
 8001800:	b2ed      	uxtb	r5, r5
 8001802:	611d      	str	r5, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001804:	4633      	mov	r3, r6
 8001806:	463a      	mov	r2, r7
 8001808:	4973      	ldr	r1, [pc, #460]	; (80019d8 <HAL_I2C_Master_Receive+0x2a4>)
 800180a:	4620      	mov	r0, r4
 800180c:	f7ff fd66 	bl	80012dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001810:	4605      	mov	r5, r0
 8001812:	2800      	cmp	r0, #0
 8001814:	d137      	bne.n	8001886 <HAL_I2C_Master_Receive+0x152>
    if(hi2c->XferSize == 0U)
 8001816:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001818:	6823      	ldr	r3, [r4, #0]
 800181a:	2a00      	cmp	r2, #0
 800181c:	d066      	beq.n	80018ec <HAL_I2C_Master_Receive+0x1b8>
    else if(hi2c->XferSize == 1U)
 800181e:	2a01      	cmp	r2, #1
 8001820:	d177      	bne.n	8001912 <HAL_I2C_Master_Receive+0x1de>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001828:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800182a:	9504      	str	r5, [sp, #16]
 800182c:	695a      	ldr	r2, [r3, #20]
 800182e:	9204      	str	r2, [sp, #16]
 8001830:	699a      	ldr	r2, [r3, #24]
 8001832:	9204      	str	r2, [sp, #16]
 8001834:	9a04      	ldr	r2, [sp, #16]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800183c:	601a      	str	r2, [r3, #0]
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800183e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80019e0 <HAL_I2C_Master_Receive+0x2ac>
    while(hi2c->XferSize > 0U)
 8001842:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001844:	2b00      	cmp	r3, #0
 8001846:	d05b      	beq.n	8001900 <HAL_I2C_Master_Receive+0x1cc>
      if(hi2c->XferSize <= 3U)
 8001848:	2b03      	cmp	r3, #3
 800184a:	f200 80cb 	bhi.w	80019e4 <HAL_I2C_Master_Receive+0x2b0>
        if(hi2c->XferSize == 1U)
 800184e:	2b01      	cmp	r3, #1
 8001850:	d17a      	bne.n	8001948 <HAL_I2C_Master_Receive+0x214>
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8001852:	4632      	mov	r2, r6
 8001854:	4639      	mov	r1, r7
 8001856:	4620      	mov	r0, r4
 8001858:	f7ff fdd4 	bl	8001404 <I2C_WaitOnRXNEFlagUntilTimeout>
 800185c:	2800      	cmp	r0, #0
 800185e:	f000 8090 	beq.w	8001982 <HAL_I2C_Master_Receive+0x24e>
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8001862:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001864:	2b20      	cmp	r3, #32
 8001866:	d116      	bne.n	8001896 <HAL_I2C_Master_Receive+0x162>
 8001868:	e03e      	b.n	80018e8 <HAL_I2C_Master_Receive+0x1b4>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800186a:	ea4f 18e5 	mov.w	r8, r5, asr #7
 800186e:	f008 0806 	and.w	r8, r8, #6
 8001872:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 8001876:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001878:	4958      	ldr	r1, [pc, #352]	; (80019dc <HAL_I2C_Master_Receive+0x2a8>)
 800187a:	4633      	mov	r3, r6
 800187c:	463a      	mov	r2, r7
 800187e:	4620      	mov	r0, r4
 8001880:	f7ff fd2c 	bl	80012dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001884:	b148      	cbz	r0, 800189a <HAL_I2C_Master_Receive+0x166>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001886:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001888:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800188a:	2b04      	cmp	r3, #4
 800188c:	f04f 0300 	mov.w	r3, #0
 8001890:	d128      	bne.n	80018e4 <HAL_I2C_Master_Receive+0x1b0>
        __HAL_UNLOCK(hi2c);
 8001892:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_ERROR;
 8001896:	2501      	movs	r5, #1
 8001898:	e75c      	b.n	8001754 <HAL_I2C_Master_Receive+0x20>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800189a:	6823      	ldr	r3, [r4, #0]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800189c:	494e      	ldr	r1, [pc, #312]	; (80019d8 <HAL_I2C_Master_Receive+0x2a4>)
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800189e:	b2ed      	uxtb	r5, r5
 80018a0:	611d      	str	r5, [r3, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80018a2:	463a      	mov	r2, r7
 80018a4:	4633      	mov	r3, r6
 80018a6:	4620      	mov	r0, r4
 80018a8:	f7ff fd18 	bl	80012dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80018ac:	4602      	mov	r2, r0
 80018ae:	2800      	cmp	r0, #0
 80018b0:	d1e9      	bne.n	8001886 <HAL_I2C_Master_Receive+0x152>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018b2:	6823      	ldr	r3, [r4, #0]
 80018b4:	9007      	str	r0, [sp, #28]
 80018b6:	6959      	ldr	r1, [r3, #20]
 80018b8:	9107      	str	r1, [sp, #28]
 80018ba:	6999      	ldr	r1, [r3, #24]
 80018bc:	9107      	str	r1, [sp, #28]
 80018be:	9907      	ldr	r1, [sp, #28]
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80018c0:	6819      	ldr	r1, [r3, #0]
 80018c2:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80018c6:	6019      	str	r1, [r3, #0]
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80018c8:	4620      	mov	r0, r4
 80018ca:	9600      	str	r6, [sp, #0]
 80018cc:	463b      	mov	r3, r7
 80018ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80018d2:	f7ff fd43 	bl	800135c <I2C_WaitOnFlagUntilTimeout>
 80018d6:	2800      	cmp	r0, #0
 80018d8:	d1d6      	bne.n	8001888 <HAL_I2C_Master_Receive+0x154>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80018da:	6822      	ldr	r2, [r4, #0]
 80018dc:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 80018e0:	6113      	str	r3, [r2, #16]
 80018e2:	e78f      	b.n	8001804 <HAL_I2C_Master_Receive+0xd0>
        __HAL_UNLOCK(hi2c);
 80018e4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_TIMEOUT;
 80018e8:	2503      	movs	r5, #3
 80018ea:	e733      	b.n	8001754 <HAL_I2C_Master_Receive+0x20>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018ec:	9503      	str	r5, [sp, #12]
 80018ee:	695a      	ldr	r2, [r3, #20]
 80018f0:	9203      	str	r2, [sp, #12]
 80018f2:	699a      	ldr	r2, [r3, #24]
 80018f4:	9203      	str	r2, [sp, #12]
 80018f6:	9a03      	ldr	r2, [sp, #12]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018fe:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001900:	2320      	movs	r3, #32
 8001902:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001906:	2300      	movs	r3, #0
 8001908:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 800190c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8001910:	e720      	b.n	8001754 <HAL_I2C_Master_Receive+0x20>
    else if(hi2c->XferSize == 2U)
 8001912:	2a02      	cmp	r2, #2
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001914:	681a      	ldr	r2, [r3, #0]
    else if(hi2c->XferSize == 2U)
 8001916:	d10d      	bne.n	8001934 <HAL_I2C_Master_Receive+0x200>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001918:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800191c:	601a      	str	r2, [r3, #0]
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001924:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001926:	9505      	str	r5, [sp, #20]
 8001928:	695a      	ldr	r2, [r3, #20]
 800192a:	9205      	str	r2, [sp, #20]
 800192c:	699b      	ldr	r3, [r3, #24]
 800192e:	9305      	str	r3, [sp, #20]
 8001930:	9b05      	ldr	r3, [sp, #20]
 8001932:	e784      	b.n	800183e <HAL_I2C_Master_Receive+0x10a>
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001934:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001938:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800193a:	9506      	str	r5, [sp, #24]
 800193c:	695a      	ldr	r2, [r3, #20]
 800193e:	9206      	str	r2, [sp, #24]
 8001940:	699b      	ldr	r3, [r3, #24]
 8001942:	9306      	str	r3, [sp, #24]
 8001944:	9b06      	ldr	r3, [sp, #24]
 8001946:	e77a      	b.n	800183e <HAL_I2C_Master_Receive+0x10a>
        else if(hi2c->XferSize == 2U)
 8001948:	2b02      	cmp	r3, #2
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800194a:	9600      	str	r6, [sp, #0]
 800194c:	463b      	mov	r3, r7
 800194e:	f04f 0200 	mov.w	r2, #0
 8001952:	4641      	mov	r1, r8
 8001954:	4620      	mov	r0, r4
        else if(hi2c->XferSize == 2U)
 8001956:	d122      	bne.n	800199e <HAL_I2C_Master_Receive+0x26a>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001958:	f7ff fd00 	bl	800135c <I2C_WaitOnFlagUntilTimeout>
 800195c:	2800      	cmp	r0, #0
 800195e:	d1c3      	bne.n	80018e8 <HAL_I2C_Master_Receive+0x1b4>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001960:	6823      	ldr	r3, [r4, #0]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001968:	601a      	str	r2, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800196a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800196c:	691b      	ldr	r3, [r3, #16]
 800196e:	1c51      	adds	r1, r2, #1
 8001970:	6261      	str	r1, [r4, #36]	; 0x24
 8001972:	7013      	strb	r3, [r2, #0]
          hi2c->XferSize--;
 8001974:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001976:	3b01      	subs	r3, #1
 8001978:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800197a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800197c:	3b01      	subs	r3, #1
 800197e:	b29b      	uxth	r3, r3
 8001980:	8563      	strh	r3, [r4, #42]	; 0x2a
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001982:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001984:	1c5a      	adds	r2, r3, #1
 8001986:	6262      	str	r2, [r4, #36]	; 0x24
 8001988:	6822      	ldr	r2, [r4, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800198a:	6912      	ldr	r2, [r2, #16]
 800198c:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 800198e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001990:	3b01      	subs	r3, #1
 8001992:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001994:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001996:	3b01      	subs	r3, #1
 8001998:	b29b      	uxth	r3, r3
 800199a:	8563      	strh	r3, [r4, #42]	; 0x2a
 800199c:	e751      	b.n	8001842 <HAL_I2C_Master_Receive+0x10e>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800199e:	f7ff fcdd 	bl	800135c <I2C_WaitOnFlagUntilTimeout>
 80019a2:	4602      	mov	r2, r0
 80019a4:	2800      	cmp	r0, #0
 80019a6:	d19f      	bne.n	80018e8 <HAL_I2C_Master_Receive+0x1b4>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80019a8:	6823      	ldr	r3, [r4, #0]
 80019aa:	6819      	ldr	r1, [r3, #0]
 80019ac:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80019b0:	6019      	str	r1, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80019b2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80019b4:	691b      	ldr	r3, [r3, #16]
 80019b6:	1c48      	adds	r0, r1, #1
 80019b8:	6260      	str	r0, [r4, #36]	; 0x24
 80019ba:	700b      	strb	r3, [r1, #0]
          hi2c->XferSize--;
 80019bc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80019be:	9600      	str	r6, [sp, #0]
          hi2c->XferSize--;
 80019c0:	3b01      	subs	r3, #1
 80019c2:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80019c4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80019c6:	3b01      	subs	r3, #1
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	8563      	strh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80019cc:	4641      	mov	r1, r8
 80019ce:	463b      	mov	r3, r7
 80019d0:	4620      	mov	r0, r4
 80019d2:	e7c1      	b.n	8001958 <HAL_I2C_Master_Receive+0x224>
 80019d4:	00100002 	.word	0x00100002
 80019d8:	00010002 	.word	0x00010002
 80019dc:	00010008 	.word	0x00010008
 80019e0:	00010004 	.word	0x00010004
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 80019e4:	4632      	mov	r2, r6
 80019e6:	4639      	mov	r1, r7
 80019e8:	4620      	mov	r0, r4
 80019ea:	f7ff fd0b 	bl	8001404 <I2C_WaitOnRXNEFlagUntilTimeout>
 80019ee:	2800      	cmp	r0, #0
 80019f0:	f47f af37 	bne.w	8001862 <HAL_I2C_Master_Receive+0x12e>
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80019f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80019f6:	1c5a      	adds	r2, r3, #1
 80019f8:	6262      	str	r2, [r4, #36]	; 0x24
 80019fa:	6822      	ldr	r2, [r4, #0]
 80019fc:	6912      	ldr	r2, [r2, #16]
 80019fe:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8001a00:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001a02:	6822      	ldr	r2, [r4, #0]
        hi2c->XferSize--;
 8001a04:	3b01      	subs	r3, #1
 8001a06:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001a08:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	8563      	strh	r3, [r4, #42]	; 0x2a
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001a10:	6953      	ldr	r3, [r2, #20]
 8001a12:	075b      	lsls	r3, r3, #29
 8001a14:	f57f af15 	bpl.w	8001842 <HAL_I2C_Master_Receive+0x10e>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001a18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a1a:	1c59      	adds	r1, r3, #1
 8001a1c:	6261      	str	r1, [r4, #36]	; 0x24
 8001a1e:	e7b4      	b.n	800198a <HAL_I2C_Master_Receive+0x256>

08001a20 <HAL_I2S_TxCpltCallback>:
 8001a20:	4770      	bx	lr

08001a22 <HAL_I2S_RxCpltCallback>:
 8001a22:	4770      	bx	lr

08001a24 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
 __weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001a24:	4770      	bx	lr
	...

08001a28 <HAL_I2S_Init>:
{
 8001a28:	b570      	push	{r4, r5, r6, lr}
  if(hi2s == NULL)
 8001a2a:	4604      	mov	r4, r0
 8001a2c:	2800      	cmp	r0, #0
 8001a2e:	d03f      	beq.n	8001ab0 <HAL_I2S_Init+0x88>
  hi2s->State = HAL_I2S_STATE_BUSY;
 8001a30:	2502      	movs	r5, #2
  hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001a32:	4b41      	ldr	r3, [pc, #260]	; (8001b38 <HAL_I2S_Init+0x110>)
  hi2s->State = HAL_I2S_STATE_BUSY;
 8001a34:	f880 5041 	strb.w	r5, [r0, #65]	; 0x41
  hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001a38:	6343      	str	r3, [r0, #52]	; 0x34
  HAL_I2S_MspInit(hi2s);
 8001a3a:	f002 fc97 	bl	800436c <HAL_I2S_MspInit>
  CLEAR_BIT(hi2s->Instance->I2SCFGR,(SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001a3e:	6822      	ldr	r2, [r4, #0]
 8001a40:	69d3      	ldr	r3, [r2, #28]
 8001a42:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001a46:	f023 030f 	bic.w	r3, r3, #15
 8001a4a:	61d3      	str	r3, [r2, #28]
  if(hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001a4c:	6963      	ldr	r3, [r4, #20]
  hi2s->Instance->I2SPR = 0x0002U;
 8001a4e:	6215      	str	r5, [r2, #32]
  if(hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001a50:	2b02      	cmp	r3, #2
  tmpreg = hi2s->Instance->I2SCFGR;
 8001a52:	69d5      	ldr	r5, [r2, #28]
  if(hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001a54:	d035      	beq.n	8001ac2 <HAL_I2S_Init+0x9a>
    if(hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001a56:	68e3      	ldr	r3, [r4, #12]
      packetlength = 16U;
 8001a58:	2b00      	cmp	r3, #0
    if(hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001a5a:	68a3      	ldr	r3, [r4, #8]
      packetlength = 16U;
 8001a5c:	bf14      	ite	ne
 8001a5e:	2620      	movne	r6, #32
 8001a60:	2610      	moveq	r6, #16
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001a62:	2001      	movs	r0, #1
    if(hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001a64:	2b20      	cmp	r3, #32
      packetlength = packetlength * 2U;
 8001a66:	bf98      	it	ls
 8001a68:	0076      	lslls	r6, r6, #1
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001a6a:	f001 f96b 	bl	8002d44 <HAL_RCCEx_GetPeriphCLKFreq>
    if(hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001a6e:	6923      	ldr	r3, [r4, #16]
 8001a70:	6961      	ldr	r1, [r4, #20]
 8001a72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a76:	d11f      	bne.n	8001ab8 <HAL_I2S_Init+0x90>
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001a78:	68e3      	ldr	r3, [r4, #12]
 8001a7a:	220a      	movs	r2, #10
 8001a7c:	b1d3      	cbz	r3, 8001ab4 <HAL_I2S_Init+0x8c>
        tmp = (uint32_t)(((((i2sclk / (packetlength*4)) * 10) / hi2s->Init.AudioFreq)) + 5);
 8001a7e:	00b3      	lsls	r3, r6, #2
        tmp = (uint32_t)(((((i2sclk / (packetlength*8)) * 10) / hi2s->Init.AudioFreq)) + 5);
 8001a80:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a84:	4353      	muls	r3, r2
    tmp = tmp / 10U;
 8001a86:	220a      	movs	r2, #10
      tmp = (uint32_t)(((((i2sclk / packetlength) *10 ) / hi2s->Init.AudioFreq)) + 5);
 8001a88:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a8c:	3305      	adds	r3, #5
    tmp = tmp / 10U;
 8001a8e:	fbb3 f3f2 	udiv	r3, r3, r2
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2U);
 8001a92:	f003 0201 	and.w	r2, r3, #1
    i2sodd = (uint32_t) (i2sodd << 8U);
 8001a96:	0212      	lsls	r2, r2, #8
 8001a98:	f3c3 034f 	ubfx	r3, r3, #1, #16
  if((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001a9c:	1e99      	subs	r1, r3, #2
 8001a9e:	29fd      	cmp	r1, #253	; 0xfd
 8001aa0:	d911      	bls.n	8001ac6 <HAL_I2S_Init+0x9e>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001aa2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001aa4:	f043 0310 	orr.w	r3, r3, #16
 8001aa8:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_I2S_ErrorCallback(hi2s);
 8001aaa:	4620      	mov	r0, r4
 8001aac:	f7ff ffba 	bl	8001a24 <HAL_I2S_ErrorCallback>
    return HAL_ERROR;
 8001ab0:	2001      	movs	r0, #1
}
 8001ab2:	bd70      	pop	{r4, r5, r6, pc}
        tmp = (uint32_t)(((((i2sclk / (packetlength*8)) * 10) / hi2s->Init.AudioFreq)) + 5);
 8001ab4:	00f3      	lsls	r3, r6, #3
 8001ab6:	e7e3      	b.n	8001a80 <HAL_I2S_Init+0x58>
      tmp = (uint32_t)(((((i2sclk / packetlength) *10 ) / hi2s->Init.AudioFreq)) + 5);
 8001ab8:	230a      	movs	r3, #10
 8001aba:	fbb0 f0f6 	udiv	r0, r0, r6
 8001abe:	4343      	muls	r3, r0
 8001ac0:	e7e1      	b.n	8001a86 <HAL_I2S_Init+0x5e>
  uint32_t tmpreg = 0U, i2sdiv = 2U, i2sodd = 0U, packetlength = 16U;
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	e7ea      	b.n	8001a9c <HAL_I2S_Init+0x74>
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	6922      	ldr	r2, [r4, #16]
 8001aca:	6820      	ldr	r0, [r4, #0]
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(hi2s->Init.Mode | \
 8001acc:	6866      	ldr	r6, [r4, #4]
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	6203      	str	r3, [r0, #32]
                       (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8001ad2:	68e2      	ldr	r2, [r4, #12]
 8001ad4:	68a3      	ldr	r3, [r4, #8]
 8001ad6:	4313      	orrs	r3, r2
                       (uint16_t)hi2s->Init.CPOL))));
 8001ad8:	69a2      	ldr	r2, [r4, #24]
                       (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8001ada:	4313      	orrs	r3, r2
 8001adc:	b29b      	uxth	r3, r3
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(hi2s->Init.Mode | \
 8001ade:	f446 6100 	orr.w	r1, r6, #2048	; 0x800
 8001ae2:	4319      	orrs	r1, r3
  if(hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001ae4:	6a22      	ldr	r2, [r4, #32]
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(hi2s->Init.Mode | \
 8001ae6:	b289      	uxth	r1, r1
 8001ae8:	430d      	orrs	r5, r1
  if(hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001aea:	2a01      	cmp	r2, #1
  WRITE_REG(hi2s->Instance->I2SCFGR, tmpreg);
 8001aec:	61c5      	str	r5, [r0, #28]
  if(hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001aee:	d11c      	bne.n	8001b2a <HAL_I2S_Init+0x102>
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001af0:	4a12      	ldr	r2, [pc, #72]	; (8001b3c <HAL_I2S_Init+0x114>)
 8001af2:	6362      	str	r2, [r4, #52]	; 0x34
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR,(SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001af4:	4912      	ldr	r1, [pc, #72]	; (8001b40 <HAL_I2S_Init+0x118>)
 8001af6:	4a13      	ldr	r2, [pc, #76]	; (8001b44 <HAL_I2S_Init+0x11c>)
 8001af8:	4288      	cmp	r0, r1
 8001afa:	bf18      	it	ne
 8001afc:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
      tmp = I2S_MODE_SLAVE_TX;
 8001b00:	f436 7000 	bics.w	r0, r6, #512	; 0x200
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR,(SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001b04:	69d1      	ldr	r1, [r2, #28]
 8001b06:	f421 617b 	bic.w	r1, r1, #4016	; 0xfb0
 8001b0a:	f021 010f 	bic.w	r1, r1, #15
 8001b0e:	61d1      	str	r1, [r2, #28]
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001b10:	f04f 0102 	mov.w	r1, #2
 8001b14:	6211      	str	r1, [r2, #32]
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001b16:	69d1      	ldr	r1, [r2, #28]
      tmp = I2S_MODE_SLAVE_TX;
 8001b18:	bf0c      	ite	eq
 8001b1a:	f44f 7080 	moveq.w	r0, #256	; 0x100
 8001b1e:	2000      	movne	r0, #0
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001b20:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b24:	4303      	orrs	r3, r0
 8001b26:	430b      	orrs	r3, r1
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR,tmpreg);
 8001b28:	61d3      	str	r3, [r2, #28]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001b2a:	2000      	movs	r0, #0
  hi2s->State     = HAL_I2S_STATE_READY;
 8001b2c:	2301      	movs	r3, #1
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001b2e:	6460      	str	r0, [r4, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001b30:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  return HAL_OK;
 8001b34:	bd70      	pop	{r4, r5, r6, pc}
 8001b36:	bf00      	nop
 8001b38:	08001b49 	.word	0x08001b49
 8001b3c:	08001c55 	.word	0x08001c55
 8001b40:	40003800 	.word	0x40003800
 8001b44:	40003400 	.word	0x40003400

08001b48 <I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001b48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001b4a:	6803      	ldr	r3, [r0, #0]
 8001b4c:	689a      	ldr	r2, [r3, #8]
 8001b4e:	9201      	str	r2, [sp, #4]

  if(hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001b50:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8001b54:	2a04      	cmp	r2, #4
{
 8001b56:	4604      	mov	r4, r0
  if(hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001b58:	d13a      	bne.n	8001bd0 <I2S_IRQHandler+0x88>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if(((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001b5a:	9a01      	ldr	r2, [sp, #4]
 8001b5c:	07d1      	lsls	r1, r2, #31
 8001b5e:	d519      	bpl.n	8001b94 <I2S_IRQHandler+0x4c>
 8001b60:	685a      	ldr	r2, [r3, #4]
 8001b62:	0652      	lsls	r2, r2, #25
 8001b64:	d516      	bpl.n	8001b94 <I2S_IRQHandler+0x4c>
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8001b66:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8001b68:	1c91      	adds	r1, r2, #2
 8001b6a:	62c1      	str	r1, [r0, #44]	; 0x2c
 8001b6c:	68d9      	ldr	r1, [r3, #12]
 8001b6e:	8011      	strh	r1, [r2, #0]
  hi2s->RxXferCount--;
 8001b70:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8001b72:	3a01      	subs	r2, #1
 8001b74:	b292      	uxth	r2, r2
 8001b76:	8642      	strh	r2, [r0, #50]	; 0x32
  if(hi2s->RxXferCount == 0U)
 8001b78:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8001b7a:	b292      	uxth	r2, r2
 8001b7c:	b952      	cbnz	r2, 8001b94 <I2S_IRQHandler+0x4c>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001b7e:	685a      	ldr	r2, [r3, #4]
 8001b80:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001b84:	0412      	lsls	r2, r2, #16
 8001b86:	0c12      	lsrs	r2, r2, #16
 8001b88:	605a      	str	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 8001b90:	f7ff ff47 	bl	8001a22 <HAL_I2S_RxCpltCallback>
    {
      I2S_Receive_IT(hi2s);
    }

    /* I2S Overrun error interrupt occured -------------------------------------*/
    if(((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001b94:	9b01      	ldr	r3, [sp, #4]
 8001b96:	0659      	lsls	r1, r3, #25
 8001b98:	d51a      	bpl.n	8001bd0 <I2S_IRQHandler+0x88>
 8001b9a:	6823      	ldr	r3, [r4, #0]
 8001b9c:	685a      	ldr	r2, [r3, #4]
 8001b9e:	0692      	lsls	r2, r2, #26
 8001ba0:	d516      	bpl.n	8001bd0 <I2S_IRQHandler+0x88>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001ba2:	685a      	ldr	r2, [r3, #4]
 8001ba4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001ba8:	0412      	lsls	r2, r2, #16
 8001baa:	0c12      	lsrs	r2, r2, #16
 8001bac:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001bae:	2200      	movs	r2, #0
 8001bb0:	9202      	str	r2, [sp, #8]
 8001bb2:	68da      	ldr	r2, [r3, #12]
 8001bb4:	9202      	str	r2, [sp, #8]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	9302      	str	r3, [sp, #8]
 8001bba:	9b02      	ldr	r3, [sp, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_OVR);
 8001bc2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001bc4:	f043 0302 	orr.w	r3, r3, #2
 8001bc8:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001bca:	4620      	mov	r0, r4
 8001bcc:	f7ff ff2a 	bl	8001a24 <HAL_I2S_ErrorCallback>
      }
    }

    if(hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001bd0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8001bd4:	2b03      	cmp	r3, #3
 8001bd6:	d13a      	bne.n	8001c4e <I2S_IRQHandler+0x106>
    {
      /* I2S in mode Transmitter -----------------------------------------------*/
    if(((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001bd8:	9b01      	ldr	r3, [sp, #4]
 8001bda:	079b      	lsls	r3, r3, #30
 8001bdc:	d51b      	bpl.n	8001c16 <I2S_IRQHandler+0xce>
 8001bde:	6822      	ldr	r2, [r4, #0]
 8001be0:	6853      	ldr	r3, [r2, #4]
 8001be2:	0618      	lsls	r0, r3, #24
 8001be4:	d517      	bpl.n	8001c16 <I2S_IRQHandler+0xce>
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001be6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001be8:	1c99      	adds	r1, r3, #2
 8001bea:	881b      	ldrh	r3, [r3, #0]
 8001bec:	6261      	str	r1, [r4, #36]	; 0x24
 8001bee:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 8001bf0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	8563      	strh	r3, [r4, #42]	; 0x2a
  if(hi2s->TxXferCount == 0U)
 8001bf8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	b95b      	cbnz	r3, 8001c16 <I2S_IRQHandler+0xce>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001bfe:	6853      	ldr	r3, [r2, #4]
 8001c00:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001c04:	041b      	lsls	r3, r3, #16
 8001c06:	0c1b      	lsrs	r3, r3, #16
 8001c08:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 8001c10:	4620      	mov	r0, r4
 8001c12:	f7ff ff05 	bl	8001a20 <HAL_I2S_TxCpltCallback>
      {
        I2S_Transmit_IT(hi2s);
      }

      /* I2S Underrun error interrupt occurred --------------------------------*/
    if(((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001c16:	9b01      	ldr	r3, [sp, #4]
 8001c18:	0719      	lsls	r1, r3, #28
 8001c1a:	d518      	bpl.n	8001c4e <I2S_IRQHandler+0x106>
 8001c1c:	6823      	ldr	r3, [r4, #0]
 8001c1e:	685a      	ldr	r2, [r3, #4]
 8001c20:	0692      	lsls	r2, r2, #26
 8001c22:	d514      	bpl.n	8001c4e <I2S_IRQHandler+0x106>
      {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001c24:	685a      	ldr	r2, [r3, #4]
 8001c26:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001c2a:	0412      	lsls	r2, r2, #16
 8001c2c:	0c12      	lsrs	r2, r2, #16
 8001c2e:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001c30:	2200      	movs	r2, #0
 8001c32:	9203      	str	r2, [sp, #12]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	9303      	str	r3, [sp, #12]
 8001c38:	9b03      	ldr	r3, [sp, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001c40:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001c42:	f043 0304 	orr.w	r3, r3, #4
 8001c46:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001c48:	4620      	mov	r0, r4
 8001c4a:	f7ff feeb 	bl	8001a24 <HAL_I2S_ErrorCallback>
    }
  }
}
 8001c4e:	b004      	add	sp, #16
 8001c50:	bd10      	pop	{r4, pc}

08001c52 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief Tx and Rx Transfer completed callback
  * @param hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001c52:	4770      	bx	lr

08001c54 <HAL_I2SEx_FullDuplex_IRQHandler>:
{
 8001c54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  __IO uint32_t i2ssr    = hi2s->Instance->SR ;
 8001c56:	6803      	ldr	r3, [r0, #0]
  __IO uint32_t i2sextsr = I2SxEXT(hi2s->Instance)->SR;
 8001c58:	4992      	ldr	r1, [pc, #584]	; (8001ea4 <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
  __IO uint32_t i2ssr    = hi2s->Instance->SR ;
 8001c5a:	689a      	ldr	r2, [r3, #8]
 8001c5c:	9200      	str	r2, [sp, #0]
  __IO uint32_t i2sextsr = I2SxEXT(hi2s->Instance)->SR;
 8001c5e:	4a92      	ldr	r2, [pc, #584]	; (8001ea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 8001c60:	428b      	cmp	r3, r1
 8001c62:	bf18      	it	ne
 8001c64:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
{
 8001c68:	4604      	mov	r4, r0
  __IO uint32_t i2sextsr = I2SxEXT(hi2s->Instance)->SR;
 8001c6a:	6891      	ldr	r1, [r2, #8]
 8001c6c:	9101      	str	r1, [sp, #4]
  if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX)
 8001c6e:	69d9      	ldr	r1, [r3, #28]
 8001c70:	f401 7140 	and.w	r1, r1, #768	; 0x300
 8001c74:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8001c78:	d004      	beq.n	8001c84 <HAL_I2SEx_FullDuplex_IRQHandler+0x30>
      || ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 8001c7a:	69d9      	ldr	r1, [r3, #28]
 8001c7c:	f411 7f40 	tst.w	r1, #768	; 0x300
 8001c80:	f040 8097 	bne.w	8001db2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15e>
    if(((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001c84:	9a00      	ldr	r2, [sp, #0]
 8001c86:	0792      	lsls	r2, r2, #30
 8001c88:	d51d      	bpl.n	8001cc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001c8a:	685a      	ldr	r2, [r3, #4]
 8001c8c:	0610      	lsls	r0, r2, #24
 8001c8e:	d51a      	bpl.n	8001cc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
static void I2SEx_FullDuplexTx_IT(I2S_HandleTypeDef *hi2s, I2S_UseTypeDef i2sUsed)
{
  if(i2sUsed == I2S_USE_I2S)
  {
    /* Write Data on DR register */
    hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001c90:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001c92:	1c91      	adds	r1, r2, #2
 8001c94:	8812      	ldrh	r2, [r2, #0]
 8001c96:	6261      	str	r1, [r4, #36]	; 0x24
 8001c98:	60da      	str	r2, [r3, #12]
    hi2s->TxXferCount--;
 8001c9a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001c9c:	3a01      	subs	r2, #1
 8001c9e:	b292      	uxth	r2, r2
 8001ca0:	8562      	strh	r2, [r4, #42]	; 0x2a

    if(hi2s->TxXferCount == 0U)
 8001ca2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001ca4:	b292      	uxth	r2, r2
 8001ca6:	b972      	cbnz	r2, 8001cc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001ca8:	685a      	ldr	r2, [r3, #4]
 8001caa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001cae:	0412      	lsls	r2, r2, #16
 8001cb0:	0c12      	lsrs	r2, r2, #16
 8001cb2:	605a      	str	r2, [r3, #4]

      if(hi2s->RxXferCount == 0U)
 8001cb4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	b92b      	cbnz	r3, 8001cc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001cc0:	4620      	mov	r0, r4
 8001cc2:	f7ff ffc6 	bl	8001c52 <HAL_I2SEx_TxRxCpltCallback>
    if(((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001cc6:	9b01      	ldr	r3, [sp, #4]
 8001cc8:	07d9      	lsls	r1, r3, #31
 8001cca:	d522      	bpl.n	8001d12 <HAL_I2SEx_FullDuplex_IRQHandler+0xbe>
 8001ccc:	4a75      	ldr	r2, [pc, #468]	; (8001ea4 <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
 8001cce:	6821      	ldr	r1, [r4, #0]
 8001cd0:	4b75      	ldr	r3, [pc, #468]	; (8001ea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 8001cd2:	4291      	cmp	r1, r2
 8001cd4:	bf18      	it	ne
 8001cd6:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8001cda:	685a      	ldr	r2, [r3, #4]
 8001cdc:	0652      	lsls	r2, r2, #25
 8001cde:	d518      	bpl.n	8001d12 <HAL_I2SEx_FullDuplex_IRQHandler+0xbe>
    }
  }
  else
  {
    /* Read Data from DR register */
    (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8001ce0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001ce2:	1c91      	adds	r1, r2, #2
 8001ce4:	62e1      	str	r1, [r4, #44]	; 0x2c
 8001ce6:	68d9      	ldr	r1, [r3, #12]
 8001ce8:	8011      	strh	r1, [r2, #0]
    hi2s->RxXferCount--;
 8001cea:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8001cec:	3a01      	subs	r2, #1
 8001cee:	b292      	uxth	r2, r2
 8001cf0:	8662      	strh	r2, [r4, #50]	; 0x32

    if(hi2s->RxXferCount == 0U)
 8001cf2:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8001cf4:	b292      	uxth	r2, r2
 8001cf6:	b962      	cbnz	r2, 8001d12 <HAL_I2SEx_FullDuplex_IRQHandler+0xbe>
    {
      /* Disable I2Sext RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001cf8:	685a      	ldr	r2, [r3, #4]
 8001cfa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001cfe:	605a      	str	r2, [r3, #4]

      if(hi2s->TxXferCount == 0U)
 8001d00:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	b92b      	cbnz	r3, 8001d12 <HAL_I2SEx_FullDuplex_IRQHandler+0xbe>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 8001d06:	2301      	movs	r3, #1
 8001d08:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001d0c:	4620      	mov	r0, r4
 8001d0e:	f7ff ffa0 	bl	8001c52 <HAL_I2SEx_TxRxCpltCallback>
    if(((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001d12:	9b01      	ldr	r3, [sp, #4]
 8001d14:	0658      	lsls	r0, r3, #25
 8001d16:	d524      	bpl.n	8001d62 <HAL_I2SEx_FullDuplex_IRQHandler+0x10e>
 8001d18:	4962      	ldr	r1, [pc, #392]	; (8001ea4 <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
 8001d1a:	6823      	ldr	r3, [r4, #0]
 8001d1c:	4a62      	ldr	r2, [pc, #392]	; (8001ea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 8001d1e:	428b      	cmp	r3, r1
 8001d20:	bf18      	it	ne
 8001d22:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 8001d26:	6851      	ldr	r1, [r2, #4]
 8001d28:	0689      	lsls	r1, r1, #26
 8001d2a:	d51a      	bpl.n	8001d62 <HAL_I2SEx_FullDuplex_IRQHandler+0x10e>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001d2c:	6851      	ldr	r1, [r2, #4]
 8001d2e:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8001d32:	6051      	str	r1, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d34:	685a      	ldr	r2, [r3, #4]
 8001d36:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001d3a:	0412      	lsls	r2, r2, #16
 8001d3c:	0c12      	lsrs	r2, r2, #16
 8001d3e:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001d40:	2200      	movs	r2, #0
 8001d42:	9202      	str	r2, [sp, #8]
 8001d44:	68da      	ldr	r2, [r3, #12]
 8001d46:	9202      	str	r2, [sp, #8]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	9302      	str	r3, [sp, #8]
 8001d4c:	9b02      	ldr	r3, [sp, #8]
      hi2s->State = HAL_I2S_STATE_READY;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_OVR);
 8001d54:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001d56:	f043 0302 	orr.w	r3, r3, #2
 8001d5a:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001d5c:	4620      	mov	r0, r4
 8001d5e:	f7ff fe61 	bl	8001a24 <HAL_I2S_ErrorCallback>
    if(((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001d62:	9b00      	ldr	r3, [sp, #0]
 8001d64:	071b      	lsls	r3, r3, #28
 8001d66:	d522      	bpl.n	8001dae <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8001d68:	6823      	ldr	r3, [r4, #0]
 8001d6a:	685a      	ldr	r2, [r3, #4]
 8001d6c:	0690      	lsls	r0, r2, #26
 8001d6e:	d51e      	bpl.n	8001dae <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d70:	685a      	ldr	r2, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001d72:	494c      	ldr	r1, [pc, #304]	; (8001ea4 <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d74:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001d78:	0412      	lsls	r2, r2, #16
 8001d7a:	0c12      	lsrs	r2, r2, #16
 8001d7c:	605a      	str	r2, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001d7e:	4a4a      	ldr	r2, [pc, #296]	; (8001ea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 8001d80:	428b      	cmp	r3, r1
 8001d82:	bf18      	it	ne
 8001d84:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 8001d88:	6851      	ldr	r1, [r2, #4]
 8001d8a:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8001d8e:	6051      	str	r1, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001d90:	2200      	movs	r2, #0
 8001d92:	9203      	str	r2, [sp, #12]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	9303      	str	r3, [sp, #12]
 8001d98:	9b03      	ldr	r3, [sp, #12]
      hi2s->State = HAL_I2S_STATE_READY;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_UDR);
 8001da0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001da2:	f043 0304 	orr.w	r3, r3, #4
 8001da6:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001da8:	4620      	mov	r0, r4
 8001daa:	f7ff fe3b 	bl	8001a24 <HAL_I2S_ErrorCallback>
}
 8001dae:	b004      	add	sp, #16
 8001db0:	bd10      	pop	{r4, pc}
    if(((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001db2:	9b01      	ldr	r3, [sp, #4]
 8001db4:	0799      	lsls	r1, r3, #30
 8001db6:	d51a      	bpl.n	8001dee <HAL_I2SEx_FullDuplex_IRQHandler+0x19a>
 8001db8:	6853      	ldr	r3, [r2, #4]
 8001dba:	061b      	lsls	r3, r3, #24
 8001dbc:	d517      	bpl.n	8001dee <HAL_I2SEx_FullDuplex_IRQHandler+0x19a>
    I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8001dbe:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001dc0:	1c99      	adds	r1, r3, #2
 8001dc2:	881b      	ldrh	r3, [r3, #0]
 8001dc4:	6241      	str	r1, [r0, #36]	; 0x24
 8001dc6:	60d3      	str	r3, [r2, #12]
    hi2s->TxXferCount--;
 8001dc8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	8543      	strh	r3, [r0, #42]	; 0x2a
    if(hi2s->TxXferCount == 0U)
 8001dd0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	b95b      	cbnz	r3, 8001dee <HAL_I2SEx_FullDuplex_IRQHandler+0x19a>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001dd6:	6853      	ldr	r3, [r2, #4]
 8001dd8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001ddc:	6053      	str	r3, [r2, #4]
      if(hi2s->RxXferCount == 0U)
 8001dde:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	b923      	cbnz	r3, 8001dee <HAL_I2SEx_FullDuplex_IRQHandler+0x19a>
        hi2s->State = HAL_I2S_STATE_READY;
 8001de4:	2301      	movs	r3, #1
 8001de6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001dea:	f7ff ff32 	bl	8001c52 <HAL_I2SEx_TxRxCpltCallback>
    if(((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001dee:	9b00      	ldr	r3, [sp, #0]
 8001df0:	07d8      	lsls	r0, r3, #31
 8001df2:	d51e      	bpl.n	8001e32 <HAL_I2SEx_FullDuplex_IRQHandler+0x1de>
 8001df4:	6822      	ldr	r2, [r4, #0]
 8001df6:	6853      	ldr	r3, [r2, #4]
 8001df8:	0659      	lsls	r1, r3, #25
 8001dfa:	d51a      	bpl.n	8001e32 <HAL_I2SEx_FullDuplex_IRQHandler+0x1de>
    (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8001dfc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001dfe:	1c99      	adds	r1, r3, #2
 8001e00:	62e1      	str	r1, [r4, #44]	; 0x2c
 8001e02:	68d1      	ldr	r1, [r2, #12]
 8001e04:	8019      	strh	r1, [r3, #0]
    hi2s->RxXferCount--;
 8001e06:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8001e08:	3b01      	subs	r3, #1
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	8663      	strh	r3, [r4, #50]	; 0x32
    if(hi2s->RxXferCount == 0U)
 8001e0e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	b973      	cbnz	r3, 8001e32 <HAL_I2SEx_FullDuplex_IRQHandler+0x1de>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e14:	6853      	ldr	r3, [r2, #4]
 8001e16:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001e1a:	041b      	lsls	r3, r3, #16
 8001e1c:	0c1b      	lsrs	r3, r3, #16
 8001e1e:	6053      	str	r3, [r2, #4]
      if(hi2s->TxXferCount == 0U)
 8001e20:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	b92b      	cbnz	r3, 8001e32 <HAL_I2SEx_FullDuplex_IRQHandler+0x1de>
        hi2s->State = HAL_I2S_STATE_READY;
 8001e26:	2301      	movs	r3, #1
 8001e28:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001e2c:	4620      	mov	r0, r4
 8001e2e:	f7ff ff10 	bl	8001c52 <HAL_I2SEx_TxRxCpltCallback>
    if(((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001e32:	9b00      	ldr	r3, [sp, #0]
 8001e34:	065a      	lsls	r2, r3, #25
 8001e36:	d51d      	bpl.n	8001e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x220>
 8001e38:	6822      	ldr	r2, [r4, #0]
 8001e3a:	6853      	ldr	r3, [r2, #4]
 8001e3c:	069b      	lsls	r3, r3, #26
 8001e3e:	d519      	bpl.n	8001e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x220>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e40:	6853      	ldr	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e42:	4918      	ldr	r1, [pc, #96]	; (8001ea4 <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e44:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001e48:	041b      	lsls	r3, r3, #16
 8001e4a:	0c1b      	lsrs	r3, r3, #16
 8001e4c:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e4e:	4b16      	ldr	r3, [pc, #88]	; (8001ea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 8001e50:	428a      	cmp	r2, r1
 8001e52:	bf18      	it	ne
 8001e54:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
      HAL_I2S_ErrorCallback(hi2s);
 8001e58:	4620      	mov	r0, r4
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e5a:	685a      	ldr	r2, [r3, #4]
 8001e5c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001e60:	605a      	str	r2, [r3, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8001e62:	2301      	movs	r3, #1
 8001e64:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_OVR);
 8001e68:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001e6a:	f043 0302 	orr.w	r3, r3, #2
 8001e6e:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001e70:	f7ff fdd8 	bl	8001a24 <HAL_I2S_ErrorCallback>
    if(((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001e74:	9b01      	ldr	r3, [sp, #4]
 8001e76:	0718      	lsls	r0, r3, #28
 8001e78:	d599      	bpl.n	8001dae <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8001e7a:	490a      	ldr	r1, [pc, #40]	; (8001ea4 <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
 8001e7c:	6822      	ldr	r2, [r4, #0]
 8001e7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 8001e80:	428a      	cmp	r2, r1
 8001e82:	bf18      	it	ne
 8001e84:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8001e88:	6859      	ldr	r1, [r3, #4]
 8001e8a:	0689      	lsls	r1, r1, #26
 8001e8c:	d58f      	bpl.n	8001dae <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e8e:	6859      	ldr	r1, [r3, #4]
 8001e90:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
 8001e94:	6059      	str	r1, [r3, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e96:	6853      	ldr	r3, [r2, #4]
 8001e98:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001e9c:	041b      	lsls	r3, r3, #16
 8001e9e:	0c1b      	lsrs	r3, r3, #16
 8001ea0:	6053      	str	r3, [r2, #4]
 8001ea2:	e77a      	b.n	8001d9a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8001ea4:	40003800 	.word	0x40003800
 8001ea8:	40003400 	.word	0x40003400

08001eac <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 8001eac:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8001eae:	4606      	mov	r6, r0
{ 
 8001eb0:	b08b      	sub	sp, #44	; 0x2c
  if(hpcd == NULL)
 8001eb2:	2800      	cmp	r0, #0
 8001eb4:	d064      	beq.n	8001f80 <HAL_PCD_Init+0xd4>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001eb6:	2303      	movs	r3, #3
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);

  /* Disable the Interrupts */
 __HAL_PCD_DISABLE(hpcd);
 8001eb8:	4634      	mov	r4, r6
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001eba:	f880 33b9 	strb.w	r3, [r0, #953]	; 0x3b9
  HAL_PCD_MspInit(hpcd);
 8001ebe:	f002 fb61 	bl	8004584 <HAL_PCD_MspInit>
 __HAL_PCD_DISABLE(hpcd);
 8001ec2:	f854 0b10 	ldr.w	r0, [r4], #16
 8001ec6:	f000 ffe8 	bl	8002e9a <USB_DisableGlobalInt>
 
 /*Init the Core (common init.) */
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 8001eca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ecc:	466d      	mov	r5, sp
 8001ece:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ed0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ed2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ed4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ed8:	e885 0003 	stmia.w	r5, {r0, r1}
 8001edc:	1d37      	adds	r7, r6, #4
 8001ede:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8001ee2:	6830      	ldr	r0, [r6, #0]
 8001ee4:	f000 ff99 	bl	8002e1a <USB_CoreInit>
 
 /* Force Device Mode*/
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 8001ee8:	2100      	movs	r1, #0
 8001eea:	6830      	ldr	r0, [r6, #0]
 8001eec:	f000 ffdb 	bl	8002ea6 <USB_SetCurrentMode>
 
 /* Init endpoints structures */
 for (i = 0U; i < 15U; i++)
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	4633      	mov	r3, r6
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 8001ef4:	4632      	mov	r2, r6
 8001ef6:	f106 0410 	add.w	r4, r6, #16
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1U;
 8001efa:	2501      	movs	r5, #1
   hpcd->IN_ep[i].num = i;
   hpcd->IN_ep[i].tx_fifo_num = i;
   /* Control until ep is activated */
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001efc:	4608      	mov	r0, r1
   hpcd->IN_ep[i].num = i;
 8001efe:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
   hpcd->IN_ep[i].tx_fifo_num = i;
 8001f02:	87d1      	strh	r1, [r2, #62]	; 0x3e
 for (i = 0U; i < 15U; i++)
 8001f04:	3101      	adds	r1, #1
 8001f06:	290f      	cmp	r1, #15
   hpcd->IN_ep[i].is_in = 1U;
 8001f08:	f882 5039 	strb.w	r5, [r2, #57]	; 0x39
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f0c:	f882 003b 	strb.w	r0, [r2, #59]	; 0x3b
   hpcd->IN_ep[i].maxpacket = 0U;
 8001f10:	6410      	str	r0, [r2, #64]	; 0x40
   hpcd->IN_ep[i].xfer_buff = 0U;
 8001f12:	6450      	str	r0, [r2, #68]	; 0x44
   hpcd->IN_ep[i].xfer_len = 0U;
 8001f14:	64d0      	str	r0, [r2, #76]	; 0x4c
 8001f16:	f102 021c 	add.w	r2, r2, #28
 for (i = 0U; i < 15U; i++)
 8001f1a:	d1f0      	bne.n	8001efe <HAL_PCD_Init+0x52>
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
   hpcd->OUT_ep[i].maxpacket = 0U;
   hpcd->OUT_ep[i].xfer_buff = 0U;
   hpcd->OUT_ep[i].xfer_len = 0U;
   
   hpcd->Instance->DIEPTXF[i] = 0U;
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f8d6 e000 	ldr.w	lr, [r6]
   hpcd->OUT_ep[i].is_in = 0U;
 8001f22:	4611      	mov	r1, r2
   hpcd->Instance->DIEPTXF[i] = 0U;
 8001f24:	f102 0040 	add.w	r0, r2, #64	; 0x40
   hpcd->OUT_ep[i].num = i;
 8001f28:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
   hpcd->IN_ep[i].tx_fifo_num = i;
 8001f2c:	87da      	strh	r2, [r3, #62]	; 0x3e
   hpcd->Instance->DIEPTXF[i] = 0U;
 8001f2e:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
 for (i = 0U; i < 15U; i++)
 8001f32:	3201      	adds	r2, #1
 8001f34:	2a0f      	cmp	r2, #15
   hpcd->OUT_ep[i].is_in = 0U;
 8001f36:	f883 11f9 	strb.w	r1, [r3, #505]	; 0x1f9
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f3a:	f883 11fb 	strb.w	r1, [r3, #507]	; 0x1fb
   hpcd->OUT_ep[i].maxpacket = 0U;
 8001f3e:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
   hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f42:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
   hpcd->OUT_ep[i].xfer_len = 0U;
 8001f46:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
   hpcd->Instance->DIEPTXF[i] = 0U;
 8001f4a:	6041      	str	r1, [r0, #4]
 8001f4c:	f103 031c 	add.w	r3, r3, #28
 for (i = 0U; i < 15U; i++)
 8001f50:	d1e8      	bne.n	8001f24 <HAL_PCD_Init+0x78>
 }
 
 /* Init Device */
 USB_DevInit(hpcd->Instance, hpcd->Init);
 8001f52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f54:	466d      	mov	r5, sp
 8001f56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f5c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f60:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f64:	4670      	mov	r0, lr
 8001f66:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8001f6a:	f000 ffb3 	bl	8002ed4 <USB_DevInit>
 
 hpcd->State= HAL_PCD_STATE_READY;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	f886 33b9 	strb.w	r3, [r6, #953]	; 0x3b9
 {
   HAL_PCDEx_ActivateBCD(hpcd);
 }
#endif /* USB_OTG_GCCFG_BCDEN */
 
 USB_DevDisconnect (hpcd->Instance);  
 8001f74:	6830      	ldr	r0, [r6, #0]
 8001f76:	f001 fad0 	bl	800351a <USB_DevDisconnect>
 return HAL_OK;
 8001f7a:	2000      	movs	r0, #0
}
 8001f7c:	b00b      	add	sp, #44	; 0x2c
 8001f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8001f80:	2001      	movs	r0, #1
 8001f82:	e7fb      	b.n	8001f7c <HAL_PCD_Init+0xd0>

08001f84 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
  __HAL_LOCK(hpcd); 
 8001f84:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 8001f88:	2b01      	cmp	r3, #1
{ 
 8001f8a:	b510      	push	{r4, lr}
 8001f8c:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8001f8e:	d00c      	beq.n	8001faa <HAL_PCD_Start+0x26>
 8001f90:	2301      	movs	r3, #1
 8001f92:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
  USB_DevConnect (hpcd->Instance);  
 8001f96:	6800      	ldr	r0, [r0, #0]
 8001f98:	f001 fab3 	bl	8003502 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001f9c:	6820      	ldr	r0, [r4, #0]
 8001f9e:	f000 ff76 	bl	8002e8e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd); 
 8001fa2:	2000      	movs	r0, #0
 8001fa4:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 8001fa8:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 8001faa:	2002      	movs	r0, #2
}
 8001fac:	bd10      	pop	{r4, pc}
	...

08001fb0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fb4:	f8d0 9000 	ldr.w	r9, [r0]
{
 8001fb8:	b087      	sub	sp, #28
 8001fba:	4604      	mov	r4, r0
  uint32_t fifoemptymsk = 0U, temp = 0U;
  USB_OTG_EPTypeDef *ep;
  uint32_t hclk = 180000000U;
  
  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001fbc:	4648      	mov	r0, r9
 8001fbe:	f001 fae6 	bl	800358e <USB_GetMode>
 8001fc2:	9002      	str	r0, [sp, #8]
 8001fc4:	2800      	cmp	r0, #0
 8001fc6:	f040 812e 	bne.w	8002226 <HAL_PCD_IRQHandler+0x276>
  {    
    /* avoid spurious interrupt */
    if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd)) 
 8001fca:	6820      	ldr	r0, [r4, #0]
 8001fcc:	f001 fab1 	bl	8003532 <USB_ReadInterrupts>
 8001fd0:	2800      	cmp	r0, #0
 8001fd2:	f000 8128 	beq.w	8002226 <HAL_PCD_IRQHandler+0x276>
    {
      return;
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001fd6:	6820      	ldr	r0, [r4, #0]
 8001fd8:	f001 faab 	bl	8003532 <USB_ReadInterrupts>
 8001fdc:	0785      	lsls	r5, r0, #30
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001fde:	bf48      	it	mi
 8001fe0:	6822      	ldrmi	r2, [r4, #0]
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001fe2:	6820      	ldr	r0, [r4, #0]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001fe4:	bf42      	ittt	mi
 8001fe6:	6953      	ldrmi	r3, [r2, #20]
 8001fe8:	f003 0302 	andmi.w	r3, r3, #2
 8001fec:	6153      	strmi	r3, [r2, #20]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001fee:	f001 faa0 	bl	8003532 <USB_ReadInterrupts>
 8001ff2:	f410 2500 	ands.w	r5, r0, #524288	; 0x80000
 8001ff6:	d00a      	beq.n	800200e <HAL_PCD_IRQHandler+0x5e>
    {
      epnum = 0U;
      
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001ff8:	6820      	ldr	r0, [r4, #0]
 8001ffa:	f001 fa9e 	bl	800353a <USB_ReadDevAllOutEpInterrupt>
 8001ffe:	f509 6630 	add.w	r6, r9, #2816	; 0xb00
 8002002:	4607      	mov	r7, r0
 8002004:	46a2      	mov	sl, r4
      epnum = 0U;
 8002006:	2500      	movs	r5, #0
      
      while ( ep_intr )
 8002008:	2f00      	cmp	r7, #0
 800200a:	f040 810f 	bne.w	800222c <HAL_PCD_IRQHandler+0x27c>
        epnum++;
        ep_intr >>= 1U;
      }
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800200e:	6820      	ldr	r0, [r4, #0]
 8002010:	f001 fa8f 	bl	8003532 <USB_ReadInterrupts>
 8002014:	0341      	lsls	r1, r0, #13
 8002016:	d50b      	bpl.n	8002030 <HAL_PCD_IRQHandler+0x80>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002018:	6820      	ldr	r0, [r4, #0]
 800201a:	f001 fa96 	bl	800354a <USB_ReadDevAllInEpInterrupt>
 800201e:	4626      	mov	r6, r4
 8002020:	9003      	str	r0, [sp, #12]
 8002022:	f509 6810 	add.w	r8, r9, #2304	; 0x900
      
      epnum = 0U;
 8002026:	2500      	movs	r5, #0
      
      while ( ep_intr )
 8002028:	9b03      	ldr	r3, [sp, #12]
 800202a:	2b00      	cmp	r3, #0
 800202c:	f040 813f 	bne.w	80022ae <HAL_PCD_IRQHandler+0x2fe>
        ep_intr >>= 1U;
      }
    }
    
    /* Handle Resume Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002030:	6820      	ldr	r0, [r4, #0]
 8002032:	f001 fa7e 	bl	8003532 <USB_ReadInterrupts>
 8002036:	2800      	cmp	r0, #0
 8002038:	da0d      	bge.n	8002056 <HAL_PCD_IRQHandler+0xa6>
    {    
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800203a:	f8d9 3804 	ldr.w	r3, [r9, #2052]	; 0x804
 800203e:	f023 0301 	bic.w	r3, r3, #1
 8002042:	f8c9 3804 	str.w	r3, [r9, #2052]	; 0x804
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
      }
      else
#endif /* USB_OTG_GLPMCFG_LPMEN */
      {
        HAL_PCD_ResumeCallback(hpcd);
 8002046:	4620      	mov	r0, r4
 8002048:	f002 fb1a 	bl	8004680 <HAL_PCD_ResumeCallback>
      }
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800204c:	6822      	ldr	r2, [r4, #0]
 800204e:	6953      	ldr	r3, [r2, #20]
 8002050:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002054:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Suspend Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002056:	6820      	ldr	r0, [r4, #0]
 8002058:	f001 fa6b 	bl	8003532 <USB_ReadInterrupts>
 800205c:	0506      	lsls	r6, r0, #20
 800205e:	d50b      	bpl.n	8002078 <HAL_PCD_IRQHandler+0xc8>
    {
      if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002060:	f8d9 3808 	ldr.w	r3, [r9, #2056]	; 0x808
 8002064:	07d8      	lsls	r0, r3, #31
 8002066:	d502      	bpl.n	800206e <HAL_PCD_IRQHandler+0xbe>
      {
        
        HAL_PCD_SuspendCallback(hpcd);
 8002068:	4620      	mov	r0, r4
 800206a:	f002 faf1 	bl	8004650 <HAL_PCD_SuspendCallback>
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800206e:	6822      	ldr	r2, [r4, #0]
 8002070:	6953      	ldr	r3, [r2, #20]
 8002072:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002076:	6153      	str	r3, [r2, #20]
      }
    }
#endif /* USB_OTG_GLPMCFG_LPMEN */

    /* Handle Reset Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002078:	6820      	ldr	r0, [r4, #0]
 800207a:	f001 fa5a 	bl	8003532 <USB_ReadInterrupts>
 800207e:	04c1      	lsls	r1, r0, #19
 8002080:	d537      	bpl.n	80020f2 <HAL_PCD_IRQHandler+0x142>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 8002082:	f509 6600 	add.w	r6, r9, #2048	; 0x800
 8002086:	6873      	ldr	r3, [r6, #4]
      USB_FlushTxFifo(hpcd->Instance , 0x10U);
 8002088:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 800208a:	f023 0301 	bic.w	r3, r3, #1
 800208e:	6073      	str	r3, [r6, #4]
      USB_FlushTxFifo(hpcd->Instance , 0x10U);
 8002090:	2110      	movs	r1, #16
 8002092:	f000 ffbb 	bl	800300c <USB_FlushTxFifo>
      
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002096:	6861      	ldr	r1, [r4, #4]
 8002098:	f509 6310 	add.w	r3, r9, #2304	; 0x900
      {
        USBx_INEP(i)->DIEPINT = 0xFFU;
 800209c:	22ff      	movs	r2, #255	; 0xff
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800209e:	9802      	ldr	r0, [sp, #8]
 80020a0:	4288      	cmp	r0, r1
 80020a2:	f040 8192 	bne.w	80023ca <HAL_PCD_IRQHandler+0x41a>
        USBx_OUTEP(i)->DOEPINT = 0xFFU;
      }
      USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 80020a6:	f04f 33ff 	mov.w	r3, #4294967295
 80020aa:	61b3      	str	r3, [r6, #24]
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80020ac:	69f3      	ldr	r3, [r6, #28]
 80020ae:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80020b2:	61f3      	str	r3, [r6, #28]
      
      if(hpcd->Init.use_dedicated_ep1)
 80020b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	f000 818f 	beq.w	80023da <HAL_PCD_IRQHandler+0x42a>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM); 
 80020bc:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 80020c0:	f043 030b 	orr.w	r3, r3, #11
 80020c4:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);  
 80020c8:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80020ca:	f043 030b 	orr.w	r3, r3, #11
 80020ce:	6473      	str	r3, [r6, #68]	; 0x44
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
      }
      
      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80020d0:	f8d9 3800 	ldr.w	r3, [r9, #2048]	; 0x800
      
      /* setup EP0 to receive SETUP packets */
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80020d4:	7c21      	ldrb	r1, [r4, #16]
 80020d6:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80020d8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80020dc:	f8c9 3800 	str.w	r3, [r9, #2048]	; 0x800
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80020e0:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 80020e4:	f001 fa72 	bl	80035cc <USB_EP0_OutStart>
        
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80020e8:	6822      	ldr	r2, [r4, #0]
 80020ea:	6953      	ldr	r3, [r2, #20]
 80020ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020f0:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Enumeration done Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80020f2:	6820      	ldr	r0, [r4, #0]
 80020f4:	f001 fa1d 	bl	8003532 <USB_ReadInterrupts>
 80020f8:	0482      	lsls	r2, r0, #18
 80020fa:	d51d      	bpl.n	8002138 <HAL_PCD_IRQHandler+0x188>
    {
      USB_ActivateSetup(hpcd->Instance);
 80020fc:	6820      	ldr	r0, [r4, #0]
 80020fe:	f001 fa4a 	bl	8003596 <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002102:	6820      	ldr	r0, [r4, #0]
 8002104:	68c3      	ldr	r3, [r0, #12]
 8002106:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 800210a:	60c3      	str	r3, [r0, #12]
      
      if ( USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 800210c:	f000 ffa7 	bl	800305e <USB_GetDevSpeed>
 8002110:	2800      	cmp	r0, #0
 8002112:	f040 816b 	bne.w	80023ec <HAL_PCD_IRQHandler+0x43c>
      {
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;    
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 8002116:	6822      	ldr	r2, [r4, #0]
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
 8002118:	60e0      	str	r0, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;    
 800211a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800211e:	6163      	str	r3, [r4, #20]
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 8002120:	68d3      	ldr	r3, [r2, #12]
 8002122:	f443 5310 	orr.w	r3, r3, #9216	; 0x2400
 8002126:	60d3      	str	r3, [r2, #12]
          /* hclk Clock Range between 32-180 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10U) & USB_OTG_GUSBCFG_TRDT);
        }  
      }
      
      HAL_PCD_ResetCallback(hpcd);
 8002128:	4620      	mov	r0, r4
 800212a:	f002 fa80 	bl	800462e <HAL_PCD_ResetCallback>
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800212e:	6822      	ldr	r2, [r4, #0]
 8002130:	6953      	ldr	r3, [r2, #20]
 8002132:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002136:	6153      	str	r3, [r2, #20]
    }

    /* Handle RxQLevel Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002138:	6820      	ldr	r0, [r4, #0]
 800213a:	f001 f9fa 	bl	8003532 <USB_ReadInterrupts>
 800213e:	06c3      	lsls	r3, r0, #27
 8002140:	d52b      	bpl.n	800219a <HAL_PCD_IRQHandler+0x1ea>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002142:	6822      	ldr	r2, [r4, #0]
 8002144:	6993      	ldr	r3, [r2, #24]
 8002146:	f023 0310 	bic.w	r3, r3, #16
 800214a:	6193      	str	r3, [r2, #24]
      
      temp = USBx->GRXSTSP;
 800214c:	f8d9 6020 	ldr.w	r6, [r9, #32]
      
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
      
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_DATA_UPDT)
 8002150:	f3c6 4343 	ubfx	r3, r6, #17, #4
 8002154:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002156:	f006 080f 	and.w	r8, r6, #15
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_DATA_UPDT)
 800215a:	f040 81a8 	bne.w	80024ae <HAL_PCD_IRQHandler+0x4fe>
      {
        if((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800215e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002162:	421e      	tst	r6, r3
 8002164:	d014      	beq.n	8002190 <HAL_PCD_IRQHandler+0x1e0>
        {
          USB_ReadPacket(USBx, ep->xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4U);
 8002166:	271c      	movs	r7, #28
 8002168:	fb07 4708 	mla	r7, r7, r8, r4
 800216c:	f3c6 160a 	ubfx	r6, r6, #4, #11
 8002170:	4632      	mov	r2, r6
 8002172:	f8d7 1204 	ldr.w	r1, [r7, #516]	; 0x204
 8002176:	4648      	mov	r0, r9
 8002178:	f001 f96d 	bl	8003456 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 800217c:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8002180:	4433      	add	r3, r6
 8002182:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_SETUP_UPDT)
      {
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8002186:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800218a:	441e      	add	r6, r3
 800218c:	f8c7 6210 	str.w	r6, [r7, #528]	; 0x210
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002190:	6822      	ldr	r2, [r4, #0]
 8002192:	6993      	ldr	r3, [r2, #24]
 8002194:	f043 0310 	orr.w	r3, r3, #16
 8002198:	6193      	str	r3, [r2, #24]
    }
    
    /* Handle SOF Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800219a:	6820      	ldr	r0, [r4, #0]
 800219c:	f001 f9c9 	bl	8003532 <USB_ReadInterrupts>
 80021a0:	0707      	lsls	r7, r0, #28
 80021a2:	d507      	bpl.n	80021b4 <HAL_PCD_IRQHandler+0x204>
    {
      HAL_PCD_SOFCallback(hpcd);
 80021a4:	4620      	mov	r0, r4
 80021a6:	f002 fa3e 	bl	8004626 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80021aa:	6822      	ldr	r2, [r4, #0]
 80021ac:	6953      	ldr	r3, [r2, #20]
 80021ae:	f003 0308 	and.w	r3, r3, #8
 80021b2:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Incomplete ISO IN Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80021b4:	6820      	ldr	r0, [r4, #0]
 80021b6:	f001 f9bc 	bl	8003532 <USB_ReadInterrupts>
 80021ba:	02c6      	lsls	r6, r0, #11
 80021bc:	d508      	bpl.n	80021d0 <HAL_PCD_IRQHandler+0x220>
    {
      HAL_PCD_ISOINIncompleteCallback(hpcd, epnum);
 80021be:	b2e9      	uxtb	r1, r5
 80021c0:	4620      	mov	r0, r4
 80021c2:	f002 fa65 	bl	8004690 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80021c6:	6822      	ldr	r2, [r4, #0]
 80021c8:	6953      	ldr	r3, [r2, #20]
 80021ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021ce:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Incomplete ISO OUT Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80021d0:	6820      	ldr	r0, [r4, #0]
 80021d2:	f001 f9ae 	bl	8003532 <USB_ReadInterrupts>
 80021d6:	0280      	lsls	r0, r0, #10
 80021d8:	d508      	bpl.n	80021ec <HAL_PCD_IRQHandler+0x23c>
    {
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, epnum);
 80021da:	b2e9      	uxtb	r1, r5
 80021dc:	4620      	mov	r0, r4
 80021de:	f002 fa53 	bl	8004688 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80021e2:	6822      	ldr	r2, [r4, #0]
 80021e4:	6953      	ldr	r3, [r2, #20]
 80021e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021ea:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Connection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80021ec:	6820      	ldr	r0, [r4, #0]
 80021ee:	f001 f9a0 	bl	8003532 <USB_ReadInterrupts>
 80021f2:	0041      	lsls	r1, r0, #1
 80021f4:	d507      	bpl.n	8002206 <HAL_PCD_IRQHandler+0x256>
    {
      HAL_PCD_ConnectCallback(hpcd);
 80021f6:	4620      	mov	r0, r4
 80021f8:	f002 fa4e 	bl	8004698 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80021fc:	6822      	ldr	r2, [r4, #0]
 80021fe:	6953      	ldr	r3, [r2, #20]
 8002200:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002204:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Disconnection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002206:	6820      	ldr	r0, [r4, #0]
 8002208:	f001 f993 	bl	8003532 <USB_ReadInterrupts>
 800220c:	0742      	lsls	r2, r0, #29
 800220e:	d50a      	bpl.n	8002226 <HAL_PCD_IRQHandler+0x276>
    {
      temp = hpcd->Instance->GOTGINT;
 8002210:	6823      	ldr	r3, [r4, #0]
 8002212:	685d      	ldr	r5, [r3, #4]
      
      if((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002214:	076b      	lsls	r3, r5, #29
 8002216:	d502      	bpl.n	800221e <HAL_PCD_IRQHandler+0x26e>
      {
        HAL_PCD_DisconnectCallback(hpcd);
 8002218:	4620      	mov	r0, r4
 800221a:	f002 fa41 	bl	80046a0 <HAL_PCD_DisconnectCallback>
      }
      hpcd->Instance->GOTGINT |= temp;
 800221e:	6823      	ldr	r3, [r4, #0]
 8002220:	685a      	ldr	r2, [r3, #4]
 8002222:	4315      	orrs	r5, r2
 8002224:	605d      	str	r5, [r3, #4]
    }
  }
}
 8002226:	b007      	add	sp, #28
 8002228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (ep_intr & 0x1U)
 800222c:	07f8      	lsls	r0, r7, #31
 800222e:	d538      	bpl.n	80022a2 <HAL_PCD_IRQHandler+0x2f2>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8002230:	fa5f fb85 	uxtb.w	fp, r5
 8002234:	4659      	mov	r1, fp
 8002236:	6820      	ldr	r0, [r4, #0]
 8002238:	f001 f98f 	bl	800355a <USB_ReadDevOutEPInterrupt>
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800223c:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8002240:	4680      	mov	r8, r0
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002242:	d021      	beq.n	8002288 <HAL_PCD_IRQHandler+0x2d8>
            if(hpcd->Init.dma_enable == 1U)
 8002244:	6921      	ldr	r1, [r4, #16]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002246:	2301      	movs	r3, #1
            if(hpcd->Init.dma_enable == 1U)
 8002248:	4299      	cmp	r1, r3
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800224a:	60b3      	str	r3, [r6, #8]
            if(hpcd->Init.dma_enable == 1U)
 800224c:	d10c      	bne.n	8002268 <HAL_PCD_IRQHandler+0x2b8>
              hpcd->OUT_ep[epnum].xfer_count = hpcd->OUT_ep[epnum].maxpacket- (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ); 
 800224e:	6931      	ldr	r1, [r6, #16]
 8002250:	f8da 0200 	ldr.w	r0, [sl, #512]	; 0x200
 8002254:	f3c1 0112 	ubfx	r1, r1, #0, #19
 8002258:	1a41      	subs	r1, r0, r1
 800225a:	f8ca 1210 	str.w	r1, [sl, #528]	; 0x210
              hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;            
 800225e:	f8da 1204 	ldr.w	r1, [sl, #516]	; 0x204
 8002262:	4408      	add	r0, r1
 8002264:	f8ca 0204 	str.w	r0, [sl, #516]	; 0x204
            HAL_PCD_DataOutStageCallback(hpcd, epnum);
 8002268:	4659      	mov	r1, fp
 800226a:	4620      	mov	r0, r4
 800226c:	f002 f9ca 	bl	8004604 <HAL_PCD_DataOutStageCallback>
            if(hpcd->Init.dma_enable == 1U)
 8002270:	6921      	ldr	r1, [r4, #16]
 8002272:	2901      	cmp	r1, #1
 8002274:	d108      	bne.n	8002288 <HAL_PCD_IRQHandler+0x2d8>
              if((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002276:	b93d      	cbnz	r5, 8002288 <HAL_PCD_IRQHandler+0x2d8>
 8002278:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
 800227c:	b922      	cbnz	r2, 8002288 <HAL_PCD_IRQHandler+0x2d8>
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800227e:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 8002282:	6820      	ldr	r0, [r4, #0]
 8002284:	f001 f9a2 	bl	80035cc <USB_EP0_OutStart>
          if(( epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002288:	f018 0f08 	tst.w	r8, #8
 800228c:	d004      	beq.n	8002298 <HAL_PCD_IRQHandler+0x2e8>
            HAL_PCD_SetupStageCallback(hpcd);
 800228e:	4620      	mov	r0, r4
 8002290:	f002 f9b2 	bl	80045f8 <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002294:	2308      	movs	r3, #8
 8002296:	60b3      	str	r3, [r6, #8]
          if(( epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002298:	f018 0f10 	tst.w	r8, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800229c:	bf1c      	itt	ne
 800229e:	2310      	movne	r3, #16
 80022a0:	60b3      	strne	r3, [r6, #8]
        epnum++;
 80022a2:	3501      	adds	r5, #1
        ep_intr >>= 1U;
 80022a4:	087f      	lsrs	r7, r7, #1
 80022a6:	3620      	adds	r6, #32
 80022a8:	f10a 0a1c 	add.w	sl, sl, #28
 80022ac:	e6ac      	b.n	8002008 <HAL_PCD_IRQHandler+0x58>
        if (ep_intr & 0x1U) /* In ITR */
 80022ae:	9b03      	ldr	r3, [sp, #12]
 80022b0:	07da      	lsls	r2, r3, #31
 80022b2:	d558      	bpl.n	8002366 <HAL_PCD_IRQHandler+0x3b6>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 80022b4:	fa5f fb85 	uxtb.w	fp, r5
 80022b8:	4659      	mov	r1, fp
 80022ba:	6820      	ldr	r0, [r4, #0]
 80022bc:	f001 f957 	bl	800356e <USB_ReadDevInEPInterrupt>
           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80022c0:	07c3      	lsls	r3, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 80022c2:	4607      	mov	r7, r0
           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80022c4:	d520      	bpl.n	8002308 <HAL_PCD_IRQHandler+0x358>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80022c6:	f8d9 3834 	ldr.w	r3, [r9, #2100]	; 0x834
            fifoemptymsk = 0x1U << epnum;
 80022ca:	2101      	movs	r1, #1
 80022cc:	40a9      	lsls	r1, r5
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80022ce:	ea23 0301 	bic.w	r3, r3, r1
 80022d2:	f8c9 3834 	str.w	r3, [r9, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80022d6:	2301      	movs	r3, #1
 80022d8:	f8c8 3008 	str.w	r3, [r8, #8]
            if (hpcd->Init.dma_enable == 1U)
 80022dc:	6923      	ldr	r3, [r4, #16]
 80022de:	2b01      	cmp	r3, #1
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket; 
 80022e0:	bf01      	itttt	eq
 80022e2:	6c73      	ldreq	r3, [r6, #68]	; 0x44
 80022e4:	6c32      	ldreq	r2, [r6, #64]	; 0x40
 80022e6:	189b      	addeq	r3, r3, r2
 80022e8:	6473      	streq	r3, [r6, #68]	; 0x44
            HAL_PCD_DataInStageCallback(hpcd, epnum);
 80022ea:	4659      	mov	r1, fp
 80022ec:	4620      	mov	r0, r4
 80022ee:	f002 f992 	bl	8004616 <HAL_PCD_DataInStageCallback>
            if (hpcd->Init.dma_enable == 1U)
 80022f2:	6921      	ldr	r1, [r4, #16]
 80022f4:	2901      	cmp	r1, #1
 80022f6:	d107      	bne.n	8002308 <HAL_PCD_IRQHandler+0x358>
              if((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80022f8:	b935      	cbnz	r5, 8002308 <HAL_PCD_IRQHandler+0x358>
 80022fa:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80022fc:	b923      	cbnz	r3, 8002308 <HAL_PCD_IRQHandler+0x358>
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80022fe:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 8002302:	6820      	ldr	r0, [r4, #0]
 8002304:	f001 f962 	bl	80035cc <USB_EP0_OutStart>
           if(( epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002308:	0738      	lsls	r0, r7, #28
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800230a:	bf44      	itt	mi
 800230c:	2308      	movmi	r3, #8
 800230e:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if(( epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002312:	06f9      	lsls	r1, r7, #27
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002314:	bf44      	itt	mi
 8002316:	2310      	movmi	r3, #16
 8002318:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if(( epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800231c:	067a      	lsls	r2, r7, #25
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800231e:	bf44      	itt	mi
 8002320:	2340      	movmi	r3, #64	; 0x40
 8002322:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if(( epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002326:	07bb      	lsls	r3, r7, #30
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002328:	bf44      	itt	mi
 800232a:	2302      	movmi	r3, #2
 800232c:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002330:	063f      	lsls	r7, r7, #24
 8002332:	d518      	bpl.n	8002366 <HAL_PCD_IRQHandler+0x3b6>
  * @param  epnum  endpoint number   
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8002334:	6823      	ldr	r3, [r4, #0]
 8002336:	9304      	str	r3, [sp, #16]
  int32_t len = 0U;
  uint32_t len32b;
  uint32_t fifoemptymsk = 0U;

  ep = &hpcd->IN_ep[epnum];
  len = ep->xfer_len - ep->xfer_count;
 8002338:	6cf7      	ldr	r7, [r6, #76]	; 0x4c
 800233a:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800233c:	1aff      	subs	r7, r7, r3
 800233e:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8002340:	429f      	cmp	r7, r3
 8002342:	bf28      	it	cs
 8002344:	461f      	movcs	r7, r3
  }
  
  
  len32b = (len + 3U) / 4U;
 
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8002346:	9b04      	ldr	r3, [sp, #16]
 8002348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 800234c:	f107 0a03 	add.w	sl, r7, #3
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8002350:	eb03 1345 	add.w	r3, r3, r5, lsl #5
  len32b = (len + 3U) / 4U;
 8002354:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8002358:	9305      	str	r3, [sp, #20]
 800235a:	9b05      	ldr	r3, [sp, #20]
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	b29b      	uxth	r3, r3
 8002360:	4553      	cmp	r3, sl
 8002362:	d808      	bhi.n	8002376 <HAL_PCD_IRQHandler+0x3c6>
    
    ep->xfer_buff  += len;
    ep->xfer_count += len;
  }
  
  if(len <= 0U)
 8002364:	b32f      	cbz	r7, 80023b2 <HAL_PCD_IRQHandler+0x402>
        ep_intr >>= 1U;
 8002366:	9b03      	ldr	r3, [sp, #12]
 8002368:	085b      	lsrs	r3, r3, #1
        epnum++;
 800236a:	3501      	adds	r5, #1
        ep_intr >>= 1U;
 800236c:	9303      	str	r3, [sp, #12]
 800236e:	361c      	adds	r6, #28
 8002370:	f108 0820 	add.w	r8, r8, #32
 8002374:	e658      	b.n	8002028 <HAL_PCD_IRQHandler+0x78>
          (ep->xfer_count < ep->xfer_len) &&
 8002376:	6d32      	ldr	r2, [r6, #80]	; 0x50
 8002378:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 800237a:	4293      	cmp	r3, r2
 800237c:	d9f2      	bls.n	8002364 <HAL_PCD_IRQHandler+0x3b4>
          (ep->xfer_count < ep->xfer_len) &&
 800237e:	2b00      	cmp	r3, #0
 8002380:	d0f0      	beq.n	8002364 <HAL_PCD_IRQHandler+0x3b4>
 8002382:	6c37      	ldr	r7, [r6, #64]	; 0x40
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 8002384:	9804      	ldr	r0, [sp, #16]
    len = ep->xfer_len - ep->xfer_count;
 8002386:	1a9b      	subs	r3, r3, r2
 8002388:	429f      	cmp	r7, r3
 800238a:	bf28      	it	cs
 800238c:	461f      	movcs	r7, r3
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 800238e:	7c23      	ldrb	r3, [r4, #16]
 8002390:	9300      	str	r3, [sp, #0]
 8002392:	465a      	mov	r2, fp
 8002394:	b2bb      	uxth	r3, r7
 8002396:	6c71      	ldr	r1, [r6, #68]	; 0x44
 8002398:	f001 f849 	bl	800342e <USB_WritePacket>
    ep->xfer_buff  += len;
 800239c:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800239e:	443b      	add	r3, r7
 80023a0:	6473      	str	r3, [r6, #68]	; 0x44
    ep->xfer_count += len;
 80023a2:	6d33      	ldr	r3, [r6, #80]	; 0x50
    len32b = (len + 3U) / 4U;
 80023a4:	f107 0a03 	add.w	sl, r7, #3
    ep->xfer_count += len;
 80023a8:	443b      	add	r3, r7
    len32b = (len + 3U) / 4U;
 80023aa:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
    ep->xfer_count += len;
 80023ae:	6533      	str	r3, [r6, #80]	; 0x50
 80023b0:	e7d3      	b.n	800235a <HAL_PCD_IRQHandler+0x3aa>
  {
    fifoemptymsk = 0x1U << epnum;
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80023b2:	9b04      	ldr	r3, [sp, #16]
    fifoemptymsk = 0x1U << epnum;
 80023b4:	2201      	movs	r2, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80023b6:	f503 6b00 	add.w	fp, r3, #2048	; 0x800
 80023ba:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
    fifoemptymsk = 0x1U << epnum;
 80023be:	40aa      	lsls	r2, r5
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80023c0:	ea23 0302 	bic.w	r3, r3, r2
 80023c4:	f8cb 3034 	str.w	r3, [fp, #52]	; 0x34
 80023c8:	e7cd      	b.n	8002366 <HAL_PCD_IRQHandler+0x3b6>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023ca:	9802      	ldr	r0, [sp, #8]
        USBx_INEP(i)->DIEPINT = 0xFFU;
 80023cc:	609a      	str	r2, [r3, #8]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023ce:	3001      	adds	r0, #1
        USBx_OUTEP(i)->DOEPINT = 0xFFU;
 80023d0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023d4:	9002      	str	r0, [sp, #8]
 80023d6:	3320      	adds	r3, #32
 80023d8:	e661      	b.n	800209e <HAL_PCD_IRQHandler+0xee>
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 80023da:	6973      	ldr	r3, [r6, #20]
 80023dc:	f043 030b 	orr.w	r3, r3, #11
 80023e0:	6173      	str	r3, [r6, #20]
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 80023e2:	6933      	ldr	r3, [r6, #16]
 80023e4:	f043 030b 	orr.w	r3, r3, #11
 80023e8:	6133      	str	r3, [r6, #16]
 80023ea:	e671      	b.n	80020d0 <HAL_PCD_IRQHandler+0x120>
        hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 80023ec:	2303      	movs	r3, #3
 80023ee:	60e3      	str	r3, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE ;  
 80023f0:	2340      	movs	r3, #64	; 0x40
 80023f2:	6163      	str	r3, [r4, #20]
        hclk = HAL_RCC_GetHCLKFreq();
 80023f4:	f000 fbf8 	bl	8002be8 <HAL_RCC_GetHCLKFreq>
        if((hclk >= 14200000U)&&(hclk < 15000000U))
 80023f8:	4b34      	ldr	r3, [pc, #208]	; (80024cc <HAL_PCD_IRQHandler+0x51c>)
 80023fa:	4a35      	ldr	r2, [pc, #212]	; (80024d0 <HAL_PCD_IRQHandler+0x520>)
 80023fc:	4403      	add	r3, r0
 80023fe:	4293      	cmp	r3, r2
 8002400:	6823      	ldr	r3, [r4, #0]
 8002402:	d804      	bhi.n	800240e <HAL_PCD_IRQHandler+0x45e>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xFU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8002404:	68da      	ldr	r2, [r3, #12]
 8002406:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10U) & USB_OTG_GUSBCFG_TRDT);
 800240a:	60da      	str	r2, [r3, #12]
 800240c:	e68c      	b.n	8002128 <HAL_PCD_IRQHandler+0x178>
        else if((hclk >= 15000000U)&&(hclk < 16000000U))
 800240e:	4a31      	ldr	r2, [pc, #196]	; (80024d4 <HAL_PCD_IRQHandler+0x524>)
 8002410:	4931      	ldr	r1, [pc, #196]	; (80024d8 <HAL_PCD_IRQHandler+0x528>)
 8002412:	4402      	add	r2, r0
 8002414:	428a      	cmp	r2, r1
 8002416:	d803      	bhi.n	8002420 <HAL_PCD_IRQHandler+0x470>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xEU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8002418:	68da      	ldr	r2, [r3, #12]
 800241a:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 800241e:	e7f4      	b.n	800240a <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 16000000U)&&(hclk < 17200000U))
 8002420:	f5a0 0274 	sub.w	r2, r0, #15990784	; 0xf40000
 8002424:	492d      	ldr	r1, [pc, #180]	; (80024dc <HAL_PCD_IRQHandler+0x52c>)
 8002426:	f5a2 5210 	sub.w	r2, r2, #9216	; 0x2400
 800242a:	428a      	cmp	r2, r1
 800242c:	d803      	bhi.n	8002436 <HAL_PCD_IRQHandler+0x486>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xDU << 10U) & USB_OTG_GUSBCFG_TRDT);
 800242e:	68da      	ldr	r2, [r3, #12]
 8002430:	f442 5250 	orr.w	r2, r2, #13312	; 0x3400
 8002434:	e7e9      	b.n	800240a <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 17200000U)&&(hclk < 18500000U))
 8002436:	f1a0 7283 	sub.w	r2, r0, #17170432	; 0x1060000
 800243a:	4929      	ldr	r1, [pc, #164]	; (80024e0 <HAL_PCD_IRQHandler+0x530>)
 800243c:	f5a2 42e7 	sub.w	r2, r2, #29568	; 0x7380
 8002440:	428a      	cmp	r2, r1
 8002442:	d803      	bhi.n	800244c <HAL_PCD_IRQHandler+0x49c>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xCU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8002444:	68da      	ldr	r2, [r3, #12]
 8002446:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 800244a:	e7de      	b.n	800240a <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 18500000U)&&(hclk < 20000000U))
 800244c:	4a25      	ldr	r2, [pc, #148]	; (80024e4 <HAL_PCD_IRQHandler+0x534>)
 800244e:	4926      	ldr	r1, [pc, #152]	; (80024e8 <HAL_PCD_IRQHandler+0x538>)
 8002450:	4402      	add	r2, r0
 8002452:	428a      	cmp	r2, r1
 8002454:	d803      	bhi.n	800245e <HAL_PCD_IRQHandler+0x4ae>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xBU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8002456:	68da      	ldr	r2, [r3, #12]
 8002458:	f442 5230 	orr.w	r2, r2, #11264	; 0x2c00
 800245c:	e7d5      	b.n	800240a <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 20000000U)&&(hclk < 21800000U))
 800245e:	4a23      	ldr	r2, [pc, #140]	; (80024ec <HAL_PCD_IRQHandler+0x53c>)
 8002460:	4923      	ldr	r1, [pc, #140]	; (80024f0 <HAL_PCD_IRQHandler+0x540>)
 8002462:	4402      	add	r2, r0
 8002464:	428a      	cmp	r2, r1
 8002466:	d803      	bhi.n	8002470 <HAL_PCD_IRQHandler+0x4c0>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xAU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8002468:	68da      	ldr	r2, [r3, #12]
 800246a:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 800246e:	e7cc      	b.n	800240a <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 21800000U)&&(hclk < 24000000U))
 8002470:	4a20      	ldr	r2, [pc, #128]	; (80024f4 <HAL_PCD_IRQHandler+0x544>)
 8002472:	4921      	ldr	r1, [pc, #132]	; (80024f8 <HAL_PCD_IRQHandler+0x548>)
 8002474:	4402      	add	r2, r0
 8002476:	428a      	cmp	r2, r1
 8002478:	d803      	bhi.n	8002482 <HAL_PCD_IRQHandler+0x4d2>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x9U << 10U) & USB_OTG_GUSBCFG_TRDT);
 800247a:	68da      	ldr	r2, [r3, #12]
 800247c:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 8002480:	e7c3      	b.n	800240a <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 24000000U)&&(hclk < 27700000U))
 8002482:	f1a0 72b7 	sub.w	r2, r0, #23986176	; 0x16e0000
 8002486:	491d      	ldr	r1, [pc, #116]	; (80024fc <HAL_PCD_IRQHandler+0x54c>)
 8002488:	f5a2 5258 	sub.w	r2, r2, #13824	; 0x3600
 800248c:	428a      	cmp	r2, r1
 800248e:	d803      	bhi.n	8002498 <HAL_PCD_IRQHandler+0x4e8>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x8U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8002490:	68da      	ldr	r2, [r3, #12]
 8002492:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002496:	e7b8      	b.n	800240a <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 27700000U)&&(hclk < 32000000U))
 8002498:	4a19      	ldr	r2, [pc, #100]	; (8002500 <HAL_PCD_IRQHandler+0x550>)
 800249a:	491a      	ldr	r1, [pc, #104]	; (8002504 <HAL_PCD_IRQHandler+0x554>)
 800249c:	4402      	add	r2, r0
 800249e:	428a      	cmp	r2, r1
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x7U << 10U) & USB_OTG_GUSBCFG_TRDT);
 80024a0:	68da      	ldr	r2, [r3, #12]
 80024a2:	bf94      	ite	ls
 80024a4:	f442 52e0 	orrls.w	r2, r2, #7168	; 0x1c00
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10U) & USB_OTG_GUSBCFG_TRDT);
 80024a8:	f442 52c0 	orrhi.w	r2, r2, #6144	; 0x1800
 80024ac:	e7ad      	b.n	800240a <HAL_PCD_IRQHandler+0x45a>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_SETUP_UPDT)
 80024ae:	2b06      	cmp	r3, #6
 80024b0:	f47f ae6e 	bne.w	8002190 <HAL_PCD_IRQHandler+0x1e0>
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80024b4:	2208      	movs	r2, #8
 80024b6:	f504 716f 	add.w	r1, r4, #956	; 0x3bc
 80024ba:	4648      	mov	r0, r9
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 80024bc:	271c      	movs	r7, #28
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80024be:	f000 ffca 	bl	8003456 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 80024c2:	fb07 4708 	mla	r7, r7, r8, r4
 80024c6:	f3c6 160a 	ubfx	r6, r6, #4, #11
 80024ca:	e65c      	b.n	8002186 <HAL_PCD_IRQHandler+0x1d6>
 80024cc:	ff275340 	.word	0xff275340
 80024d0:	000c34ff 	.word	0x000c34ff
 80024d4:	ff1b1e40 	.word	0xff1b1e40
 80024d8:	000f423f 	.word	0x000f423f
 80024dc:	00124f7f 	.word	0x00124f7f
 80024e0:	0013d61f 	.word	0x0013d61f
 80024e4:	fee5b660 	.word	0xfee5b660
 80024e8:	0016e35f 	.word	0x0016e35f
 80024ec:	feced300 	.word	0xfeced300
 80024f0:	001b773f 	.word	0x001b773f
 80024f4:	feb35bc0 	.word	0xfeb35bc0
 80024f8:	002191bf 	.word	0x002191bf
 80024fc:	0038751f 	.word	0x0038751f
 8002500:	fe5954e0 	.word	0xfe5954e0
 8002504:	00419cdf 	.word	0x00419cdf

08002508 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd); 
 8002508:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 800250c:	2b01      	cmp	r3, #1
{
 800250e:	b510      	push	{r4, lr}
 8002510:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8002512:	d009      	beq.n	8002528 <HAL_PCD_SetAddress+0x20>
 8002514:	2301      	movs	r3, #1
 8002516:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
  USB_SetDevAddress(hpcd->Instance, address);
 800251a:	6800      	ldr	r0, [r0, #0]
 800251c:	f000 ffe1 	bl	80034e2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);   
 8002520:	2000      	movs	r0, #0
 8002522:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 8002526:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 8002528:	2002      	movs	r0, #2
}
 800252a:	bd10      	pop	{r4, pc}

0800252c <HAL_PCD_EP_Open>:
{
 800252c:	b570      	push	{r4, r5, r6, lr}
  if ((ep_addr & 0x80) == 0x80)
 800252e:	b24e      	sxtb	r6, r1
 8002530:	2e00      	cmp	r6, #0
{
 8002532:	4604      	mov	r4, r0
 8002534:	f04f 051c 	mov.w	r5, #28
 8002538:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800253c:	bfb5      	itete	lt
 800253e:	fb05 4100 	mlalt	r1, r5, r0, r4
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8002542:	fb05 4101 	mlage	r1, r5, r1, r4
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8002546:	3138      	addlt	r1, #56	; 0x38
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8002548:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  ep->num   = ep_addr & 0x7F;
 800254c:	b2c0      	uxtb	r0, r0
  if (ep->is_in)
 800254e:	2e00      	cmp	r6, #0
    ep->tx_fifo_num = ep->num;
 8002550:	bfb8      	it	lt
 8002552:	80c8      	strhlt	r0, [r1, #6]
  if (ep_type == EP_TYPE_BULK )
 8002554:	2b02      	cmp	r3, #2
  ep->type = ep_type;
 8002556:	70cb      	strb	r3, [r1, #3]
  ep->is_in = (0x80 & ep_addr) != 0;
 8002558:	ea4f 75d6 	mov.w	r5, r6, lsr #31
    ep->data_pid_start = 0U;
 800255c:	bf04      	itt	eq
 800255e:	2300      	moveq	r3, #0
 8002560:	710b      	strbeq	r3, [r1, #4]
  ep->num   = ep_addr & 0x7F;
 8002562:	7008      	strb	r0, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 8002564:	704d      	strb	r5, [r1, #1]
  __HAL_LOCK(hpcd); 
 8002566:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
  ep->maxpacket = ep_mps;
 800256a:	608a      	str	r2, [r1, #8]
  __HAL_LOCK(hpcd); 
 800256c:	2b01      	cmp	r3, #1
 800256e:	d009      	beq.n	8002584 <HAL_PCD_EP_Open+0x58>
 8002570:	2301      	movs	r3, #1
 8002572:	f884 33b8 	strb.w	r3, [r4, #952]	; 0x3b8
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8002576:	6820      	ldr	r0, [r4, #0]
 8002578:	f000 fd8c 	bl	8003094 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 800257c:	2000      	movs	r0, #0
 800257e:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return ret;
 8002582:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd); 
 8002584:	2002      	movs	r0, #2
}
 8002586:	bd70      	pop	{r4, r5, r6, pc}

08002588 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80) == 0x80)
 8002588:	b24b      	sxtb	r3, r1
 800258a:	2b00      	cmp	r3, #0
{  
 800258c:	b510      	push	{r4, lr}
 800258e:	f04f 021c 	mov.w	r2, #28
 8002592:	4604      	mov	r4, r0
 8002594:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8002598:	bfb5      	itete	lt
 800259a:	fb02 4100 	mlalt	r1, r2, r0, r4
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 800259e:	fb02 4101 	mlage	r1, r2, r1, r4
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80025a2:	3138      	addlt	r1, #56	; 0x38
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80025a4:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  ep->is_in = (0x80 & ep_addr) != 0;
 80025a8:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7F;
 80025aa:	7008      	strb	r0, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 80025ac:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 80025ae:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d009      	beq.n	80025ca <HAL_PCD_EP_Close+0x42>
 80025b6:	2301      	movs	r3, #1
 80025b8:	f884 33b8 	strb.w	r3, [r4, #952]	; 0x3b8
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 80025bc:	6820      	ldr	r0, [r4, #0]
 80025be:	f000 fda8 	bl	8003112 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 80025c2:	2000      	movs	r0, #0
 80025c4:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 80025c8:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 80025ca:	2002      	movs	r0, #2
}
 80025cc:	bd10      	pop	{r4, pc}

080025ce <HAL_PCD_EP_Receive>:
{
 80025ce:	b538      	push	{r3, r4, r5, lr}
 80025d0:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80025d4:	241c      	movs	r4, #28
 80025d6:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;  
 80025da:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80025de:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
  ep->xfer_len = len;
 80025e2:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
  ep->xfer_count = 0U;
 80025e6:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;  
 80025e8:	f8c4 2204 	str.w	r2, [r4, #516]	; 0x204
  ep->xfer_count = 0U;
 80025ec:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->is_in = 0U;
 80025f0:	f884 31f9 	strb.w	r3, [r4, #505]	; 0x1f9
  ep->num = ep_addr & 0x7F;
 80025f4:	f884 51f8 	strb.w	r5, [r4, #504]	; 0x1f8
  if (hpcd->Init.dma_enable == 1U)
 80025f8:	6903      	ldr	r3, [r0, #16]
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 80025fa:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 80025fc:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;  
 80025fe:	bf08      	it	eq
 8002600:	f8c4 2208 	streq.w	r2, [r4, #520]	; 0x208
 8002604:	b2da      	uxtb	r2, r3
  if ((ep_addr & 0x7F) == 0)
 8002606:	b91d      	cbnz	r5, 8002610 <HAL_PCD_EP_Receive+0x42>
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8002608:	f000 fea4 	bl	8003354 <USB_EP0StartXfer>
}
 800260c:	2000      	movs	r0, #0
 800260e:	bd38      	pop	{r3, r4, r5, pc}
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8002610:	f000 fdda 	bl	80031c8 <USB_EPStartXfer>
 8002614:	e7fa      	b.n	800260c <HAL_PCD_EP_Receive+0x3e>

08002616 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 8002616:	231c      	movs	r3, #28
 8002618:	f001 010f 	and.w	r1, r1, #15
 800261c:	fb03 0101 	mla	r1, r3, r1, r0
}
 8002620:	f8b1 0210 	ldrh.w	r0, [r1, #528]	; 0x210
 8002624:	4770      	bx	lr

08002626 <HAL_PCD_EP_Transmit>:
{
 8002626:	b538      	push	{r3, r4, r5, lr}
 8002628:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800262c:	241c      	movs	r4, #28
 800262e:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;  
 8002632:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8002636:	3138      	adds	r1, #56	; 0x38
  ep->xfer_len = len;
 8002638:	64e3      	str	r3, [r4, #76]	; 0x4c
  ep->xfer_count = 0U;
 800263a:	2300      	movs	r3, #0
 800263c:	6523      	str	r3, [r4, #80]	; 0x50
  ep->is_in = 1U;
 800263e:	2301      	movs	r3, #1
  ep->xfer_buff = pBuf;  
 8002640:	6462      	str	r2, [r4, #68]	; 0x44
  ep->is_in = 1U;
 8002642:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  ep->num = ep_addr & 0x7F;
 8002646:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
  if (hpcd->Init.dma_enable == 1U)
 800264a:	6903      	ldr	r3, [r0, #16]
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 800264c:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 800264e:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;  
 8002650:	bf08      	it	eq
 8002652:	64a2      	streq	r2, [r4, #72]	; 0x48
 8002654:	b2da      	uxtb	r2, r3
  if ((ep_addr & 0x7F) == 0)
 8002656:	b91d      	cbnz	r5, 8002660 <HAL_PCD_EP_Transmit+0x3a>
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8002658:	f000 fe7c 	bl	8003354 <USB_EP0StartXfer>
}
 800265c:	2000      	movs	r0, #0
 800265e:	bd38      	pop	{r3, r4, r5, pc}
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8002660:	f000 fdb2 	bl	80031c8 <USB_EPStartXfer>
 8002664:	e7fa      	b.n	800265c <HAL_PCD_EP_Transmit+0x36>

08002666 <HAL_PCD_EP_SetStall>:
{
 8002666:	b538      	push	{r3, r4, r5, lr}
  if ((0x80 & ep_addr) == 0x80)
 8002668:	b24b      	sxtb	r3, r1
 800266a:	2b00      	cmp	r3, #0
 800266c:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8002670:	f04f 021c 	mov.w	r2, #28
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8002674:	bfb5      	itete	lt
 8002676:	fb02 0105 	mlalt	r1, r2, r5, r0
    ep = &hpcd->OUT_ep[ep_addr];
 800267a:	fb02 0101 	mlage	r1, r2, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800267e:	3138      	addlt	r1, #56	; 0x38
    ep = &hpcd->OUT_ep[ep_addr];
 8002680:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  ep->is_stall = 1U;
 8002684:	2201      	movs	r2, #1
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8002686:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7F;
 8002688:	b2ed      	uxtb	r5, r5
  ep->is_stall = 1U;
 800268a:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 800268c:	700d      	strb	r5, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 800268e:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 8002690:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 8002694:	4293      	cmp	r3, r2
{
 8002696:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8002698:	d00f      	beq.n	80026ba <HAL_PCD_EP_SetStall+0x54>
 800269a:	f880 23b8 	strb.w	r2, [r0, #952]	; 0x3b8
  USB_EPSetStall(hpcd->Instance , ep);
 800269e:	6800      	ldr	r0, [r0, #0]
 80026a0:	f000 fee7 	bl	8003472 <USB_EPSetStall>
  if((ep_addr & 0x7F) == 0)
 80026a4:	b92d      	cbnz	r5, 80026b2 <HAL_PCD_EP_SetStall+0x4c>
    USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80026a6:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 80026aa:	7c21      	ldrb	r1, [r4, #16]
 80026ac:	6820      	ldr	r0, [r4, #0]
 80026ae:	f000 ff8d 	bl	80035cc <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd); 
 80026b2:	2000      	movs	r0, #0
 80026b4:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 80026b8:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 80026ba:	2002      	movs	r0, #2
}
 80026bc:	bd38      	pop	{r3, r4, r5, pc}

080026be <HAL_PCD_EP_ClrStall>:
{
 80026be:	b538      	push	{r3, r4, r5, lr}
  if ((0x80 & ep_addr) == 0x80)
 80026c0:	b24b      	sxtb	r3, r1
 80026c2:	2b00      	cmp	r3, #0
{
 80026c4:	4605      	mov	r5, r0
 80026c6:	f04f 021c 	mov.w	r2, #28
 80026ca:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80026ce:	bfb5      	itete	lt
 80026d0:	fb02 5100 	mlalt	r1, r2, r0, r5
    ep = &hpcd->OUT_ep[ep_addr];
 80026d4:	fb02 5101 	mlage	r1, r2, r1, r5
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80026d8:	3138      	addlt	r1, #56	; 0x38
    ep = &hpcd->OUT_ep[ep_addr];
 80026da:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 80026de:	0fdb      	lsrs	r3, r3, #31
  ep->is_stall = 0U;
 80026e0:	2400      	movs	r4, #0
 80026e2:	708c      	strb	r4, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 80026e4:	7008      	strb	r0, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 80026e6:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 80026e8:	f895 33b8 	ldrb.w	r3, [r5, #952]	; 0x3b8
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d009      	beq.n	8002704 <HAL_PCD_EP_ClrStall+0x46>
 80026f0:	2301      	movs	r3, #1
 80026f2:	f885 33b8 	strb.w	r3, [r5, #952]	; 0x3b8
  USB_EPClearStall(hpcd->Instance , ep);
 80026f6:	6828      	ldr	r0, [r5, #0]
 80026f8:	f000 feda 	bl	80034b0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 80026fc:	f885 43b8 	strb.w	r4, [r5, #952]	; 0x3b8
  return HAL_OK;
 8002700:	4620      	mov	r0, r4
 8002702:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 8002704:	2002      	movs	r0, #2
}
 8002706:	bd38      	pop	{r3, r4, r5, pc}

08002708 <HAL_PCDEx_SetTxFiFo>:
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top 
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */
  
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002708:	6800      	ldr	r0, [r0, #0]
{
 800270a:	b570      	push	{r4, r5, r6, lr}
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800270c:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  if(fifo == 0)
 800270e:	b921      	cbnz	r1, 800271a <HAL_PCDEx_SetTxFiFo+0x12>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);
 8002710:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002714:	6283      	str	r3, [r0, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1] = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);        
  }
  
  return HAL_OK;
}
 8002716:	2000      	movs	r0, #0
 8002718:	bd70      	pop	{r4, r5, r6, pc}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16U;
 800271a:	6a84      	ldr	r4, [r0, #40]	; 0x28
    for (i = 0; i < (fifo - 1); i++)
 800271c:	2500      	movs	r5, #0
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16U;
 800271e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0; i < (fifo - 1); i++)
 8002722:	1e4e      	subs	r6, r1, #1
 8002724:	b2ec      	uxtb	r4, r5
 8002726:	42b4      	cmp	r4, r6
 8002728:	f105 0501 	add.w	r5, r5, #1
 800272c:	db06      	blt.n	800273c <HAL_PCDEx_SetTxFiFo+0x34>
    hpcd->Instance->DIEPTXF[fifo - 1] = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);        
 800272e:	313f      	adds	r1, #63	; 0x3f
 8002730:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8002734:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002738:	6043      	str	r3, [r0, #4]
 800273a:	e7ec      	b.n	8002716 <HAL_PCDEx_SetTxFiFo+0xe>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16U);
 800273c:	3440      	adds	r4, #64	; 0x40
 800273e:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8002742:	6864      	ldr	r4, [r4, #4]
 8002744:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8002748:	e7ec      	b.n	8002724 <HAL_PCDEx_SetTxFiFo+0x1c>

0800274a <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 800274a:	6803      	ldr	r3, [r0, #0]
  
  return HAL_OK;
}
 800274c:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 800274e:	6259      	str	r1, [r3, #36]	; 0x24
}
 8002750:	4770      	bx	lr
	...

08002754 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002754:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002758:	4604      	mov	r4, r0
 800275a:	b918      	cbnz	r0, 8002764 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 800275c:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 800275e:	b002      	add	sp, #8
 8002760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002764:	6803      	ldr	r3, [r0, #0]
 8002766:	07dd      	lsls	r5, r3, #31
 8002768:	d410      	bmi.n	800278c <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800276a:	6823      	ldr	r3, [r4, #0]
 800276c:	0798      	lsls	r0, r3, #30
 800276e:	d458      	bmi.n	8002822 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002770:	6823      	ldr	r3, [r4, #0]
 8002772:	071a      	lsls	r2, r3, #28
 8002774:	f100 809a 	bmi.w	80028ac <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002778:	6823      	ldr	r3, [r4, #0]
 800277a:	075b      	lsls	r3, r3, #29
 800277c:	f100 80b8 	bmi.w	80028f0 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002780:	69a2      	ldr	r2, [r4, #24]
 8002782:	2a00      	cmp	r2, #0
 8002784:	f040 8119 	bne.w	80029ba <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8002788:	2000      	movs	r0, #0
 800278a:	e7e8      	b.n	800275e <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800278c:	4ba6      	ldr	r3, [pc, #664]	; (8002a28 <HAL_RCC_OscConfig+0x2d4>)
 800278e:	689a      	ldr	r2, [r3, #8]
 8002790:	f002 020c 	and.w	r2, r2, #12
 8002794:	2a04      	cmp	r2, #4
 8002796:	d007      	beq.n	80027a8 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002798:	689a      	ldr	r2, [r3, #8]
 800279a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800279e:	2a08      	cmp	r2, #8
 80027a0:	d10a      	bne.n	80027b8 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	0259      	lsls	r1, r3, #9
 80027a6:	d507      	bpl.n	80027b8 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027a8:	4b9f      	ldr	r3, [pc, #636]	; (8002a28 <HAL_RCC_OscConfig+0x2d4>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	039a      	lsls	r2, r3, #14
 80027ae:	d5dc      	bpl.n	800276a <HAL_RCC_OscConfig+0x16>
 80027b0:	6863      	ldr	r3, [r4, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1d9      	bne.n	800276a <HAL_RCC_OscConfig+0x16>
 80027b6:	e7d1      	b.n	800275c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027b8:	6863      	ldr	r3, [r4, #4]
 80027ba:	4d9b      	ldr	r5, [pc, #620]	; (8002a28 <HAL_RCC_OscConfig+0x2d4>)
 80027bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027c0:	d111      	bne.n	80027e6 <HAL_RCC_OscConfig+0x92>
 80027c2:	682b      	ldr	r3, [r5, #0]
 80027c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027c8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80027ca:	f7fe fc0b 	bl	8000fe4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ce:	4d96      	ldr	r5, [pc, #600]	; (8002a28 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80027d0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027d2:	682b      	ldr	r3, [r5, #0]
 80027d4:	039b      	lsls	r3, r3, #14
 80027d6:	d4c8      	bmi.n	800276a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027d8:	f7fe fc04 	bl	8000fe4 <HAL_GetTick>
 80027dc:	1b80      	subs	r0, r0, r6
 80027de:	2864      	cmp	r0, #100	; 0x64
 80027e0:	d9f7      	bls.n	80027d2 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 80027e2:	2003      	movs	r0, #3
 80027e4:	e7bb      	b.n	800275e <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027ea:	d104      	bne.n	80027f6 <HAL_RCC_OscConfig+0xa2>
 80027ec:	682b      	ldr	r3, [r5, #0]
 80027ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027f2:	602b      	str	r3, [r5, #0]
 80027f4:	e7e5      	b.n	80027c2 <HAL_RCC_OscConfig+0x6e>
 80027f6:	682a      	ldr	r2, [r5, #0]
 80027f8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80027fc:	602a      	str	r2, [r5, #0]
 80027fe:	682a      	ldr	r2, [r5, #0]
 8002800:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002804:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1df      	bne.n	80027ca <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 800280a:	f7fe fbeb 	bl	8000fe4 <HAL_GetTick>
 800280e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002810:	682b      	ldr	r3, [r5, #0]
 8002812:	039f      	lsls	r7, r3, #14
 8002814:	d5a9      	bpl.n	800276a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002816:	f7fe fbe5 	bl	8000fe4 <HAL_GetTick>
 800281a:	1b80      	subs	r0, r0, r6
 800281c:	2864      	cmp	r0, #100	; 0x64
 800281e:	d9f7      	bls.n	8002810 <HAL_RCC_OscConfig+0xbc>
 8002820:	e7df      	b.n	80027e2 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002822:	4b81      	ldr	r3, [pc, #516]	; (8002a28 <HAL_RCC_OscConfig+0x2d4>)
 8002824:	689a      	ldr	r2, [r3, #8]
 8002826:	f012 0f0c 	tst.w	r2, #12
 800282a:	d007      	beq.n	800283c <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800282c:	689a      	ldr	r2, [r3, #8]
 800282e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002832:	2a08      	cmp	r2, #8
 8002834:	d111      	bne.n	800285a <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	025e      	lsls	r6, r3, #9
 800283a:	d40e      	bmi.n	800285a <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800283c:	4b7a      	ldr	r3, [pc, #488]	; (8002a28 <HAL_RCC_OscConfig+0x2d4>)
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	0795      	lsls	r5, r2, #30
 8002842:	d502      	bpl.n	800284a <HAL_RCC_OscConfig+0xf6>
 8002844:	68e2      	ldr	r2, [r4, #12]
 8002846:	2a01      	cmp	r2, #1
 8002848:	d188      	bne.n	800275c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	6921      	ldr	r1, [r4, #16]
 800284e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002852:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8002856:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002858:	e78a      	b.n	8002770 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800285a:	68e2      	ldr	r2, [r4, #12]
 800285c:	4b73      	ldr	r3, [pc, #460]	; (8002a2c <HAL_RCC_OscConfig+0x2d8>)
 800285e:	b1b2      	cbz	r2, 800288e <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8002860:	2201      	movs	r2, #1
 8002862:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002864:	f7fe fbbe 	bl	8000fe4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002868:	4d6f      	ldr	r5, [pc, #444]	; (8002a28 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800286a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800286c:	682b      	ldr	r3, [r5, #0]
 800286e:	0798      	lsls	r0, r3, #30
 8002870:	d507      	bpl.n	8002882 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002872:	682b      	ldr	r3, [r5, #0]
 8002874:	6922      	ldr	r2, [r4, #16]
 8002876:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800287a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800287e:	602b      	str	r3, [r5, #0]
 8002880:	e776      	b.n	8002770 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002882:	f7fe fbaf 	bl	8000fe4 <HAL_GetTick>
 8002886:	1b80      	subs	r0, r0, r6
 8002888:	2802      	cmp	r0, #2
 800288a:	d9ef      	bls.n	800286c <HAL_RCC_OscConfig+0x118>
 800288c:	e7a9      	b.n	80027e2 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 800288e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002890:	f7fe fba8 	bl	8000fe4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002894:	4d64      	ldr	r5, [pc, #400]	; (8002a28 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8002896:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002898:	682b      	ldr	r3, [r5, #0]
 800289a:	0799      	lsls	r1, r3, #30
 800289c:	f57f af68 	bpl.w	8002770 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028a0:	f7fe fba0 	bl	8000fe4 <HAL_GetTick>
 80028a4:	1b80      	subs	r0, r0, r6
 80028a6:	2802      	cmp	r0, #2
 80028a8:	d9f6      	bls.n	8002898 <HAL_RCC_OscConfig+0x144>
 80028aa:	e79a      	b.n	80027e2 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028ac:	6962      	ldr	r2, [r4, #20]
 80028ae:	4b60      	ldr	r3, [pc, #384]	; (8002a30 <HAL_RCC_OscConfig+0x2dc>)
 80028b0:	b17a      	cbz	r2, 80028d2 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 80028b2:	2201      	movs	r2, #1
 80028b4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80028b6:	f7fe fb95 	bl	8000fe4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ba:	4d5b      	ldr	r5, [pc, #364]	; (8002a28 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80028bc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028be:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80028c0:	079f      	lsls	r7, r3, #30
 80028c2:	f53f af59 	bmi.w	8002778 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028c6:	f7fe fb8d 	bl	8000fe4 <HAL_GetTick>
 80028ca:	1b80      	subs	r0, r0, r6
 80028cc:	2802      	cmp	r0, #2
 80028ce:	d9f6      	bls.n	80028be <HAL_RCC_OscConfig+0x16a>
 80028d0:	e787      	b.n	80027e2 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 80028d2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80028d4:	f7fe fb86 	bl	8000fe4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028d8:	4d53      	ldr	r5, [pc, #332]	; (8002a28 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80028da:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028dc:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80028de:	0798      	lsls	r0, r3, #30
 80028e0:	f57f af4a 	bpl.w	8002778 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028e4:	f7fe fb7e 	bl	8000fe4 <HAL_GetTick>
 80028e8:	1b80      	subs	r0, r0, r6
 80028ea:	2802      	cmp	r0, #2
 80028ec:	d9f6      	bls.n	80028dc <HAL_RCC_OscConfig+0x188>
 80028ee:	e778      	b.n	80027e2 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028f0:	4b4d      	ldr	r3, [pc, #308]	; (8002a28 <HAL_RCC_OscConfig+0x2d4>)
 80028f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028f4:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80028f8:	d128      	bne.n	800294c <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 80028fa:	9201      	str	r2, [sp, #4]
 80028fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028fe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002902:	641a      	str	r2, [r3, #64]	; 0x40
 8002904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800290a:	9301      	str	r3, [sp, #4]
 800290c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800290e:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002910:	4d48      	ldr	r5, [pc, #288]	; (8002a34 <HAL_RCC_OscConfig+0x2e0>)
 8002912:	682b      	ldr	r3, [r5, #0]
 8002914:	05d9      	lsls	r1, r3, #23
 8002916:	d51b      	bpl.n	8002950 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002918:	68a3      	ldr	r3, [r4, #8]
 800291a:	4d43      	ldr	r5, [pc, #268]	; (8002a28 <HAL_RCC_OscConfig+0x2d4>)
 800291c:	2b01      	cmp	r3, #1
 800291e:	d127      	bne.n	8002970 <HAL_RCC_OscConfig+0x21c>
 8002920:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002922:	f043 0301 	orr.w	r3, r3, #1
 8002926:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002928:	f7fe fb5c 	bl	8000fe4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800292c:	4d3e      	ldr	r5, [pc, #248]	; (8002a28 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800292e:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002930:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002934:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002936:	079b      	lsls	r3, r3, #30
 8002938:	d539      	bpl.n	80029ae <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 800293a:	2e00      	cmp	r6, #0
 800293c:	f43f af20 	beq.w	8002780 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002940:	4a39      	ldr	r2, [pc, #228]	; (8002a28 <HAL_RCC_OscConfig+0x2d4>)
 8002942:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002944:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002948:	6413      	str	r3, [r2, #64]	; 0x40
 800294a:	e719      	b.n	8002780 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 800294c:	2600      	movs	r6, #0
 800294e:	e7df      	b.n	8002910 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002950:	682b      	ldr	r3, [r5, #0]
 8002952:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002956:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002958:	f7fe fb44 	bl	8000fe4 <HAL_GetTick>
 800295c:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800295e:	682b      	ldr	r3, [r5, #0]
 8002960:	05da      	lsls	r2, r3, #23
 8002962:	d4d9      	bmi.n	8002918 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002964:	f7fe fb3e 	bl	8000fe4 <HAL_GetTick>
 8002968:	1bc0      	subs	r0, r0, r7
 800296a:	2802      	cmp	r0, #2
 800296c:	d9f7      	bls.n	800295e <HAL_RCC_OscConfig+0x20a>
 800296e:	e738      	b.n	80027e2 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002970:	2b05      	cmp	r3, #5
 8002972:	d104      	bne.n	800297e <HAL_RCC_OscConfig+0x22a>
 8002974:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002976:	f043 0304 	orr.w	r3, r3, #4
 800297a:	672b      	str	r3, [r5, #112]	; 0x70
 800297c:	e7d0      	b.n	8002920 <HAL_RCC_OscConfig+0x1cc>
 800297e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002980:	f022 0201 	bic.w	r2, r2, #1
 8002984:	672a      	str	r2, [r5, #112]	; 0x70
 8002986:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002988:	f022 0204 	bic.w	r2, r2, #4
 800298c:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1ca      	bne.n	8002928 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8002992:	f7fe fb27 	bl	8000fe4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002996:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800299a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800299c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800299e:	0798      	lsls	r0, r3, #30
 80029a0:	d5cb      	bpl.n	800293a <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029a2:	f7fe fb1f 	bl	8000fe4 <HAL_GetTick>
 80029a6:	1bc0      	subs	r0, r0, r7
 80029a8:	4540      	cmp	r0, r8
 80029aa:	d9f7      	bls.n	800299c <HAL_RCC_OscConfig+0x248>
 80029ac:	e719      	b.n	80027e2 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029ae:	f7fe fb19 	bl	8000fe4 <HAL_GetTick>
 80029b2:	1bc0      	subs	r0, r0, r7
 80029b4:	4540      	cmp	r0, r8
 80029b6:	d9bd      	bls.n	8002934 <HAL_RCC_OscConfig+0x1e0>
 80029b8:	e713      	b.n	80027e2 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029ba:	4d1b      	ldr	r5, [pc, #108]	; (8002a28 <HAL_RCC_OscConfig+0x2d4>)
 80029bc:	68ab      	ldr	r3, [r5, #8]
 80029be:	f003 030c 	and.w	r3, r3, #12
 80029c2:	2b08      	cmp	r3, #8
 80029c4:	f43f aeca 	beq.w	800275c <HAL_RCC_OscConfig+0x8>
 80029c8:	4e1b      	ldr	r6, [pc, #108]	; (8002a38 <HAL_RCC_OscConfig+0x2e4>)
 80029ca:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029cc:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80029ce:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029d0:	d134      	bne.n	8002a3c <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 80029d2:	f7fe fb07 	bl	8000fe4 <HAL_GetTick>
 80029d6:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029d8:	682b      	ldr	r3, [r5, #0]
 80029da:	0199      	lsls	r1, r3, #6
 80029dc:	d41e      	bmi.n	8002a1c <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029de:	6a22      	ldr	r2, [r4, #32]
 80029e0:	69e3      	ldr	r3, [r4, #28]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80029e6:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80029ea:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80029ec:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80029f0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029f2:	4c0d      	ldr	r4, [pc, #52]	; (8002a28 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029f4:	0852      	lsrs	r2, r2, #1
 80029f6:	3a01      	subs	r2, #1
 80029f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80029fc:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80029fe:	2301      	movs	r3, #1
 8002a00:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002a02:	f7fe faef 	bl	8000fe4 <HAL_GetTick>
 8002a06:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a08:	6823      	ldr	r3, [r4, #0]
 8002a0a:	019a      	lsls	r2, r3, #6
 8002a0c:	f53f aebc 	bmi.w	8002788 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a10:	f7fe fae8 	bl	8000fe4 <HAL_GetTick>
 8002a14:	1b40      	subs	r0, r0, r5
 8002a16:	2802      	cmp	r0, #2
 8002a18:	d9f6      	bls.n	8002a08 <HAL_RCC_OscConfig+0x2b4>
 8002a1a:	e6e2      	b.n	80027e2 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a1c:	f7fe fae2 	bl	8000fe4 <HAL_GetTick>
 8002a20:	1bc0      	subs	r0, r0, r7
 8002a22:	2802      	cmp	r0, #2
 8002a24:	d9d8      	bls.n	80029d8 <HAL_RCC_OscConfig+0x284>
 8002a26:	e6dc      	b.n	80027e2 <HAL_RCC_OscConfig+0x8e>
 8002a28:	40023800 	.word	0x40023800
 8002a2c:	42470000 	.word	0x42470000
 8002a30:	42470e80 	.word	0x42470e80
 8002a34:	40007000 	.word	0x40007000
 8002a38:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8002a3c:	f7fe fad2 	bl	8000fe4 <HAL_GetTick>
 8002a40:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a42:	682b      	ldr	r3, [r5, #0]
 8002a44:	019b      	lsls	r3, r3, #6
 8002a46:	f57f ae9f 	bpl.w	8002788 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a4a:	f7fe facb 	bl	8000fe4 <HAL_GetTick>
 8002a4e:	1b00      	subs	r0, r0, r4
 8002a50:	2802      	cmp	r0, #2
 8002a52:	d9f6      	bls.n	8002a42 <HAL_RCC_OscConfig+0x2ee>
 8002a54:	e6c5      	b.n	80027e2 <HAL_RCC_OscConfig+0x8e>
 8002a56:	bf00      	nop

08002a58 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a58:	4913      	ldr	r1, [pc, #76]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8002a5a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a5c:	688b      	ldr	r3, [r1, #8]
 8002a5e:	f003 030c 	and.w	r3, r3, #12
 8002a62:	2b04      	cmp	r3, #4
 8002a64:	d003      	beq.n	8002a6e <HAL_RCC_GetSysClockFreq+0x16>
 8002a66:	2b08      	cmp	r3, #8
 8002a68:	d003      	beq.n	8002a72 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a6a:	4810      	ldr	r0, [pc, #64]	; (8002aac <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002a6c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8002a6e:	4810      	ldr	r0, [pc, #64]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x58>)
 8002a70:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a72:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a74:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a76:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a78:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a7c:	bf14      	ite	ne
 8002a7e:	480c      	ldrne	r0, [pc, #48]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a80:	480a      	ldreq	r0, [pc, #40]	; (8002aac <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a82:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002a86:	bf18      	it	ne
 8002a88:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a8a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a8e:	fba1 0100 	umull	r0, r1, r1, r0
 8002a92:	f7fe f8d5 	bl	8000c40 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a96:	4b04      	ldr	r3, [pc, #16]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x50>)
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8002aa2:	fbb0 f0f3 	udiv	r0, r0, r3
 8002aa6:	bd08      	pop	{r3, pc}
 8002aa8:	40023800 	.word	0x40023800
 8002aac:	00f42400 	.word	0x00f42400
 8002ab0:	007a1200 	.word	0x007a1200

08002ab4 <HAL_RCC_ClockConfig>:
{
 8002ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ab8:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8002aba:	4604      	mov	r4, r0
 8002abc:	b910      	cbnz	r0, 8002ac4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002abe:	2001      	movs	r0, #1
 8002ac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ac4:	4b44      	ldr	r3, [pc, #272]	; (8002bd8 <HAL_RCC_ClockConfig+0x124>)
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	f002 020f 	and.w	r2, r2, #15
 8002acc:	428a      	cmp	r2, r1
 8002ace:	d328      	bcc.n	8002b22 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ad0:	6821      	ldr	r1, [r4, #0]
 8002ad2:	078f      	lsls	r7, r1, #30
 8002ad4:	d42d      	bmi.n	8002b32 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ad6:	07c8      	lsls	r0, r1, #31
 8002ad8:	d440      	bmi.n	8002b5c <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ada:	4b3f      	ldr	r3, [pc, #252]	; (8002bd8 <HAL_RCC_ClockConfig+0x124>)
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	f002 020f 	and.w	r2, r2, #15
 8002ae2:	4295      	cmp	r5, r2
 8002ae4:	d366      	bcc.n	8002bb4 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ae6:	6822      	ldr	r2, [r4, #0]
 8002ae8:	0751      	lsls	r1, r2, #29
 8002aea:	d46c      	bmi.n	8002bc6 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aec:	0713      	lsls	r3, r2, #28
 8002aee:	d507      	bpl.n	8002b00 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002af0:	4a3a      	ldr	r2, [pc, #232]	; (8002bdc <HAL_RCC_ClockConfig+0x128>)
 8002af2:	6921      	ldr	r1, [r4, #16]
 8002af4:	6893      	ldr	r3, [r2, #8]
 8002af6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002afa:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002afe:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b00:	f7ff ffaa 	bl	8002a58 <HAL_RCC_GetSysClockFreq>
 8002b04:	4b35      	ldr	r3, [pc, #212]	; (8002bdc <HAL_RCC_ClockConfig+0x128>)
 8002b06:	4a36      	ldr	r2, [pc, #216]	; (8002be0 <HAL_RCC_ClockConfig+0x12c>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002b0e:	5cd3      	ldrb	r3, [r2, r3]
 8002b10:	40d8      	lsrs	r0, r3
 8002b12:	4b34      	ldr	r3, [pc, #208]	; (8002be4 <HAL_RCC_ClockConfig+0x130>)
 8002b14:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002b16:	2000      	movs	r0, #0
 8002b18:	f7fe fa1a 	bl	8000f50 <HAL_InitTick>
  return HAL_OK;
 8002b1c:	2000      	movs	r0, #0
 8002b1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b22:	b2ca      	uxtb	r2, r1
 8002b24:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 030f 	and.w	r3, r3, #15
 8002b2c:	4299      	cmp	r1, r3
 8002b2e:	d1c6      	bne.n	8002abe <HAL_RCC_ClockConfig+0xa>
 8002b30:	e7ce      	b.n	8002ad0 <HAL_RCC_ClockConfig+0x1c>
 8002b32:	4b2a      	ldr	r3, [pc, #168]	; (8002bdc <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b34:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b38:	bf1e      	ittt	ne
 8002b3a:	689a      	ldrne	r2, [r3, #8]
 8002b3c:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8002b40:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b42:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b44:	bf42      	ittt	mi
 8002b46:	689a      	ldrmi	r2, [r3, #8]
 8002b48:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8002b4c:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b4e:	689a      	ldr	r2, [r3, #8]
 8002b50:	68a0      	ldr	r0, [r4, #8]
 8002b52:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002b56:	4302      	orrs	r2, r0
 8002b58:	609a      	str	r2, [r3, #8]
 8002b5a:	e7bc      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b5c:	6862      	ldr	r2, [r4, #4]
 8002b5e:	4b1f      	ldr	r3, [pc, #124]	; (8002bdc <HAL_RCC_ClockConfig+0x128>)
 8002b60:	2a01      	cmp	r2, #1
 8002b62:	d11d      	bne.n	8002ba0 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b6a:	d0a8      	beq.n	8002abe <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b6c:	4e1b      	ldr	r6, [pc, #108]	; (8002bdc <HAL_RCC_ClockConfig+0x128>)
 8002b6e:	68b3      	ldr	r3, [r6, #8]
 8002b70:	f023 0303 	bic.w	r3, r3, #3
 8002b74:	4313      	orrs	r3, r2
 8002b76:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002b78:	f7fe fa34 	bl	8000fe4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b7c:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002b80:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b82:	68b3      	ldr	r3, [r6, #8]
 8002b84:	6862      	ldr	r2, [r4, #4]
 8002b86:	f003 030c 	and.w	r3, r3, #12
 8002b8a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002b8e:	d0a4      	beq.n	8002ada <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b90:	f7fe fa28 	bl	8000fe4 <HAL_GetTick>
 8002b94:	1bc0      	subs	r0, r0, r7
 8002b96:	4540      	cmp	r0, r8
 8002b98:	d9f3      	bls.n	8002b82 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8002b9a:	2003      	movs	r0, #3
}
 8002b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ba0:	1e91      	subs	r1, r2, #2
 8002ba2:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ba4:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ba6:	d802      	bhi.n	8002bae <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ba8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002bac:	e7dd      	b.n	8002b6a <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bae:	f013 0f02 	tst.w	r3, #2
 8002bb2:	e7da      	b.n	8002b6a <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bb4:	b2ea      	uxtb	r2, r5
 8002bb6:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 030f 	and.w	r3, r3, #15
 8002bbe:	429d      	cmp	r5, r3
 8002bc0:	f47f af7d 	bne.w	8002abe <HAL_RCC_ClockConfig+0xa>
 8002bc4:	e78f      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bc6:	4905      	ldr	r1, [pc, #20]	; (8002bdc <HAL_RCC_ClockConfig+0x128>)
 8002bc8:	68e0      	ldr	r0, [r4, #12]
 8002bca:	688b      	ldr	r3, [r1, #8]
 8002bcc:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002bd0:	4303      	orrs	r3, r0
 8002bd2:	608b      	str	r3, [r1, #8]
 8002bd4:	e78a      	b.n	8002aec <HAL_RCC_ClockConfig+0x38>
 8002bd6:	bf00      	nop
 8002bd8:	40023c00 	.word	0x40023c00
 8002bdc:	40023800 	.word	0x40023800
 8002be0:	08006ac9 	.word	0x08006ac9
 8002be4:	20000118 	.word	0x20000118

08002be8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002be8:	4b01      	ldr	r3, [pc, #4]	; (8002bf0 <HAL_RCC_GetHCLKFreq+0x8>)
 8002bea:	6818      	ldr	r0, [r3, #0]
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	20000118 	.word	0x20000118

08002bf4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002bf4:	4b04      	ldr	r3, [pc, #16]	; (8002c08 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002bf6:	4a05      	ldr	r2, [pc, #20]	; (8002c0c <HAL_RCC_GetPCLK1Freq+0x18>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002bfe:	5cd3      	ldrb	r3, [r2, r3]
 8002c00:	4a03      	ldr	r2, [pc, #12]	; (8002c10 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002c02:	6810      	ldr	r0, [r2, #0]
}
 8002c04:	40d8      	lsrs	r0, r3
 8002c06:	4770      	bx	lr
 8002c08:	40023800 	.word	0x40023800
 8002c0c:	08006ad9 	.word	0x08006ad9
 8002c10:	20000118 	.word	0x20000118

08002c14 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002c14:	6803      	ldr	r3, [r0, #0]
 8002c16:	f013 0f05 	tst.w	r3, #5
{
 8002c1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002c1c:	4605      	mov	r5, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002c1e:	d105      	bne.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x18>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c20:	6828      	ldr	r0, [r5, #0]
 8002c22:	f010 0002 	ands.w	r0, r0, #2
 8002c26:	d128      	bne.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x66>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
}
 8002c28:	b003      	add	sp, #12
 8002c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 8002c2c:	4c41      	ldr	r4, [pc, #260]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x120>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c2e:	4e42      	ldr	r6, [pc, #264]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    __HAL_RCC_PLLI2S_DISABLE();
 8002c30:	2300      	movs	r3, #0
 8002c32:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002c34:	f7fe f9d6 	bl	8000fe4 <HAL_GetTick>
 8002c38:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c3a:	6833      	ldr	r3, [r6, #0]
 8002c3c:	011b      	lsls	r3, r3, #4
 8002c3e:	d415      	bmi.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x58>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002c40:	68ab      	ldr	r3, [r5, #8]
 8002c42:	686a      	ldr	r2, [r5, #4]
 8002c44:	071b      	lsls	r3, r3, #28
 8002c46:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002c4a:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8002c4e:	2301      	movs	r3, #1
 8002c50:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002c52:	f7fe f9c7 	bl	8000fe4 <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c56:	4c38      	ldr	r4, [pc, #224]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    tickstart = HAL_GetTick();
 8002c58:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c5a:	6823      	ldr	r3, [r4, #0]
 8002c5c:	0118      	lsls	r0, r3, #4
 8002c5e:	d4df      	bmi.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0xc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002c60:	f7fe f9c0 	bl	8000fe4 <HAL_GetTick>
 8002c64:	1b80      	subs	r0, r0, r6
 8002c66:	2802      	cmp	r0, #2
 8002c68:	d9f7      	bls.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x46>
 8002c6a:	e004      	b.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x62>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002c6c:	f7fe f9ba 	bl	8000fe4 <HAL_GetTick>
 8002c70:	1bc0      	subs	r0, r0, r7
 8002c72:	2802      	cmp	r0, #2
 8002c74:	d9e1      	bls.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x26>
        return HAL_TIMEOUT;
 8002c76:	2003      	movs	r0, #3
 8002c78:	e7d6      	b.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x14>
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	9301      	str	r3, [sp, #4]
 8002c7e:	4b2e      	ldr	r3, [pc, #184]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    PWR->CR |= PWR_CR_DBP;
 8002c80:	4c2e      	ldr	r4, [pc, #184]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x128>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c84:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002c88:	641a      	str	r2, [r3, #64]	; 0x40
 8002c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c90:	9301      	str	r3, [sp, #4]
 8002c92:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8002c94:	6823      	ldr	r3, [r4, #0]
 8002c96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c9a:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002c9c:	f7fe f9a2 	bl	8000fe4 <HAL_GetTick>
 8002ca0:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002ca2:	6823      	ldr	r3, [r4, #0]
 8002ca4:	05d9      	lsls	r1, r3, #23
 8002ca6:	d51b      	bpl.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ca8:	4c23      	ldr	r4, [pc, #140]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8002caa:	6f23      	ldr	r3, [r4, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002cac:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002cb0:	d11c      	bne.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cb2:	68eb      	ldr	r3, [r5, #12]
 8002cb4:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002cb8:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8002cbc:	4a1e      	ldr	r2, [pc, #120]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8002cbe:	d134      	bne.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002cc0:	6891      	ldr	r1, [r2, #8]
 8002cc2:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8002cc6:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8002cca:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8002cce:	4301      	orrs	r1, r0
 8002cd0:	6091      	str	r1, [r2, #8]
 8002cd2:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8002cd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cd8:	430b      	orrs	r3, r1
 8002cda:	6713      	str	r3, [r2, #112]	; 0x70
  return HAL_OK;
 8002cdc:	2000      	movs	r0, #0
 8002cde:	e7a3      	b.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x14>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002ce0:	f7fe f980 	bl	8000fe4 <HAL_GetTick>
 8002ce4:	1b80      	subs	r0, r0, r6
 8002ce6:	2802      	cmp	r0, #2
 8002ce8:	d9db      	bls.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
 8002cea:	e7c4      	b.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x62>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002cec:	68ea      	ldr	r2, [r5, #12]
 8002cee:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d0dd      	beq.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cf6:	6f23      	ldr	r3, [r4, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8002cf8:	4a11      	ldr	r2, [pc, #68]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8002cfa:	2101      	movs	r1, #1
 8002cfc:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d02:	2100      	movs	r1, #0
 8002d04:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 8002d06:	6723      	str	r3, [r4, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002d08:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8002d0a:	07da      	lsls	r2, r3, #31
 8002d0c:	d5d1      	bpl.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
        tickstart = HAL_GetTick();
 8002d0e:	f7fe f969 	bl	8000fe4 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d12:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002d16:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d18:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8002d1a:	079b      	lsls	r3, r3, #30
 8002d1c:	d4c9      	bmi.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d1e:	f7fe f961 	bl	8000fe4 <HAL_GetTick>
 8002d22:	1b80      	subs	r0, r0, r6
 8002d24:	42b8      	cmp	r0, r7
 8002d26:	d9f7      	bls.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002d28:	e7a5      	b.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x62>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d2a:	6891      	ldr	r1, [r2, #8]
 8002d2c:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8002d30:	e7ce      	b.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0xbc>
 8002d32:	bf00      	nop
 8002d34:	42470068 	.word	0x42470068
 8002d38:	40023800 	.word	0x40023800
 8002d3c:	40007000 	.word	0x40007000
 8002d40:	42470e40 	.word	0x42470e40

08002d44 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 8002d44:	2801      	cmp	r0, #1
 8002d46:	d120      	bne.n	8002d8a <HAL_RCCEx_GetPeriphCLKFreq+0x46>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8002d48:	4b11      	ldr	r3, [pc, #68]	; (8002d90 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
 8002d4a:	689a      	ldr	r2, [r3, #8]
      switch (srcclk)
 8002d4c:	f412 0200 	ands.w	r2, r2, #8388608	; 0x800000
 8002d50:	d004      	beq.n	8002d5c <HAL_RCCEx_GetPeriphCLKFreq+0x18>
 8002d52:	2a01      	cmp	r2, #1
          break;
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8002d54:	480f      	ldr	r0, [pc, #60]	; (8002d94 <HAL_RCCEx_GetPeriphCLKFreq+0x50>)
 8002d56:	bf18      	it	ne
 8002d58:	2000      	movne	r0, #0
 8002d5a:	4770      	bx	lr
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002d5c:	685a      	ldr	r2, [r3, #4]
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002d5e:	490c      	ldr	r1, [pc, #48]	; (8002d90 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002d60:	6858      	ldr	r0, [r3, #4]
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002d62:	0253      	lsls	r3, r2, #9
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002d64:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002d68:	bf4c      	ite	mi
 8002d6a:	4b0b      	ldrmi	r3, [pc, #44]	; (8002d98 <HAL_RCCEx_GetPeriphCLKFreq+0x54>)
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002d6c:	4b0b      	ldrpl	r3, [pc, #44]	; (8002d9c <HAL_RCCEx_GetPeriphCLKFreq+0x58>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002d6e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002d72:	fbb3 f3f0 	udiv	r3, r3, r0
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002d76:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002d7a:	f3c2 1288 	ubfx	r2, r2, #6, #9
 8002d7e:	4353      	muls	r3, r2
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002d80:	f3c0 7002 	ubfx	r0, r0, #28, #3
 8002d84:	fbb3 f0f0 	udiv	r0, r3, r0
          break;
 8002d88:	4770      	bx	lr
  uint32_t frequency = 0U;
 8002d8a:	2000      	movs	r0, #0
      }
      break;
    }
  }
  return frequency;
}
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	40023800 	.word	0x40023800
 8002d94:	00bb8000 	.word	0x00bb8000
 8002d98:	007a1200 	.word	0x007a1200
 8002d9c:	00f42400 	.word	0x00f42400

08002da0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002da0:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8002da2:	4604      	mov	r4, r0
 8002da4:	2800      	cmp	r0, #0
 8002da6:	d036      	beq.n	8002e16 <HAL_SPI_Init+0x76>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002da8:	2300      	movs	r3, #0
 8002daa:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8002dac:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8002db0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002db4:	b91b      	cbnz	r3, 8002dbe <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002db6:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002dba:	f001 fb21 	bl	8004400 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002dbe:	6821      	ldr	r1, [r4, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002dc0:	68a0      	ldr	r0, [r4, #8]
 8002dc2:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8002dca:	680b      	ldr	r3, [r1, #0]
 8002dcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dd0:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002dd2:	6863      	ldr	r3, [r4, #4]
 8002dd4:	4303      	orrs	r3, r0
 8002dd6:	68e0      	ldr	r0, [r4, #12]
 8002dd8:	4303      	orrs	r3, r0
 8002dda:	6920      	ldr	r0, [r4, #16]
 8002ddc:	4303      	orrs	r3, r0
 8002dde:	6960      	ldr	r0, [r4, #20]
 8002de0:	4303      	orrs	r3, r0
 8002de2:	69e0      	ldr	r0, [r4, #28]
 8002de4:	4303      	orrs	r3, r0
 8002de6:	6a20      	ldr	r0, [r4, #32]
 8002de8:	4303      	orrs	r3, r0
 8002dea:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002dec:	4303      	orrs	r3, r0
 8002dee:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8002df2:	4303      	orrs	r3, r0
 8002df4:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002df6:	0c12      	lsrs	r2, r2, #16
 8002df8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002dfa:	f002 0204 	and.w	r2, r2, #4
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	604a      	str	r2, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e02:	69cb      	ldr	r3, [r1, #28]
 8002e04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e08:	61cb      	str	r3, [r1, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e0a:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8002e0c:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e0e:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e10:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
 8002e14:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002e16:	2001      	movs	r0, #1
}
 8002e18:	bd10      	pop	{r4, pc}

08002e1a <USB_CoreInit>:
  * @param  cfg  pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	b538      	push	{r3, r4, r5, lr}
 8002e1e:	ad05      	add	r5, sp, #20
 8002e20:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002e24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002e26:	2b01      	cmp	r3, #1
{
 8002e28:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002e2a:	d126      	bne.n	8002e7a <USB_CoreInit+0x60>
  {
    
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002e2c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002e2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e32:	6383      	str	r3, [r0, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002e34:	68c3      	ldr	r3, [r0, #12]
 8002e36:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002e3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e3e:	60c3      	str	r3, [r0, #12]
   
    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002e40:	68c3      	ldr	r3, [r0, #12]
 8002e42:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002e46:	60c3      	str	r3, [r0, #12]
    if(cfg.use_external_vbus == 1U)
 8002e48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002e4a:	2b01      	cmp	r3, #1
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002e4c:	bf02      	ittt	eq
 8002e4e:	68c3      	ldreq	r3, [r0, #12]
 8002e50:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 8002e54:	60c3      	streq	r3, [r0, #12]
    }
    /* Reset after a PHY select  */
    USB_CoreReset(USBx); 
 8002e56:	f000 fbdd 	bl	8003614 <USB_CoreReset>
    
    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
  }
 
  if(cfg.dma_enable == ENABLE)
 8002e5a:	9b08      	ldr	r3, [sp, #32]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d107      	bne.n	8002e70 <USB_CoreInit+0x56>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002e60:	68a3      	ldr	r3, [r4, #8]
 8002e62:	f043 0306 	orr.w	r3, r3, #6
 8002e66:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002e68:	68a3      	ldr	r3, [r4, #8]
 8002e6a:	f043 0320 	orr.w	r3, r3, #32
 8002e6e:	60a3      	str	r3, [r4, #8]
  }  

  return HAL_OK;
}
 8002e70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e74:	2000      	movs	r0, #0
 8002e76:	b004      	add	sp, #16
 8002e78:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002e7a:	68c3      	ldr	r3, [r0, #12]
 8002e7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e80:	60c3      	str	r3, [r0, #12]
    USB_CoreReset(USBx);
 8002e82:	f000 fbc7 	bl	8003614 <USB_CoreReset>
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8002e86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e8a:	63a3      	str	r3, [r4, #56]	; 0x38
 8002e8c:	e7e5      	b.n	8002e5a <USB_CoreInit+0x40>

08002e8e <USB_EnableGlobalInt>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002e8e:	6883      	ldr	r3, [r0, #8]
 8002e90:	f043 0301 	orr.w	r3, r3, #1
 8002e94:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 8002e96:	2000      	movs	r0, #0
 8002e98:	4770      	bx	lr

08002e9a <USB_DisableGlobalInt>:
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002e9a:	6883      	ldr	r3, [r0, #8]
 8002e9c:	f023 0301 	bic.w	r3, r3, #1
 8002ea0:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 8002ea2:	2000      	movs	r0, #0
 8002ea4:	4770      	bx	lr

08002ea6 <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
 8002ea6:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 8002ea8:	68c3      	ldr	r3, [r0, #12]
  
  if ( mode == USB_OTG_HOST_MODE)
 8002eaa:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 8002eac:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8002eb0:	60c3      	str	r3, [r0, #12]
  if ( mode == USB_OTG_HOST_MODE)
 8002eb2:	d108      	bne.n	8002ec6 <USB_SetCurrentMode+0x20>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 8002eb4:	68c3      	ldr	r3, [r0, #12]
 8002eb6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002eba:	60c3      	str	r3, [r0, #12]
  }
  else if ( mode == USB_OTG_DEVICE_MODE)
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
  }
  HAL_Delay(50U);
 8002ebc:	2032      	movs	r0, #50	; 0x32
 8002ebe:	f7fe f897 	bl	8000ff0 <HAL_Delay>
  
  return HAL_OK;
}
 8002ec2:	2000      	movs	r0, #0
 8002ec4:	bd08      	pop	{r3, pc}
  else if ( mode == USB_OTG_DEVICE_MODE)
 8002ec6:	2900      	cmp	r1, #0
 8002ec8:	d1f8      	bne.n	8002ebc <USB_SetCurrentMode+0x16>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 8002eca:	68c3      	ldr	r3, [r0, #12]
 8002ecc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002ed0:	60c3      	str	r3, [r0, #12]
 8002ed2:	e7f3      	b.n	8002ebc <USB_SetCurrentMode+0x16>

08002ed4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002ed4:	b084      	sub	sp, #16
 8002ed6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002eda:	4604      	mov	r4, r0
 8002edc:	a807      	add	r0, sp, #28
 8002ede:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8002ee2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8002ee4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
  }
#else
  if (cfg.vbus_sensing_enable == 0U)
  {
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002ee6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002ee8:	4688      	mov	r8, r1
  if (cfg.vbus_sensing_enable == 0U)
 8002eea:	b9a6      	cbnz	r6, 8002f16 <USB_DevInit+0x42>
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002eec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ef0:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* STM32F446xx || STM32F469xx || STM32F479xx || STM32F412Zx || STM32F412Rx || STM32F412Vx || STM32F412Cx || STM32F413xx || STM32F423xx  */
  
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  
  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002ef8:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8002efc:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 8002f00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002f02:	2b01      	cmp	r3, #1
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002f04:	f504 6500 	add.w	r5, r4, #2048	; 0x800
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 8002f08:	d15e      	bne.n	8002fc8 <USB_DevInit+0xf4>
  {
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 8002f0a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002f0c:	b939      	cbnz	r1, 8002f1e <USB_DevInit+0x4a>
    }
  }
  else
  {
    /* Set Full speed phy */
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 8002f0e:	4620      	mov	r0, r4
 8002f10:	f000 f89e 	bl	8003050 <USB_SetDevSpeed>
 8002f14:	e007      	b.n	8002f26 <USB_DevInit+0x52>
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002f16:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002f1a:	63a3      	str	r3, [r4, #56]	; 0x38
 8002f1c:	e7e9      	b.n	8002ef2 <USB_DevInit+0x1e>
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH_IN_FULL);
 8002f1e:	4619      	mov	r1, r3
 8002f20:	4620      	mov	r0, r4
 8002f22:	f000 f895 	bl	8003050 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  USB_FlushTxFifo(USBx , 0x10U); /* all Tx FIFOs */
 8002f26:	2110      	movs	r1, #16
 8002f28:	4620      	mov	r0, r4
 8002f2a:	f000 f86f 	bl	800300c <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 8002f2e:	4620      	mov	r0, r4
 8002f30:	f000 f87e 	bl	8003030 <USB_FlushRxFifo>
  
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002f34:	2300      	movs	r3, #0
  USBx_DEVICE->DOEPMSK = 0U;
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 8002f36:	f04f 32ff 	mov.w	r2, #4294967295
  USBx_DEVICE->DIEPMSK = 0U;
 8002f3a:	612b      	str	r3, [r5, #16]
 8002f3c:	4619      	mov	r1, r3
  USBx_DEVICE->DOEPMSK = 0U;
 8002f3e:	616b      	str	r3, [r5, #20]
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
    {
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 8002f40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 8002f44:	61aa      	str	r2, [r5, #24]
    {
      USBx_INEP(i)->DIEPCTL = 0U;
    }
    
    USBx_INEP(i)->DIEPTSIZ = 0U;
    USBx_INEP(i)->DIEPINT  = 0xFFU;
 8002f46:	f04f 0eff 	mov.w	lr, #255	; 0xff
  USBx_DEVICE->DAINTMSK = 0U;
 8002f4a:	61eb      	str	r3, [r5, #28]
 8002f4c:	f504 6210 	add.w	r2, r4, #2304	; 0x900
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002f50:	4543      	cmp	r3, r8
 8002f52:	d13b      	bne.n	8002fcc <USB_DevInit+0xf8>
 8002f54:	2100      	movs	r1, #0
 8002f56:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
 8002f5a:	4608      	mov	r0, r1
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
    {
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8002f5c:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
    }
    
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
 8002f60:	f04f 0cff 	mov.w	ip, #255	; 0xff
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002f64:	428b      	cmp	r3, r1
 8002f66:	d13e      	bne.n	8002fe6 <USB_DevInit+0x112>
  }
  
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002f68:	692b      	ldr	r3, [r5, #16]
  
  if (cfg.dma_enable == 1U)
 8002f6a:	2f01      	cmp	r7, #1
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002f6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f70:	612b      	str	r3, [r5, #16]
  if (cfg.dma_enable == 1U)
 8002f72:	d108      	bne.n	8002f86 <USB_DevInit+0xb2>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 8002f74:	4b23      	ldr	r3, [pc, #140]	; (8003004 <USB_DevInit+0x130>)
 8002f76:	632b      	str	r3, [r5, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 8002f78:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002f7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f7e:	f043 0303 	orr.w	r3, r3, #3
 8002f82:	632b      	str	r3, [r5, #48]	; 0x30
    
    i= USBx_DEVICE->DTHRCTL;
 8002f84:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  }
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002f86:	2300      	movs	r3, #0
 8002f88:	61a3      	str	r3, [r4, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002f8a:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8002f8e:	6163      	str	r3, [r4, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 8002f90:	b91f      	cbnz	r7, 8002f9a <USB_DevInit+0xc6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 8002f92:	69a3      	ldr	r3, [r4, #24]
 8002f94:	f043 0310 	orr.w	r3, r3, #16
 8002f98:	61a3      	str	r3, [r4, #24]
  }
  
  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 8002f9a:	69a2      	ldr	r2, [r4, #24]
 8002f9c:	4b1a      	ldr	r3, [pc, #104]	; (8003008 <USB_DevInit+0x134>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	61a3      	str	r3, [r4, #24]
                    USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |\
                    USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM);
  
  if(cfg.Sof_enable)
 8002fa2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002fa4:	b11b      	cbz	r3, 8002fae <USB_DevInit+0xda>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002fa6:	69a3      	ldr	r3, [r4, #24]
 8002fa8:	f043 0308 	orr.w	r3, r3, #8
 8002fac:	61a3      	str	r3, [r4, #24]
  }

  if (cfg.vbus_sensing_enable == ENABLE)
 8002fae:	2e01      	cmp	r6, #1
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT); 
 8002fb0:	bf01      	itttt	eq
 8002fb2:	69a3      	ldreq	r3, [r4, #24]
 8002fb4:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8002fb8:	f043 0304 	orreq.w	r3, r3, #4
 8002fbc:	61a3      	streq	r3, [r4, #24]
  }
  
  return HAL_OK;
}
 8002fbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002fc2:	2000      	movs	r0, #0
 8002fc4:	b004      	add	sp, #16
 8002fc6:	4770      	bx	lr
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 8002fc8:	2103      	movs	r1, #3
 8002fca:	e7a0      	b.n	8002f0e <USB_DevInit+0x3a>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002fcc:	f8d2 c000 	ldr.w	ip, [r2]
 8002fd0:	f1bc 0f00 	cmp.w	ip, #0
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 8002fd4:	bfb4      	ite	lt
 8002fd6:	6010      	strlt	r0, [r2, #0]
      USBx_INEP(i)->DIEPCTL = 0U;
 8002fd8:	6011      	strge	r1, [r2, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002fda:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002fdc:	6111      	str	r1, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFFU;
 8002fde:	f8c2 e008 	str.w	lr, [r2, #8]
 8002fe2:	3220      	adds	r2, #32
 8002fe4:	e7b4      	b.n	8002f50 <USB_DevInit+0x7c>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002fe6:	f8d2 8000 	ldr.w	r8, [r2]
 8002fea:	f1b8 0f00 	cmp.w	r8, #0
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8002fee:	bfb4      	ite	lt
 8002ff0:	f8c2 e000 	strlt.w	lr, [r2]
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002ff4:	6010      	strge	r0, [r2, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002ff6:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002ff8:	6110      	str	r0, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
 8002ffa:	f8c2 c008 	str.w	ip, [r2, #8]
 8002ffe:	3220      	adds	r2, #32
 8003000:	e7b0      	b.n	8002f64 <USB_DevInit+0x90>
 8003002:	bf00      	nop
 8003004:	00800100 	.word	0x00800100
 8003008:	803c3800 	.word	0x803c3800

0800300c <USB_FlushTxFifo>:
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 800300c:	0189      	lsls	r1, r1, #6
 800300e:	f041 0120 	orr.w	r1, r1, #32
 8003012:	4a06      	ldr	r2, [pc, #24]	; (800302c <USB_FlushTxFifo+0x20>)
 8003014:	6101      	str	r1, [r0, #16]
  
  do
  {
    if (++count > 200000)
 8003016:	3a01      	subs	r2, #1
 8003018:	d005      	beq.n	8003026 <USB_FlushTxFifo+0x1a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800301a:	6903      	ldr	r3, [r0, #16]
 800301c:	f013 0320 	ands.w	r3, r3, #32
 8003020:	d1f9      	bne.n	8003016 <USB_FlushTxFifo+0xa>
  
  return HAL_OK;
 8003022:	4618      	mov	r0, r3
 8003024:	4770      	bx	lr
      return HAL_TIMEOUT;
 8003026:	2003      	movs	r0, #3
}
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	00030d41 	.word	0x00030d41

08003030 <USB_FlushRxFifo>:
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003030:	2310      	movs	r3, #16
 8003032:	4a06      	ldr	r2, [pc, #24]	; (800304c <USB_FlushRxFifo+0x1c>)
 8003034:	6103      	str	r3, [r0, #16]
  
  do
  {
    if (++count > 200000)
 8003036:	3a01      	subs	r2, #1
 8003038:	d005      	beq.n	8003046 <USB_FlushRxFifo+0x16>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800303a:	6903      	ldr	r3, [r0, #16]
 800303c:	f013 0310 	ands.w	r3, r3, #16
 8003040:	d1f9      	bne.n	8003036 <USB_FlushRxFifo+0x6>
  
  return HAL_OK;
 8003042:	4618      	mov	r0, r3
 8003044:	4770      	bx	lr
      return HAL_TIMEOUT;
 8003046:	2003      	movs	r0, #3
}
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	00030d41 	.word	0x00030d41

08003050 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx , uint8_t speed)
{
  USBx_DEVICE->DCFG |= speed;
 8003050:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8003054:	4319      	orrs	r1, r3
 8003056:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  return HAL_OK;
}
 800305a:	2000      	movs	r0, #0
 800305c:	4770      	bx	lr

0800305e <USB_GetDevSpeed>:
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
  uint8_t speed = 0U;
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800305e:	f500 6200 	add.w	r2, r0, #2048	; 0x800
 8003062:	f8d0 0808 	ldr.w	r0, [r0, #2056]	; 0x808
 8003066:	f010 0006 	ands.w	r0, r0, #6
 800306a:	d012      	beq.n	8003092 <USB_GetDevSpeed+0x34>
  {
    speed = USB_OTG_SPEED_HIGH;
  }
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 800306c:	6893      	ldr	r3, [r2, #8]
 800306e:	f003 0306 	and.w	r3, r3, #6
 8003072:	2b02      	cmp	r3, #2
 8003074:	d00c      	beq.n	8003090 <USB_GetDevSpeed+0x32>
           ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_48MHZ))
 8003076:	6893      	ldr	r3, [r2, #8]
 8003078:	f003 0306 	and.w	r3, r3, #6
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 800307c:	2b06      	cmp	r3, #6
 800307e:	d007      	beq.n	8003090 <USB_GetDevSpeed+0x32>
  {
    speed = USB_OTG_SPEED_FULL;
  }
  else if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8003080:	6893      	ldr	r3, [r2, #8]
 8003082:	f003 0306 	and.w	r3, r3, #6
 8003086:	2b04      	cmp	r3, #4
  {
    speed = USB_OTG_SPEED_LOW;
 8003088:	bf14      	ite	ne
 800308a:	2000      	movne	r0, #0
 800308c:	2002      	moveq	r0, #2
 800308e:	4770      	bx	lr
    speed = USB_OTG_SPEED_FULL;
 8003090:	2003      	movs	r0, #3
  }
  
  return speed;
}
 8003092:	4770      	bx	lr

08003094 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003094:	b530      	push	{r4, r5, lr}
  if (ep->is_in == 1U)
 8003096:	784b      	ldrb	r3, [r1, #1]
 8003098:	780c      	ldrb	r4, [r1, #0]
  {
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 800309a:	f8d0 581c 	ldr.w	r5, [r0, #2076]	; 0x81c
 800309e:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  if (ep->is_in == 1U)
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d11b      	bne.n	80030de <USB_ActivateEndpoint+0x4a>
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 80030a6:	40a3      	lsls	r3, r4
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	432b      	orrs	r3, r5
   
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80030ac:	f500 6010 	add.w	r0, r0, #2304	; 0x900
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 80030b0:	61d3      	str	r3, [r2, #28]
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80030b2:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	0412      	lsls	r2, r2, #16
 80030ba:	d40e      	bmi.n	80030da <USB_ActivateEndpoint+0x46>
    {
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18U) |\
 80030bc:	688a      	ldr	r2, [r1, #8]
 80030be:	78c8      	ldrb	r0, [r1, #3]
 80030c0:	681d      	ldr	r5, [r3, #0]
 80030c2:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80030c6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80030ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030ce:	ea42 4080 	orr.w	r0, r2, r0, lsl #18
 80030d2:	ea40 5084 	orr.w	r0, r0, r4, lsl #22
 80030d6:	4328      	orrs	r0, r5
 80030d8:	6018      	str	r0, [r3, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18U) |\
       (USB_OTG_DIEPCTL_SD0PID_SEVNFRM)| (USB_OTG_DOEPCTL_USBAEP));
    } 
  }
  return HAL_OK;
}
 80030da:	2000      	movs	r0, #0
 80030dc:	bd30      	pop	{r4, r5, pc}
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 80030de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030e2:	40a3      	lsls	r3, r4
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80030e4:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 80030e8:	432b      	orrs	r3, r5
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80030ea:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 80030ee:	61d3      	str	r3, [r2, #28]
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80030f0:	6803      	ldr	r3, [r0, #0]
 80030f2:	041b      	lsls	r3, r3, #16
 80030f4:	d4f1      	bmi.n	80030da <USB_ActivateEndpoint+0x46>
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18U) |\
 80030f6:	688b      	ldr	r3, [r1, #8]
 80030f8:	78c9      	ldrb	r1, [r1, #3]
 80030fa:	6802      	ldr	r2, [r0, #0]
 80030fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003104:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003108:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 800310c:	4313      	orrs	r3, r2
 800310e:	6003      	str	r3, [r0, #0]
 8003110:	e7e3      	b.n	80030da <USB_ActivateEndpoint+0x46>

08003112 <USB_DeactivateEndpoint>:
 8003112:	f000 b801 	b.w	8003118 <USB_DeactivateDedicatedEndpoint>
	...

08003118 <USB_DeactivateDedicatedEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateDedicatedEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003118:	b570      	push	{r4, r5, r6, lr}
  uint32_t count = 0U;
  
  /* Disable the IN endpoint */
  if (ep->is_in == 1U)
 800311a:	784b      	ldrb	r3, [r1, #1]
 800311c:	2b01      	cmp	r3, #1
{
 800311e:	460e      	mov	r6, r1
 8003120:	4605      	mov	r5, r0
 8003122:	7809      	ldrb	r1, [r1, #0]
 8003124:	f04f 0320 	mov.w	r3, #32
  if (ep->is_in == 1U)
 8003128:	d126      	bne.n	8003178 <USB_DeactivateDedicatedEndpoint+0x60>
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_USBAEP;  
 800312a:	f500 6210 	add.w	r2, r0, #2304	; 0x900
 800312e:	fb13 2301 	smlabb	r3, r3, r1, r2
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003138:	601a      	str	r2, [r3, #0]
    
    /* sets the NAK bit for the IN endpoint */
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800313a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800313e:	601a      	str	r2, [r3, #0]
    
    /* Disable IN endpoint */
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS;
 8003140:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003144:	601a      	str	r2, [r3, #0]
 8003146:	4a1f      	ldr	r2, [pc, #124]	; (80031c4 <USB_DeactivateDedicatedEndpoint+0xac>)
    
    do
    {
      if (++count > 200000U)
 8003148:	3a01      	subs	r2, #1
 800314a:	d101      	bne.n	8003150 <USB_DeactivateDedicatedEndpoint+0x38>
      {
        return HAL_TIMEOUT;
 800314c:	2003      	movs	r0, #3
 800314e:	bd70      	pop	{r4, r5, r6, pc}
      }
    }
    
    /*Wait for  EPDISD endpoint disabled interrupt*/ 
    while ((USBx_INEP(ep->num)->DIEPINT & USB_OTG_DIEPCTL_EPDIS) == USB_OTG_DIEPCTL_EPDIS);
 8003150:	689c      	ldr	r4, [r3, #8]
 8003152:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
 8003156:	d1f7      	bne.n	8003148 <USB_DeactivateDedicatedEndpoint+0x30>
    
    
    /* Flush any data remaining in the TxFIFO */
    USB_FlushTxFifo(USBx , 0x10U);
 8003158:	2110      	movs	r1, #16
 800315a:	4628      	mov	r0, r5
 800315c:	f7ff ff56 	bl	800300c <USB_FlushTxFifo>
    
    /* Disable endpoint interrupts */
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num))));   
 8003160:	7831      	ldrb	r1, [r6, #0]
 8003162:	f8d5 281c 	ldr.w	r2, [r5, #2076]	; 0x81c
 8003166:	2301      	movs	r3, #1
 8003168:	408b      	lsls	r3, r1
 800316a:	b29b      	uxth	r3, r3
 800316c:	ea22 0303 	bic.w	r3, r2, r3
 8003170:	f8c5 381c 	str.w	r3, [r5, #2076]	; 0x81c
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
    
    /* Disable endpoint interrupts */
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U));         
  }
  return HAL_OK;
 8003174:	4620      	mov	r0, r4
 8003176:	bd70      	pop	{r4, r5, r6, pc}
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;  
 8003178:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
 800317c:	fb13 2301 	smlabb	r3, r3, r1, r2
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003186:	601a      	str	r2, [r3, #0]
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003188:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800318c:	601a      	str	r2, [r3, #0]
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS;
 800318e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003192:	601a      	str	r2, [r3, #0]
 8003194:	4a0b      	ldr	r2, [pc, #44]	; (80031c4 <USB_DeactivateDedicatedEndpoint+0xac>)
      if (++count > 200000U)
 8003196:	3a01      	subs	r2, #1
 8003198:	d0d8      	beq.n	800314c <USB_DeactivateDedicatedEndpoint+0x34>
    while ((USBx_OUTEP(ep->num)->DOEPINT & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS);
 800319a:	6898      	ldr	r0, [r3, #8]
 800319c:	f010 0010 	ands.w	r0, r0, #16
 80031a0:	d1f9      	bne.n	8003196 <USB_DeactivateDedicatedEndpoint+0x7e>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80031a2:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
 80031a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031aa:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U));         
 80031ae:	f8d5 381c 	ldr.w	r3, [r5, #2076]	; 0x81c
 80031b2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80031b6:	408a      	lsls	r2, r1
 80031b8:	ea23 0302 	bic.w	r3, r3, r2
 80031bc:	f8c5 381c 	str.w	r3, [r5, #2076]	; 0x81c

}
 80031c0:	bd70      	pop	{r4, r5, r6, pc}
 80031c2:	bf00      	nop
 80031c4:	00030d41 	.word	0x00030d41

080031c8 <USB_EPStartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80031c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint16_t pktcnt = 0U;
  
  /* IN endpoint */
  if (ep->is_in == 1U)
 80031ca:	784b      	ldrb	r3, [r1, #1]
 80031cc:	780c      	ldrb	r4, [r1, #0]
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	694b      	ldr	r3, [r1, #20]
 80031d2:	d177      	bne.n	80032c4 <USB_EPStartXfer+0xfc>
 80031d4:	2620      	movs	r6, #32
 80031d6:	f500 6510 	add.w	r5, r0, #2304	; 0x900
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 80031da:	fb16 5404 	smlabb	r4, r6, r4, r5
 80031de:	6926      	ldr	r6, [r4, #16]
    if (ep->xfer_len == 0U)
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d138      	bne.n	8003256 <USB_EPStartXfer+0x8e>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 80031e4:	f026 56ff 	bic.w	r6, r6, #534773760	; 0x1fe00000
 80031e8:	f426 16c0 	bic.w	r6, r6, #1572864	; 0x180000
 80031ec:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 80031ee:	6926      	ldr	r6, [r4, #16]
 80031f0:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 80031f4:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 80031f6:	6926      	ldr	r6, [r4, #16]
 80031f8:	0cf6      	lsrs	r6, r6, #19
 80031fa:	04f6      	lsls	r6, r6, #19
 80031fc:	6126      	str	r6, [r4, #16]
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29U)); 
      }       
    }

    if (dma == 1U)
 80031fe:	2a01      	cmp	r2, #1
 8003200:	d150      	bne.n	80032a4 <USB_EPStartXfer+0xdc>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003202:	780c      	ldrb	r4, [r1, #0]
 8003204:	690e      	ldr	r6, [r1, #16]
 8003206:	eb05 1444 	add.w	r4, r5, r4, lsl #5
 800320a:	6166      	str	r6, [r4, #20]
          USBx_DEVICE->DIEPEMPMSK |= 1U << ep->num;
        }
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800320c:	78ce      	ldrb	r6, [r1, #3]
 800320e:	2e01      	cmp	r6, #1
 8003210:	d10f      	bne.n	8003232 <USB_EPStartXfer+0x6a>
    {
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 8003212:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 8003216:	780f      	ldrb	r7, [r1, #0]
 8003218:	f414 7f80 	tst.w	r4, #256	; 0x100
 800321c:	f04f 0420 	mov.w	r4, #32
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003220:	fb14 5407 	smlabb	r4, r4, r7, r5
 8003224:	6827      	ldr	r7, [r4, #0]
 8003226:	bf0c      	ite	eq
 8003228:	f047 5700 	orreq.w	r7, r7, #536870912	; 0x20000000
      }
      else
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800322c:	f047 5780 	orrne.w	r7, r7, #268435456	; 0x10000000
 8003230:	6027      	str	r7, [r4, #0]
      }
    } 
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003232:	780f      	ldrb	r7, [r1, #0]
 8003234:	eb05 1547 	add.w	r5, r5, r7, lsl #5
    
    if (ep->type == EP_TYPE_ISOC)
 8003238:	2e01      	cmp	r6, #1
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800323a:	682c      	ldr	r4, [r5, #0]
 800323c:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8003240:	602c      	str	r4, [r5, #0]
    if (ep->type == EP_TYPE_ISOC)
 8003242:	d105      	bne.n	8003250 <USB_EPStartXfer+0x88>
    {
      USB_WritePacket(USBx, ep->xfer_buff, ep->num, ep->xfer_len, dma);   
 8003244:	9200      	str	r2, [sp, #0]
 8003246:	b29b      	uxth	r3, r3
 8003248:	463a      	mov	r2, r7
 800324a:	68c9      	ldr	r1, [r1, #12]
 800324c:	f000 f8ef 	bl	800342e <USB_WritePacket>
    }
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
  }
  return HAL_OK;
}
 8003250:	2000      	movs	r0, #0
 8003252:	b003      	add	sp, #12
 8003254:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003256:	0cf6      	lsrs	r6, r6, #19
 8003258:	04f6      	lsls	r6, r6, #19
 800325a:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 800325c:	6926      	ldr	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket) << 19U)) ;
 800325e:	688f      	ldr	r7, [r1, #8]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8003260:	f026 56ff 	bic.w	r6, r6, #534773760	; 0x1fe00000
 8003264:	f426 16c0 	bic.w	r6, r6, #1572864	; 0x180000
 8003268:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket) << 19U)) ;
 800326a:	19de      	adds	r6, r3, r7
 800326c:	3e01      	subs	r6, #1
 800326e:	fbb6 f7f7 	udiv	r7, r6, r7
 8003272:	4e37      	ldr	r6, [pc, #220]	; (8003350 <USB_EPStartXfer+0x188>)
 8003274:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8003278:	ea06 46c7 	and.w	r6, r6, r7, lsl #19
 800327c:	ea46 060e 	orr.w	r6, r6, lr
 8003280:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8003282:	6927      	ldr	r7, [r4, #16]
 8003284:	f3c3 0612 	ubfx	r6, r3, #0, #19
 8003288:	433e      	orrs	r6, r7
 800328a:	6126      	str	r6, [r4, #16]
      if (ep->type == EP_TYPE_ISOC)
 800328c:	78ce      	ldrb	r6, [r1, #3]
 800328e:	2e01      	cmp	r6, #1
 8003290:	d15a      	bne.n	8003348 <USB_EPStartXfer+0x180>
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
 8003292:	6926      	ldr	r6, [r4, #16]
 8003294:	f026 46c0 	bic.w	r6, r6, #1610612736	; 0x60000000
 8003298:	6126      	str	r6, [r4, #16]
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29U)); 
 800329a:	6926      	ldr	r6, [r4, #16]
 800329c:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 80032a0:	6126      	str	r6, [r4, #16]
 80032a2:	e7ac      	b.n	80031fe <USB_EPStartXfer+0x36>
      if (ep->type != EP_TYPE_ISOC)
 80032a4:	78ce      	ldrb	r6, [r1, #3]
 80032a6:	2e01      	cmp	r6, #1
 80032a8:	d0b3      	beq.n	8003212 <USB_EPStartXfer+0x4a>
        if (ep->xfer_len > 0U)
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d0ae      	beq.n	800320c <USB_EPStartXfer+0x44>
          USBx_DEVICE->DIEPEMPMSK |= 1U << ep->num;
 80032ae:	f891 e000 	ldrb.w	lr, [r1]
 80032b2:	f8d0 7834 	ldr.w	r7, [r0, #2100]	; 0x834
 80032b6:	2401      	movs	r4, #1
 80032b8:	fa04 f40e 	lsl.w	r4, r4, lr
 80032bc:	433c      	orrs	r4, r7
 80032be:	f8c0 4834 	str.w	r4, [r0, #2100]	; 0x834
 80032c2:	e7a3      	b.n	800320c <USB_EPStartXfer+0x44>
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 80032c4:	f500 6530 	add.w	r5, r0, #2816	; 0xb00
 80032c8:	eb05 1444 	add.w	r4, r5, r4, lsl #5
 80032cc:	6925      	ldr	r5, [r4, #16]
 80032ce:	0ced      	lsrs	r5, r5, #19
 80032d0:	04ed      	lsls	r5, r5, #19
 80032d2:	6125      	str	r5, [r4, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 80032d4:	6925      	ldr	r5, [r4, #16]
 80032d6:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 80032da:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 80032de:	6125      	str	r5, [r4, #16]
 80032e0:	688d      	ldr	r5, [r1, #8]
    if (ep->xfer_len == 0U)
 80032e2:	b9fb      	cbnz	r3, 8003324 <USB_EPStartXfer+0x15c>
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80032e4:	6923      	ldr	r3, [r4, #16]
 80032e6:	f3c5 0512 	ubfx	r5, r5, #0, #19
 80032ea:	431d      	orrs	r5, r3
 80032ec:	6125      	str	r5, [r4, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 80032ee:	6923      	ldr	r3, [r4, #16]
 80032f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80032f4:	6123      	str	r3, [r4, #16]
    if (dma == 1U)
 80032f6:	2a01      	cmp	r2, #1
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)ep->xfer_buff;
 80032f8:	bf04      	itt	eq
 80032fa:	68cb      	ldreq	r3, [r1, #12]
 80032fc:	6163      	streq	r3, [r4, #20]
    if (ep->type == EP_TYPE_ISOC)
 80032fe:	78cb      	ldrb	r3, [r1, #3]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d10a      	bne.n	800331a <USB_EPStartXfer+0x152>
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 8003304:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8003308:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800330c:	6823      	ldr	r3, [r4, #0]
 800330e:	bf0c      	ite	eq
 8003310:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003314:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8003318:	6023      	str	r3, [r4, #0]
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800331a:	6823      	ldr	r3, [r4, #0]
 800331c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003320:	6023      	str	r3, [r4, #0]
  return HAL_OK;
 8003322:	e795      	b.n	8003250 <USB_EPStartXfer+0x88>
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19U));
 8003324:	4e0a      	ldr	r6, [pc, #40]	; (8003350 <USB_EPStartXfer+0x188>)
 8003326:	6927      	ldr	r7, [r4, #16]
      pktcnt = (ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket; 
 8003328:	442b      	add	r3, r5
 800332a:	3b01      	subs	r3, #1
 800332c:	fbb3 f3f5 	udiv	r3, r3, r5
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19U));
 8003330:	ea06 46c3 	and.w	r6, r6, r3, lsl #19
 8003334:	433e      	orrs	r6, r7
 8003336:	6126      	str	r6, [r4, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt));
 8003338:	b29b      	uxth	r3, r3
 800333a:	6926      	ldr	r6, [r4, #16]
 800333c:	435d      	muls	r5, r3
 800333e:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8003342:	4335      	orrs	r5, r6
 8003344:	6125      	str	r5, [r4, #16]
 8003346:	e7d6      	b.n	80032f6 <USB_EPStartXfer+0x12e>
    if (dma == 1U)
 8003348:	2a01      	cmp	r2, #1
 800334a:	d1ae      	bne.n	80032aa <USB_EPStartXfer+0xe2>
 800334c:	e759      	b.n	8003202 <USB_EPStartXfer+0x3a>
 800334e:	bf00      	nop
 8003350:	1ff80000 	.word	0x1ff80000

08003354 <USB_EP0StartXfer>:
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
  /* IN endpoint */
  if (ep->is_in == 1U)
 8003354:	784b      	ldrb	r3, [r1, #1]
 8003356:	2b01      	cmp	r3, #1
{
 8003358:	b570      	push	{r4, r5, r6, lr}
 800335a:	780b      	ldrb	r3, [r1, #0]
 800335c:	694d      	ldr	r5, [r1, #20]
  if (ep->is_in == 1U)
 800335e:	d143      	bne.n	80033e8 <USB_EP0StartXfer+0x94>
 8003360:	2420      	movs	r4, #32
 8003362:	f500 6610 	add.w	r6, r0, #2304	; 0x900
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8003366:	fb14 6303 	smlabb	r3, r4, r3, r6
 800336a:	691c      	ldr	r4, [r3, #16]
    if (ep->xfer_len == 0U)
 800336c:	b9cd      	cbnz	r5, 80033a2 <USB_EP0StartXfer+0x4e>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 800336e:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8003372:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8003376:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8003378:	691c      	ldr	r4, [r3, #16]
 800337a:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800337e:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 8003380:	691c      	ldr	r4, [r3, #16]
 8003382:	0ce4      	lsrs	r4, r4, #19
 8003384:	04e4      	lsls	r4, r4, #19
 8003386:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
    
    }
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);     
 8003388:	780d      	ldrb	r5, [r1, #0]
 800338a:	eb06 1345 	add.w	r3, r6, r5, lsl #5
    
    if (dma == 1)
 800338e:	2a01      	cmp	r2, #1
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);     
 8003390:	681c      	ldr	r4, [r3, #0]
 8003392:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8003396:	601c      	str	r4, [r3, #0]
    if (dma == 1)
 8003398:	d11b      	bne.n	80033d2 <USB_EP0StartXfer+0x7e>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800339a:	690a      	ldr	r2, [r1, #16]
 800339c:	615a      	str	r2, [r3, #20]
    
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
  }
  return HAL_OK;
}
 800339e:	2000      	movs	r0, #0
 80033a0:	bd70      	pop	{r4, r5, r6, pc}
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80033a2:	0ce4      	lsrs	r4, r4, #19
 80033a4:	04e4      	lsls	r4, r4, #19
 80033a6:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 80033a8:	691c      	ldr	r4, [r3, #16]
 80033aa:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 80033ae:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 80033b2:	611c      	str	r4, [r3, #16]
      if(ep->xfer_len > ep->maxpacket)
 80033b4:	688c      	ldr	r4, [r1, #8]
 80033b6:	42a5      	cmp	r5, r4
        ep->xfer_len = ep->maxpacket;
 80033b8:	bf88      	it	hi
 80033ba:	614c      	strhi	r4, [r1, #20]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 80033bc:	691c      	ldr	r4, [r3, #16]
 80033be:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 80033c2:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 80033c4:	694c      	ldr	r4, [r1, #20]
 80033c6:	691d      	ldr	r5, [r3, #16]
 80033c8:	f3c4 0412 	ubfx	r4, r4, #0, #19
 80033cc:	432c      	orrs	r4, r5
 80033ce:	611c      	str	r4, [r3, #16]
 80033d0:	e7da      	b.n	8003388 <USB_EP0StartXfer+0x34>
      if (ep->xfer_len > 0U)
 80033d2:	694b      	ldr	r3, [r1, #20]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d0e2      	beq.n	800339e <USB_EP0StartXfer+0x4a>
        USBx_DEVICE->DIEPEMPMSK |= 1U << (ep->num);
 80033d8:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 80033dc:	2301      	movs	r3, #1
 80033de:	40ab      	lsls	r3, r5
 80033e0:	4313      	orrs	r3, r2
 80033e2:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 80033e6:	e7da      	b.n	800339e <USB_EP0StartXfer+0x4a>
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 80033e8:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 80033ec:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80033f0:	6903      	ldr	r3, [r0, #16]
 80033f2:	0cdb      	lsrs	r3, r3, #19
 80033f4:	04db      	lsls	r3, r3, #19
 80033f6:	6103      	str	r3, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 80033f8:	6903      	ldr	r3, [r0, #16]
 80033fa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80033fe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003402:	6103      	str	r3, [r0, #16]
 8003404:	688b      	ldr	r3, [r1, #8]
    if (ep->xfer_len > 0U)
 8003406:	b105      	cbz	r5, 800340a <USB_EP0StartXfer+0xb6>
      ep->xfer_len = ep->maxpacket;
 8003408:	614b      	str	r3, [r1, #20]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 800340a:	6904      	ldr	r4, [r0, #16]
 800340c:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8003410:	6104      	str	r4, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 8003412:	6904      	ldr	r4, [r0, #16]
 8003414:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003418:	4323      	orrs	r3, r4
    if (dma == 1U)
 800341a:	2a01      	cmp	r2, #1
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 800341c:	6103      	str	r3, [r0, #16]
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800341e:	bf04      	itt	eq
 8003420:	68cb      	ldreq	r3, [r1, #12]
 8003422:	6143      	streq	r3, [r0, #20]
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
 8003424:	6803      	ldr	r3, [r0, #0]
 8003426:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800342a:	6003      	str	r3, [r0, #0]
 800342c:	e7b7      	b.n	800339e <USB_EP0StartXfer+0x4a>

0800342e <USB_WritePacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800342e:	b510      	push	{r4, lr}
 8003430:	f89d 4008 	ldrb.w	r4, [sp, #8]
  uint32_t count32b = 0U , i = 0U;
  
  if (dma == 0U)
 8003434:	b94c      	cbnz	r4, 800344a <USB_WritePacket+0x1c>
  {
    count32b =  (len + 3U) / 4U;
 8003436:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++, src += 4U)
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8003438:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 800343c:	f023 0303 	bic.w	r3, r3, #3
 8003440:	eb00 3202 	add.w	r2, r0, r2, lsl #12
 8003444:	440b      	add	r3, r1
    for (i = 0U; i < count32b; i++, src += 4U)
 8003446:	4299      	cmp	r1, r3
 8003448:	d101      	bne.n	800344e <USB_WritePacket+0x20>
    }
  }
  return HAL_OK;
}
 800344a:	2000      	movs	r0, #0
 800344c:	bd10      	pop	{r4, pc}
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 800344e:	f851 0b04 	ldr.w	r0, [r1], #4
 8003452:	6010      	str	r0, [r2, #0]
 8003454:	e7f7      	b.n	8003446 <USB_WritePacket+0x18>

08003456 <USB_ReadPacket>:
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
  uint32_t i=0U;
  uint32_t count32b = (len + 3U) / 4U;
 8003456:	3203      	adds	r2, #3
 8003458:	f022 0203 	bic.w	r2, r2, #3
 800345c:	440a      	add	r2, r1
  
  for ( i = 0U; i < count32b; i++, dest += 4U )
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 800345e:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for ( i = 0U; i < count32b; i++, dest += 4U )
 8003462:	4291      	cmp	r1, r2
 8003464:	d101      	bne.n	800346a <USB_ReadPacket+0x14>
    
  }
  return ((void *)dest);
}
 8003466:	4608      	mov	r0, r1
 8003468:	4770      	bx	lr
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 800346a:	6803      	ldr	r3, [r0, #0]
 800346c:	f841 3b04 	str.w	r3, [r1], #4
 8003470:	e7f7      	b.n	8003462 <USB_ReadPacket+0xc>

08003472 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1U)
 8003472:	784b      	ldrb	r3, [r1, #1]
 8003474:	780a      	ldrb	r2, [r1, #0]
 8003476:	2b01      	cmp	r3, #1
 8003478:	f04f 0320 	mov.w	r3, #32
 800347c:	d10b      	bne.n	8003496 <USB_EPSetStall+0x24>
  {
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == 0U)
 800347e:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 8003482:	fb13 0002 	smlabb	r0, r3, r2, r0
 8003486:	6803      	ldr	r3, [r0, #0]
 8003488:	2b00      	cmp	r3, #0
 800348a:	db0b      	blt.n	80034a4 <USB_EPSetStall+0x32>
  }
  else
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0U)
    {
      USBx_OUTEP(ep->num)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS); 
 800348c:	6803      	ldr	r3, [r0, #0]
 800348e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003492:	6003      	str	r3, [r0, #0]
 8003494:	e006      	b.n	80034a4 <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0U)
 8003496:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 800349a:	fb13 0002 	smlabb	r0, r3, r2, r0
 800349e:	6803      	ldr	r3, [r0, #0]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	daf3      	bge.n	800348c <USB_EPSetStall+0x1a>
    } 
    USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80034a4:	6803      	ldr	r3, [r0, #0]
 80034a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80034aa:	6003      	str	r3, [r0, #0]
  }
  return HAL_OK;
}
 80034ac:	2000      	movs	r0, #0
 80034ae:	4770      	bx	lr

080034b0 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1U)
 80034b0:	784b      	ldrb	r3, [r1, #1]
 80034b2:	780a      	ldrb	r2, [r1, #0]
 80034b4:	2b01      	cmp	r3, #1
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80034b6:	bf0c      	ite	eq
 80034b8:	f500 6010 	addeq.w	r0, r0, #2304	; 0x900
       USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
    }    
  }
  else
  {
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80034bc:	f500 6030 	addne.w	r0, r0, #2816	; 0xb00
 80034c0:	2320      	movs	r3, #32
 80034c2:	fb13 0002 	smlabb	r0, r3, r2, r0
 80034c6:	6803      	ldr	r3, [r0, #0]
 80034c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80034cc:	6003      	str	r3, [r0, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 80034ce:	78cb      	ldrb	r3, [r1, #3]
 80034d0:	3b02      	subs	r3, #2
 80034d2:	2b01      	cmp	r3, #1
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80034d4:	bf9e      	ittt	ls
 80034d6:	6803      	ldrls	r3, [r0, #0]
 80034d8:	f043 5380 	orrls.w	r3, r3, #268435456	; 0x10000000
 80034dc:	6003      	strls	r3, [r0, #0]
    }    
  }
  return HAL_OK;
}
 80034de:	2000      	movs	r0, #0
 80034e0:	4770      	bx	lr

080034e2 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 80034e2:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80034e6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80034ea:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= (address << 4U) & USB_OTG_DCFG_DAD ;
 80034ee:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80034f2:	0109      	lsls	r1, r1, #4
 80034f4:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 80034f8:	4319      	orrs	r1, r3
 80034fa:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  
  return HAL_OK;  
}
 80034fe:	2000      	movs	r0, #0
 8003500:	4770      	bx	lr

08003502 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_OTG_GlobalTypeDef *USBx)
{
 8003502:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS ;
 8003504:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8003508:	f023 0302 	bic.w	r3, r3, #2
 800350c:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8003510:	2003      	movs	r0, #3
 8003512:	f7fd fd6d 	bl	8000ff0 <HAL_Delay>
  
  return HAL_OK;  
}
 8003516:	2000      	movs	r0, #0
 8003518:	bd08      	pop	{r3, pc}

0800351a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_OTG_GlobalTypeDef *USBx)
{
 800351a:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ;
 800351c:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8003520:	f043 0302 	orr.w	r3, r3, #2
 8003524:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8003528:	2003      	movs	r0, #3
 800352a:	f7fd fd61 	bl	8000ff0 <HAL_Delay>
  
  return HAL_OK;  
}
 800352e:	2000      	movs	r0, #0
 8003530:	bd08      	pop	{r3, pc}

08003532 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v = 0U;
  
  v = USBx->GINTSTS;
 8003532:	6942      	ldr	r2, [r0, #20]
  v &= USBx->GINTMSK;
 8003534:	6980      	ldr	r0, [r0, #24]
  return v;  
}
 8003536:	4010      	ands	r0, r2
 8003538:	4770      	bx	lr

0800353a <USB_ReadDevAllOutEpInterrupt>:
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 800353a:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 800353e:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  v &= USBx_DEVICE->DAINTMSK;
 8003542:	69c0      	ldr	r0, [r0, #28]
 8003544:	4018      	ands	r0, r3
  return ((v & 0xffff0000U) >> 16U);
}
 8003546:	0c00      	lsrs	r0, r0, #16
 8003548:	4770      	bx	lr

0800354a <USB_ReadDevAllInEpInterrupt>:
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 800354a:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 800354e:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  v &= USBx_DEVICE->DAINTMSK;
 8003552:	69c0      	ldr	r0, [r0, #28]
 8003554:	4018      	ands	r0, r3
  return ((v & 0xFFFFU));
}
 8003556:	b280      	uxth	r0, r0
 8003558:	4770      	bx	lr

0800355a <USB_ReadDevOutEPInterrupt>:
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
  uint32_t v;
  v  = USBx_OUTEP(epnum)->DOEPINT;
 800355a:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 800355e:	eb03 1141 	add.w	r1, r3, r1, lsl #5
  v &= USBx_DEVICE->DOEPMSK;
 8003562:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  v  = USBx_OUTEP(epnum)->DOEPINT;
 8003566:	688a      	ldr	r2, [r1, #8]
  v &= USBx_DEVICE->DOEPMSK;
 8003568:	6940      	ldr	r0, [r0, #20]
  return v;
}
 800356a:	4010      	ands	r0, r2
 800356c:	4770      	bx	lr

0800356e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 800356e:	b510      	push	{r4, lr}
  uint32_t v, msk, emp;
  
  msk = USBx_DEVICE->DIEPMSK;
 8003570:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8003574:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  msk |= ((emp >> epnum) & 0x1U) << 7U;
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8003578:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> epnum) & 0x1U) << 7U;
 800357c:	40cb      	lsrs	r3, r1
  v = USBx_INEP(epnum)->DIEPINT & msk;
 800357e:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> epnum) & 0x1U) << 7U;
 8003582:	01db      	lsls	r3, r3, #7
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8003584:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> epnum) & 0x1U) << 7U;
 8003586:	b2db      	uxtb	r3, r3
 8003588:	4323      	orrs	r3, r4
  return v;
}
 800358a:	4018      	ands	r0, r3
 800358c:	bd10      	pop	{r4, pc}

0800358e <USB_GetMode>:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS ) & 0x1U);
 800358e:	6940      	ldr	r0, [r0, #20]
}
 8003590:	f000 0001 	and.w	r0, r0, #1
 8003594:	4770      	bx	lr

08003596 <USB_ActivateSetup>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup (USB_OTG_GlobalTypeDef *USBx)
{
  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8003596:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800359a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800359e:	f023 0307 	bic.w	r3, r3, #7
 80035a2:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 80035a6:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	f002 0206 	and.w	r2, r2, #6
 80035b0:	2a04      	cmp	r2, #4
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 80035b2:	bf02      	ittt	eq
 80035b4:	f8d0 2900 	ldreq.w	r2, [r0, #2304]	; 0x900
 80035b8:	f042 0203 	orreq.w	r2, r2, #3
 80035bc:	f8c0 2900 	streq.w	r2, [r0, #2304]	; 0x900
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80035c0:	685a      	ldr	r2, [r3, #4]
 80035c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035c6:	605a      	str	r2, [r3, #4]

  return HAL_OK;
}
 80035c8:	2000      	movs	r0, #0
 80035ca:	4770      	bx	lr

080035cc <USB_EP0_OutStart>:
  *           1 : DMA feature used  
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80035cc:	b510      	push	{r4, lr}
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80035ce:	2400      	movs	r4, #0
 80035d0:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U)) ;
 80035d4:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 80035d8:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 80035dc:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80035e0:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 80035e4:	f044 0418 	orr.w	r4, r4, #24
 80035e8:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 80035ec:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
  
  if (dma == 1U)
 80035f0:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80035f2:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 80035f6:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL = 0x80008000U;
 80035fa:	bf08      	it	eq
 80035fc:	f04f 2380 	moveq.w	r3, #2147516416	; 0x80008000
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 8003600:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8003604:	bf04      	itt	eq
 8003606:	f8c0 2b14 	streq.w	r2, [r0, #2836]	; 0xb14
    USBx_OUTEP(0U)->DOEPCTL = 0x80008000U;
 800360a:	f8c0 3b00 	streq.w	r3, [r0, #2816]	; 0xb00
  }
  
  return HAL_OK;  
}
 800360e:	2000      	movs	r0, #0
 8003610:	bd10      	pop	{r4, pc}
	...

08003614 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003614:	4b0a      	ldr	r3, [pc, #40]	; (8003640 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003616:	3b01      	subs	r3, #1
 8003618:	d101      	bne.n	800361e <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 800361a:	2003      	movs	r0, #3
 800361c:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800361e:	6902      	ldr	r2, [r0, #16]
 8003620:	2a00      	cmp	r2, #0
 8003622:	daf8      	bge.n	8003616 <USB_CoreReset+0x2>
  
  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003624:	6903      	ldr	r3, [r0, #16]
 8003626:	4a06      	ldr	r2, [pc, #24]	; (8003640 <USB_CoreReset+0x2c>)
 8003628:	f043 0301 	orr.w	r3, r3, #1
 800362c:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 800362e:	3a01      	subs	r2, #1
 8003630:	d0f3      	beq.n	800361a <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003632:	6903      	ldr	r3, [r0, #16]
 8003634:	f013 0301 	ands.w	r3, r3, #1
 8003638:	d1f9      	bne.n	800362e <USB_CoreReset+0x1a>
  
  return HAL_OK;
 800363a:	4618      	mov	r0, r3
}
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	00030d41 	.word	0x00030d41

08003644 <USBD_CDC_DataIn>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003644:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 8003648:	b11b      	cbz	r3, 8003652 <USBD_CDC_DataIn+0xe>
  {
    
    hcdc->TxState = 0;
 800364a:	2000      	movs	r0, #0
 800364c:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214

    return USBD_OK;
 8003650:	4770      	bx	lr
  }
  else
  {
    return USBD_FAIL;
 8003652:	2002      	movs	r0, #2
  }
}
 8003654:	4770      	bx	lr

08003656 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8003656:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
{ 
 800365a:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800365c:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8003660:	b15b      	cbz	r3, 800367a <USBD_CDC_EP0_RxReady+0x24>
 8003662:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8003666:	28ff      	cmp	r0, #255	; 0xff
 8003668:	d007      	beq.n	800367a <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8003670:	4621      	mov	r1, r4
 8003672:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF; 
 8003674:	23ff      	movs	r3, #255	; 0xff
 8003676:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
      
  }
  return USBD_OK;
}
 800367a:	2000      	movs	r0, #0
 800367c:	bd10      	pop	{r4, pc}
	...

08003680 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8003680:	2343      	movs	r3, #67	; 0x43
 8003682:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8003684:	4800      	ldr	r0, [pc, #0]	; (8003688 <USBD_CDC_GetFSCfgDesc+0x8>)
 8003686:	4770      	bx	lr
 8003688:	20000040 	.word	0x20000040

0800368c <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800368c:	2343      	movs	r3, #67	; 0x43
 800368e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8003690:	4800      	ldr	r0, [pc, #0]	; (8003694 <USBD_CDC_GetHSCfgDesc+0x8>)
 8003692:	4770      	bx	lr
 8003694:	20000084 	.word	0x20000084

08003698 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8003698:	2343      	movs	r3, #67	; 0x43
 800369a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 800369c:	4800      	ldr	r0, [pc, #0]	; (80036a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800369e:	4770      	bx	lr
 80036a0:	200000d4 	.word	0x200000d4

080036a4 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 80036a4:	230a      	movs	r3, #10
 80036a6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 80036a8:	4800      	ldr	r0, [pc, #0]	; (80036ac <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 80036aa:	4770      	bx	lr
 80036ac:	200000c8 	.word	0x200000c8

080036b0 <USBD_CDC_DataOut>:
{      
 80036b0:	b538      	push	{r3, r4, r5, lr}
 80036b2:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80036b4:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 80036b8:	f001 f8ac 	bl	8004814 <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 80036bc:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 80036c0:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 80036c4:	b14b      	cbz	r3, 80036da <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80036c6:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 80036ca:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 80036d4:	4798      	blx	r3
    return USBD_OK;
 80036d6:	2000      	movs	r0, #0
 80036d8:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 80036da:	2002      	movs	r0, #2
}
 80036dc:	bd38      	pop	{r3, r4, r5, pc}
	...

080036e0 <USBD_CDC_Setup>:
{
 80036e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80036e2:	780f      	ldrb	r7, [r1, #0]
 80036e4:	f017 0360 	ands.w	r3, r7, #96	; 0x60
{
 80036e8:	4606      	mov	r6, r0
 80036ea:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80036ec:	d023      	beq.n	8003736 <USBD_CDC_Setup+0x56>
 80036ee:	2b20      	cmp	r3, #32
 80036f0:	d119      	bne.n	8003726 <USBD_CDC_Setup+0x46>
    if (req->wLength)
 80036f2:	88ca      	ldrh	r2, [r1, #6]
 80036f4:	784b      	ldrb	r3, [r1, #1]
 80036f6:	b1c2      	cbz	r2, 800372a <USBD_CDC_Setup+0x4a>
      if (req->bmRequest & 0x80)
 80036f8:	0639      	lsls	r1, r7, #24
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80036fa:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
      if (req->bmRequest & 0x80)
 80036fe:	d50b      	bpl.n	8003718 <USBD_CDC_Setup+0x38>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003700:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
 8003704:	4618      	mov	r0, r3
 8003706:	688f      	ldr	r7, [r1, #8]
 8003708:	4629      	mov	r1, r5
 800370a:	47b8      	blx	r7
          USBD_CtlSendData (pdev, 
 800370c:	88e2      	ldrh	r2, [r4, #6]
 800370e:	4629      	mov	r1, r5
 8003710:	4630      	mov	r0, r6
      USBD_CtlSendData (pdev,
 8003712:	f000 fb9a 	bl	8003e4a <USBD_CtlSendData>
      break;
 8003716:	e006      	b.n	8003726 <USBD_CDC_Setup+0x46>
        hcdc->CmdOpCode = req->bRequest;
 8003718:	f885 3200 	strb.w	r3, [r5, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 800371c:	f885 2201 	strb.w	r2, [r5, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, 
 8003720:	4629      	mov	r1, r5
 8003722:	f000 fba7 	bl	8003e74 <USBD_CtlPrepareRx>
}
 8003726:	2000      	movs	r0, #0
 8003728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800372a:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
 800372e:	6884      	ldr	r4, [r0, #8]
 8003730:	4618      	mov	r0, r3
 8003732:	47a0      	blx	r4
 8003734:	e7f7      	b.n	8003726 <USBD_CDC_Setup+0x46>
    switch (req->bRequest)
 8003736:	784b      	ldrb	r3, [r1, #1]
 8003738:	2b0a      	cmp	r3, #10
 800373a:	d1f4      	bne.n	8003726 <USBD_CDC_Setup+0x46>
      USBD_CtlSendData (pdev,
 800373c:	2201      	movs	r2, #1
 800373e:	4901      	ldr	r1, [pc, #4]	; (8003744 <USBD_CDC_Setup+0x64>)
 8003740:	e7e7      	b.n	8003712 <USBD_CDC_Setup+0x32>
 8003742:	bf00      	nop
 8003744:	2000034c 	.word	0x2000034c

08003748 <USBD_CDC_DeInit>:
{
 8003748:	b510      	push	{r4, lr}
  USBD_LL_CloseEP(pdev,
 800374a:	2181      	movs	r1, #129	; 0x81
{
 800374c:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 800374e:	f000 fff9 	bl	8004744 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8003752:	2101      	movs	r1, #1
 8003754:	4620      	mov	r0, r4
 8003756:	f000 fff5 	bl	8004744 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 800375a:	2182      	movs	r1, #130	; 0x82
 800375c:	4620      	mov	r0, r4
 800375e:	f000 fff1 	bl	8004744 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 8003762:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8003766:	b153      	cbz	r3, 800377e <USBD_CDC_DeInit+0x36>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8003768:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8003770:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8003774:	f001 f8fc 	bl	8004970 <free>
    pdev->pClassData = NULL;
 8003778:	2300      	movs	r3, #0
 800377a:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 800377e:	2000      	movs	r0, #0
 8003780:	bd10      	pop	{r4, pc}

08003782 <USBD_CDC_Init>:
{
 8003782:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8003784:	7c03      	ldrb	r3, [r0, #16]
{
 8003786:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8003788:	bb7b      	cbnz	r3, 80037ea <USBD_CDC_Init+0x68>
    USBD_LL_OpenEP(pdev,
 800378a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800378e:	2202      	movs	r2, #2
 8003790:	2181      	movs	r1, #129	; 0x81
 8003792:	f000 ffc7 	bl	8004724 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8003796:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev,
 800379a:	2202      	movs	r2, #2
 800379c:	2101      	movs	r1, #1
 800379e:	4620      	mov	r0, r4
 80037a0:	f000 ffc0 	bl	8004724 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,
 80037a4:	2308      	movs	r3, #8
 80037a6:	2203      	movs	r2, #3
 80037a8:	2182      	movs	r1, #130	; 0x82
 80037aa:	4620      	mov	r0, r4
 80037ac:	f000 ffba 	bl	8004724 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 80037b0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80037b4:	f001 f8d4 	bl	8004960 <malloc>
 80037b8:	4606      	mov	r6, r0
 80037ba:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 80037be:	b320      	cbz	r0, 800380a <USBD_CDC_Init+0x88>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80037c0:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4798      	blx	r3
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80037c8:	7c27      	ldrb	r7, [r4, #16]
    hcdc->TxState =0;
 80037ca:	2500      	movs	r5, #0
 80037cc:	f8c6 5214 	str.w	r5, [r6, #532]	; 0x214
    hcdc->RxState =0;
 80037d0:	f8c6 5218 	str.w	r5, [r6, #536]	; 0x218
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80037d4:	b987      	cbnz	r7, 80037f8 <USBD_CDC_Init+0x76>
      USBD_LL_PrepareReceive(pdev,
 80037d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037da:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 80037de:	2101      	movs	r1, #1
 80037e0:	4620      	mov	r0, r4
 80037e2:	f001 f809 	bl	80047f8 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 80037e6:	4638      	mov	r0, r7
 80037e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    USBD_LL_OpenEP(pdev,
 80037ea:	2340      	movs	r3, #64	; 0x40
 80037ec:	2202      	movs	r2, #2
 80037ee:	2181      	movs	r1, #129	; 0x81
 80037f0:	f000 ff98 	bl	8004724 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 80037f4:	2340      	movs	r3, #64	; 0x40
 80037f6:	e7d0      	b.n	800379a <USBD_CDC_Init+0x18>
      USBD_LL_PrepareReceive(pdev,
 80037f8:	2340      	movs	r3, #64	; 0x40
 80037fa:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 80037fe:	2101      	movs	r1, #1
 8003800:	4620      	mov	r0, r4
 8003802:	f000 fff9 	bl	80047f8 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 8003806:	4628      	mov	r0, r5
 8003808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret = 1; 
 800380a:	2001      	movs	r0, #1
}
 800380c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800380e <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
  
  if(fops != NULL)
 800380e:	b119      	cbz	r1, 8003818 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 8003810:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;    
 8003814:	2000      	movs	r0, #0
 8003816:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8003818:	2002      	movs	r0, #2
  }
  
  return ret;
}
 800381a:	4770      	bx	lr

0800381c <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800381c:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;  
  
  return USBD_OK;  
}
 8003820:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8003822:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 8003826:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 800382a:	4770      	bx	lr

0800382c <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  hcdc->RxBuffer = pbuff;
 800382c:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  return USBD_OK;
}
 8003830:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8003832:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8003836:	4770      	bx	lr

08003838 <USBD_CDC_TransmitPacket>:
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003838:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{      
 800383c:	b510      	push	{r4, lr}
  
  if(pdev->pClassData != NULL)
 800383e:	b172      	cbz	r2, 800385e <USBD_CDC_TransmitPacket+0x26>
  {
    if(hcdc->TxState == 0)
 8003840:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 8003844:	2301      	movs	r3, #1
 8003846:	b964      	cbnz	r4, 8003862 <USBD_CDC_TransmitPacket+0x2a>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 8003848:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 800384c:	2181      	movs	r1, #129	; 0x81
 800384e:	f8b2 3210 	ldrh.w	r3, [r2, #528]	; 0x210
 8003852:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 8003856:	f000 ffc1 	bl	80047dc <USBD_LL_Transmit>
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
      
      return USBD_OK;
 800385a:	4620      	mov	r0, r4
 800385c:	bd10      	pop	{r4, pc}
      return USBD_BUSY;
    }
  }
  else
  {
    return USBD_FAIL;
 800385e:	2002      	movs	r0, #2
 8003860:	bd10      	pop	{r4, pc}
      return USBD_BUSY;
 8003862:	4618      	mov	r0, r3
  }
}
 8003864:	bd10      	pop	{r4, pc}

08003866 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003866:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{      
 800386a:	b510      	push	{r4, lr}
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800386c:	b162      	cbz	r2, 8003888 <USBD_CDC_ReceivePacket+0x22>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800386e:	7c04      	ldrb	r4, [r0, #16]
 8003870:	b944      	cbnz	r4, 8003884 <USBD_CDC_ReceivePacket+0x1e>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8003872:	f44f 7300 	mov.w	r3, #512	; 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8003876:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800387a:	2101      	movs	r1, #1
 800387c:	f000 ffbc 	bl	80047f8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8003880:	2000      	movs	r0, #0
 8003882:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8003884:	2340      	movs	r3, #64	; 0x40
 8003886:	e7f6      	b.n	8003876 <USBD_CDC_ReceivePacket+0x10>
  }
  else
  {
    return USBD_FAIL;
 8003888:	2002      	movs	r0, #2
  }
}
 800388a:	bd10      	pop	{r4, pc}

0800388c <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800388c:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800388e:	b180      	cbz	r0, 80038b2 <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8003890:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003894:	b113      	cbz	r3, 800389c <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8003896:	2300      	movs	r3, #0
 8003898:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800389c:	b109      	cbz	r1, 80038a2 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800389e:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80038a2:	2301      	movs	r3, #1
 80038a4:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  pdev->id = id;
 80038a8:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80038aa:	f000 fefd 	bl	80046a8 <USBD_LL_Init>
  
  return USBD_OK; 
 80038ae:	2000      	movs	r0, #0
 80038b0:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 80038b2:	2002      	movs	r0, #2
}
 80038b4:	bd08      	pop	{r3, pc}

080038b6 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 80038b6:	b119      	cbz	r1, 80038c0 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80038b8:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 80038bc:	2000      	movs	r0, #0
 80038be:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 80038c0:	2002      	movs	r0, #2
  }
  
  return status;
}
 80038c2:	4770      	bx	lr

080038c4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80038c4:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 80038c6:	f000 ff1f 	bl	8004708 <USBD_LL_Start>
  
  return USBD_OK;  
}
 80038ca:	2000      	movs	r0, #0
 80038cc:	bd08      	pop	{r3, pc}

080038ce <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80038ce:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 80038d0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80038d4:	b90b      	cbnz	r3, 80038da <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80038d6:	2002      	movs	r0, #2
 80038d8:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4798      	blx	r3
 80038de:	2800      	cmp	r0, #0
 80038e0:	d1f9      	bne.n	80038d6 <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 80038e2:	bd08      	pop	{r3, pc}

080038e4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80038e4:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 80038e6:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	4798      	blx	r3
  return USBD_OK;
}
 80038ee:	2000      	movs	r0, #0
 80038f0:	bd08      	pop	{r3, pc}

080038f2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80038f2:	b538      	push	{r3, r4, r5, lr}
 80038f4:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80038f6:	f500 7502 	add.w	r5, r0, #520	; 0x208
 80038fa:	4628      	mov	r0, r5
 80038fc:	f000 fa75 	bl	8003dea <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8003900:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 8003902:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_state = USBD_EP0_SETUP;
 8003906:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 800390a:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 800390e:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  switch (pdev->request.bmRequest & 0x1F) 
 8003912:	f001 031f 	and.w	r3, r1, #31
 8003916:	2b01      	cmp	r3, #1
 8003918:	d00e      	beq.n	8003938 <USBD_LL_SetupStage+0x46>
 800391a:	d307      	bcc.n	800392c <USBD_LL_SetupStage+0x3a>
 800391c:	2b02      	cmp	r3, #2
 800391e:	d010      	beq.n	8003942 <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8003920:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8003924:	4620      	mov	r0, r4
 8003926:	f000 ff1b 	bl	8004760 <USBD_LL_StallEP>
    break;
 800392a:	e003      	b.n	8003934 <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 800392c:	4629      	mov	r1, r5
 800392e:	4620      	mov	r0, r4
 8003930:	f000 f8e6 	bl	8003b00 <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 8003934:	2000      	movs	r0, #0
 8003936:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8003938:	4629      	mov	r1, r5
 800393a:	4620      	mov	r0, r4
 800393c:	f000 f9da 	bl	8003cf4 <USBD_StdItfReq>
    break;
 8003940:	e7f8      	b.n	8003934 <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 8003942:	4629      	mov	r1, r5
 8003944:	4620      	mov	r0, r4
 8003946:	f000 f9ed 	bl	8003d24 <USBD_StdEPReq>
    break;
 800394a:	e7f3      	b.n	8003934 <USBD_LL_SetupStage+0x42>

0800394c <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 800394c:	b538      	push	{r3, r4, r5, lr}
 800394e:	4604      	mov	r4, r0
 8003950:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8003952:	bb11      	cbnz	r1, 800399a <USBD_LL_DataOutStage+0x4e>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8003954:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 8003958:	2b03      	cmp	r3, #3
 800395a:	d10f      	bne.n	800397c <USBD_LL_DataOutStage+0x30>
    {
      if(pep->rem_length > pep->maxpacket)
 800395c:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 8003960:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 8003964:	4293      	cmp	r3, r2
 8003966:	d90b      	bls.n	8003980 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 8003968:	1a9b      	subs	r3, r3, r2
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 800396a:	429a      	cmp	r2, r3
 800396c:	bf28      	it	cs
 800396e:	461a      	movcs	r2, r3
        pep->rem_length -=  pep->maxpacket;
 8003970:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
        USBD_CtlContinueRx (pdev, 
 8003974:	b292      	uxth	r2, r2
 8003976:	4629      	mov	r1, r5
 8003978:	f000 fa8b 	bl	8003e92 <USBD_CtlContinueRx>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 800397c:	2000      	movs	r0, #0
 800397e:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8003980:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	b123      	cbz	r3, 8003992 <USBD_LL_DataOutStage+0x46>
 8003988:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800398c:	2a03      	cmp	r2, #3
 800398e:	d100      	bne.n	8003992 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev); 
 8003990:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8003992:	4620      	mov	r0, r4
 8003994:	f000 fa85 	bl	8003ea2 <USBD_CtlSendStatus>
 8003998:	e7f0      	b.n	800397c <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL)&&
 800399a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800399e:	699b      	ldr	r3, [r3, #24]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d0eb      	beq.n	800397c <USBD_LL_DataOutStage+0x30>
 80039a4:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80039a8:	2a03      	cmp	r2, #3
 80039aa:	d1e7      	bne.n	800397c <USBD_LL_DataOutStage+0x30>
    pdev->pClass->DataOut(pdev, epnum); 
 80039ac:	4798      	blx	r3
 80039ae:	e7e5      	b.n	800397c <USBD_LL_DataOutStage+0x30>

080039b0 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 80039b0:	b570      	push	{r4, r5, r6, lr}
 80039b2:	4613      	mov	r3, r2
 80039b4:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 80039b6:	460e      	mov	r6, r1
 80039b8:	2900      	cmp	r1, #0
 80039ba:	d13d      	bne.n	8003a38 <USBD_LL_DataInStage+0x88>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80039bc:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 80039c0:	2a02      	cmp	r2, #2
 80039c2:	d10f      	bne.n	80039e4 <USBD_LL_DataInStage+0x34>
    {
      if(pep->rem_length > pep->maxpacket)
 80039c4:	69c5      	ldr	r5, [r0, #28]
 80039c6:	6a02      	ldr	r2, [r0, #32]
 80039c8:	4295      	cmp	r5, r2
 80039ca:	d914      	bls.n	80039f6 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -=  pep->maxpacket;
 80039cc:	1aaa      	subs	r2, r5, r2
 80039ce:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 80039d0:	4619      	mov	r1, r3
 80039d2:	b292      	uxth	r2, r2
 80039d4:	f000 fa46 	bl	8003e64 <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 80039d8:	4633      	mov	r3, r6
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
          pdev->ep0_data_len = 0;
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 80039da:	461a      	mov	r2, r3
 80039dc:	4619      	mov	r1, r3
 80039de:	4620      	mov	r0, r4
 80039e0:	f000 ff0a 	bl	80047f8 <USBD_LL_PrepareReceive>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 80039e4:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d102      	bne.n	80039f2 <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 80039ec:	2300      	movs	r3, #0
 80039ee:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 80039f2:	2000      	movs	r0, #0
 80039f4:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0) &&
 80039f6:	6983      	ldr	r3, [r0, #24]
 80039f8:	fbb3 f5f2 	udiv	r5, r3, r2
 80039fc:	fb02 3515 	mls	r5, r2, r5, r3
 8003a00:	b965      	cbnz	r5, 8003a1c <USBD_LL_DataInStage+0x6c>
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d80a      	bhi.n	8003a1c <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 8003a06:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d206      	bcs.n	8003a1c <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8003a0e:	462a      	mov	r2, r5
 8003a10:	f000 fa28 	bl	8003e64 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8003a14:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 8003a18:	462b      	mov	r3, r5
 8003a1a:	e7de      	b.n	80039da <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8003a1c:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	b12b      	cbz	r3, 8003a30 <USBD_LL_DataInStage+0x80>
 8003a24:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 8003a28:	2a03      	cmp	r2, #3
 8003a2a:	d101      	bne.n	8003a30 <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev); 
 8003a2c:	4620      	mov	r0, r4
 8003a2e:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 8003a30:	4620      	mov	r0, r4
 8003a32:	f000 fa41 	bl	8003eb8 <USBD_CtlReceiveStatus>
 8003a36:	e7d5      	b.n	80039e4 <USBD_LL_DataInStage+0x34>
  else if((pdev->pClass->DataIn != NULL)&& 
 8003a38:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d0d7      	beq.n	80039f2 <USBD_LL_DataInStage+0x42>
 8003a42:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003a46:	2a03      	cmp	r2, #3
 8003a48:	d1d3      	bne.n	80039f2 <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum); 
 8003a4a:	4798      	blx	r3
 8003a4c:	e7d1      	b.n	80039f2 <USBD_LL_DataInStage+0x42>

08003a4e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8003a4e:	b538      	push	{r3, r4, r5, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8003a50:	2200      	movs	r2, #0
{
 8003a52:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev,
 8003a54:	4611      	mov	r1, r2
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003a56:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev,
 8003a58:	2340      	movs	r3, #64	; 0x40
 8003a5a:	f000 fe63 	bl	8004724 <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8003a5e:	462b      	mov	r3, r5
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003a60:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev,
 8003a64:	2200      	movs	r2, #0
 8003a66:	2180      	movs	r1, #128	; 0x80
 8003a68:	4620      	mov	r0, r4
 8003a6a:	f000 fe5b 	bl	8004724 <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8003a74:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8003a78:	6225      	str	r5, [r4, #32]
  if (pdev->pClassData) 
 8003a7a:	b12b      	cbz	r3, 8003a88 <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8003a7c:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8003a80:	7921      	ldrb	r1, [r4, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	4620      	mov	r0, r4
 8003a86:	4798      	blx	r3
 
  
  return USBD_OK;
}
 8003a88:	2000      	movs	r0, #0
 8003a8a:	bd38      	pop	{r3, r4, r5, pc}

08003a8c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8003a8c:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8003a8e:	2000      	movs	r0, #0
 8003a90:	4770      	bx	lr

08003a92 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8003a92:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003a96:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8003a9a:	2304      	movs	r3, #4
 8003a9c:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8003aa0:	2000      	movs	r0, #0
 8003aa2:	4770      	bx	lr

08003aa4 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 8003aa4:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 8003aa8:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8003aac:	2000      	movs	r0, #0
 8003aae:	4770      	bx	lr

08003ab0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8003ab0:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8003ab2:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003ab6:	2a03      	cmp	r2, #3
 8003ab8:	d104      	bne.n	8003ac4 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 8003aba:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003abe:	69db      	ldr	r3, [r3, #28]
 8003ac0:	b103      	cbz	r3, 8003ac4 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8003ac2:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8003ac4:	2000      	movs	r0, #0
 8003ac6:	bd08      	pop	{r3, pc}

08003ac8 <USBD_LL_IsoINIncomplete>:
 8003ac8:	2000      	movs	r0, #0
 8003aca:	4770      	bx	lr

08003acc <USBD_LL_IsoOUTIncomplete>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
  return USBD_OK;
}
 8003acc:	2000      	movs	r0, #0
 8003ace:	4770      	bx	lr

08003ad0 <USBD_LL_DevConnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
  return USBD_OK;
}
 8003ad0:	2000      	movs	r0, #0
 8003ad2:	4770      	bx	lr

08003ad4 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8003ad4:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f880 21fc 	strb.w	r2, [r0, #508]	; 0x1fc
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8003adc:	f8d0 2214 	ldr.w	r2, [r0, #532]	; 0x214
 8003ae0:	7901      	ldrb	r1, [r0, #4]
 8003ae2:	6852      	ldr	r2, [r2, #4]
 8003ae4:	4790      	blx	r2
   
  return USBD_OK;
}
 8003ae6:	2000      	movs	r0, #0
 8003ae8:	bd08      	pop	{r3, pc}

08003aea <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8003aea:	b510      	push	{r4, lr}
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 8003aec:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8003aee:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 8003af0:	f000 fe36 	bl	8004760 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8003af4:	4620      	mov	r0, r4
 8003af6:	2100      	movs	r1, #0
}
 8003af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 8003afc:	f000 be30 	b.w	8004760 <USBD_LL_StallEP>

08003b00 <USBD_StdDevReq>:
{
 8003b00:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bRequest) 
 8003b02:	784b      	ldrb	r3, [r1, #1]
{
 8003b04:	4604      	mov	r4, r0
 8003b06:	460d      	mov	r5, r1
  switch (req->bRequest) 
 8003b08:	2b09      	cmp	r3, #9
 8003b0a:	d879      	bhi.n	8003c00 <USBD_StdDevReq+0x100>
 8003b0c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003b10:	00e500c9 	.word	0x00e500c9
 8003b14:	00d90078 	.word	0x00d90078
 8003b18:	006d0078 	.word	0x006d0078
 8003b1c:	0078000a 	.word	0x0078000a
 8003b20:	008d00b9 	.word	0x008d00b9
  switch (req->wValue >> 8)
 8003b24:	884b      	ldrh	r3, [r1, #2]
 8003b26:	0a1a      	lsrs	r2, r3, #8
 8003b28:	3a01      	subs	r2, #1
 8003b2a:	2a06      	cmp	r2, #6
 8003b2c:	d868      	bhi.n	8003c00 <USBD_StdDevReq+0x100>
 8003b2e:	e8df f002 	tbb	[pc, r2]
 8003b32:	1c04      	.short	0x1c04
 8003b34:	49676729 	.word	0x49676729
 8003b38:	52          	.byte	0x52
 8003b39:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8003b3a:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003b3e:	681b      	ldr	r3, [r3, #0]
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8003b40:	7c20      	ldrb	r0, [r4, #16]
 8003b42:	f10d 0106 	add.w	r1, sp, #6
 8003b46:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 8003b48:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8003b4c:	2a00      	cmp	r2, #0
 8003b4e:	d067      	beq.n	8003c20 <USBD_StdDevReq+0x120>
 8003b50:	88eb      	ldrh	r3, [r5, #6]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d064      	beq.n	8003c20 <USBD_StdDevReq+0x120>
    len = MIN(len , req->wLength);
 8003b56:	429a      	cmp	r2, r3
 8003b58:	bf28      	it	cs
 8003b5a:	461a      	movcs	r2, r3
 8003b5c:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 8003b60:	4601      	mov	r1, r0
    USBD_CtlSendData (pdev, 
 8003b62:	4620      	mov	r0, r4
 8003b64:	f000 f971 	bl	8003e4a <USBD_CtlSendData>
 8003b68:	e05a      	b.n	8003c20 <USBD_StdDevReq+0x120>
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8003b6a:	7c02      	ldrb	r2, [r0, #16]
 8003b6c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003b70:	b932      	cbnz	r2, 8003b80 <USBD_StdDevReq+0x80>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8003b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8003b74:	f10d 0006 	add.w	r0, sp, #6
 8003b78:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8003b7a:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003b7c:	7043      	strb	r3, [r0, #1]
 8003b7e:	e7e3      	b.n	8003b48 <USBD_StdDevReq+0x48>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8003b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b82:	e7f7      	b.n	8003b74 <USBD_StdDevReq+0x74>
    switch ((uint8_t)(req->wValue))
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	2b05      	cmp	r3, #5
 8003b88:	d83a      	bhi.n	8003c00 <USBD_StdDevReq+0x100>
 8003b8a:	e8df f003 	tbb	[pc, r3]
 8003b8e:	0703      	.short	0x0703
 8003b90:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8003b94:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	e7d1      	b.n	8003b40 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8003b9c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	e7cd      	b.n	8003b40 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8003ba4:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	e7c9      	b.n	8003b40 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8003bac:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	e7c5      	b.n	8003b40 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8003bb4:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	e7c1      	b.n	8003b40 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8003bbc:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003bc0:	699b      	ldr	r3, [r3, #24]
 8003bc2:	e7bd      	b.n	8003b40 <USBD_StdDevReq+0x40>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8003bc4:	7c03      	ldrb	r3, [r0, #16]
 8003bc6:	b9db      	cbnz	r3, 8003c00 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8003bc8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003bcc:	f10d 0006 	add.w	r0, sp, #6
 8003bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bd2:	4798      	blx	r3
 8003bd4:	e7b8      	b.n	8003b48 <USBD_StdDevReq+0x48>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8003bd6:	7c03      	ldrb	r3, [r0, #16]
 8003bd8:	b993      	cbnz	r3, 8003c00 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8003bda:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003bde:	f10d 0006 	add.w	r0, sp, #6
 8003be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be4:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003be6:	2307      	movs	r3, #7
 8003be8:	e7c8      	b.n	8003b7c <USBD_StdDevReq+0x7c>
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8003bea:	888b      	ldrh	r3, [r1, #4]
 8003bec:	b943      	cbnz	r3, 8003c00 <USBD_StdDevReq+0x100>
 8003bee:	88cb      	ldrh	r3, [r1, #6]
 8003bf0:	b933      	cbnz	r3, 8003c00 <USBD_StdDevReq+0x100>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8003bf2:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8003bf6:	788d      	ldrb	r5, [r1, #2]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8003bf8:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8003bfa:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8003bfe:	d103      	bne.n	8003c08 <USBD_StdDevReq+0x108>
    USBD_CtlError(pdev , req);
 8003c00:	4620      	mov	r0, r4
 8003c02:	f7ff ff72 	bl	8003aea <USBD_CtlError.constprop.0>
    break;
 8003c06:	e00b      	b.n	8003c20 <USBD_StdDevReq+0x120>
      pdev->dev_address = dev_addr;
 8003c08:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8003c0c:	4629      	mov	r1, r5
 8003c0e:	f000 fdd7 	bl	80047c0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8003c12:	4620      	mov	r0, r4
 8003c14:	f000 f945 	bl	8003ea2 <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 8003c18:	b12d      	cbz	r5, 8003c26 <USBD_StdDevReq+0x126>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8003c1a:	2302      	movs	r3, #2
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8003c1c:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
}
 8003c20:	2000      	movs	r0, #0
 8003c22:	b003      	add	sp, #12
 8003c24:	bd30      	pop	{r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8003c26:	2301      	movs	r3, #1
 8003c28:	e7f8      	b.n	8003c1c <USBD_StdDevReq+0x11c>
  cfgidx = (uint8_t)(req->wValue);                 
 8003c2a:	7889      	ldrb	r1, [r1, #2]
 8003c2c:	4d30      	ldr	r5, [pc, #192]	; (8003cf0 <USBD_StdDevReq+0x1f0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8003c2e:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 8003c30:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8003c32:	d8e5      	bhi.n	8003c00 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state) 
 8003c34:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d00c      	beq.n	8003c56 <USBD_StdDevReq+0x156>
 8003c3c:	2b03      	cmp	r3, #3
 8003c3e:	d1df      	bne.n	8003c00 <USBD_StdDevReq+0x100>
      if (cfgidx == 0) 
 8003c40:	b9b1      	cbnz	r1, 8003c70 <USBD_StdDevReq+0x170>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8003c42:	2302      	movs	r3, #2
 8003c44:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 8003c48:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 8003c4a:	f7ff fe4b 	bl	80038e4 <USBD_ClrClassConfig>
      USBD_CtlSendStatus(pdev);
 8003c4e:	4620      	mov	r0, r4
 8003c50:	f000 f927 	bl	8003ea2 <USBD_CtlSendStatus>
 8003c54:	e7e4      	b.n	8003c20 <USBD_StdDevReq+0x120>
      if (cfgidx) 
 8003c56:	2900      	cmp	r1, #0
 8003c58:	d0f9      	beq.n	8003c4e <USBD_StdDevReq+0x14e>
        pdev->dev_config = cfgidx;
 8003c5a:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8003c5c:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 8003c5e:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8003c60:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8003c64:	4620      	mov	r0, r4
 8003c66:	f7ff fe32 	bl	80038ce <USBD_SetClassConfig>
 8003c6a:	2802      	cmp	r0, #2
 8003c6c:	d1ef      	bne.n	8003c4e <USBD_StdDevReq+0x14e>
 8003c6e:	e7c7      	b.n	8003c00 <USBD_StdDevReq+0x100>
      else  if (cfgidx != pdev->dev_config) 
 8003c70:	6841      	ldr	r1, [r0, #4]
 8003c72:	2901      	cmp	r1, #1
 8003c74:	d0eb      	beq.n	8003c4e <USBD_StdDevReq+0x14e>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8003c76:	b2c9      	uxtb	r1, r1
 8003c78:	f7ff fe34 	bl	80038e4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8003c7c:	7829      	ldrb	r1, [r5, #0]
 8003c7e:	6061      	str	r1, [r4, #4]
 8003c80:	e7f0      	b.n	8003c64 <USBD_StdDevReq+0x164>
  if (req->wLength != 1) 
 8003c82:	88ca      	ldrh	r2, [r1, #6]
 8003c84:	2a01      	cmp	r2, #1
 8003c86:	d1bb      	bne.n	8003c00 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state )  
 8003c88:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d003      	beq.n	8003c98 <USBD_StdDevReq+0x198>
 8003c90:	2b03      	cmp	r3, #3
 8003c92:	d1b5      	bne.n	8003c00 <USBD_StdDevReq+0x100>
      USBD_CtlSendData (pdev, 
 8003c94:	1d01      	adds	r1, r0, #4
 8003c96:	e764      	b.n	8003b62 <USBD_StdDevReq+0x62>
      pdev->dev_default_config = 0;
 8003c98:	4601      	mov	r1, r0
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	f841 3f08 	str.w	r3, [r1, #8]!
 8003ca0:	e75f      	b.n	8003b62 <USBD_StdDevReq+0x62>
  switch (pdev->dev_state) 
 8003ca2:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003ca6:	3b02      	subs	r3, #2
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d8a9      	bhi.n	8003c00 <USBD_StdDevReq+0x100>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8003cac:	2301      	movs	r3, #1
 8003cae:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 8003cb0:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8003cb4:	b10b      	cbz	r3, 8003cba <USBD_StdDevReq+0x1ba>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 8003cba:	2202      	movs	r2, #2
 8003cbc:	f104 010c 	add.w	r1, r4, #12
 8003cc0:	e74f      	b.n	8003b62 <USBD_StdDevReq+0x62>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8003cc2:	884b      	ldrh	r3, [r1, #2]
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d1ab      	bne.n	8003c20 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 8003cc8:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8003ccc:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8003cd0:	4629      	mov	r1, r5
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	4620      	mov	r0, r4
 8003cd6:	4798      	blx	r3
 8003cd8:	e7b9      	b.n	8003c4e <USBD_StdDevReq+0x14e>
  switch (pdev->dev_state)
 8003cda:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003cde:	3b02      	subs	r3, #2
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d88d      	bhi.n	8003c00 <USBD_StdDevReq+0x100>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8003ce4:	884b      	ldrh	r3, [r1, #2]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d19a      	bne.n	8003c20 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 8003cea:	2300      	movs	r3, #0
 8003cec:	e7ec      	b.n	8003cc8 <USBD_StdDevReq+0x1c8>
 8003cee:	bf00      	nop
 8003cf0:	2000034d 	.word	0x2000034d

08003cf4 <USBD_StdItfReq>:
{
 8003cf4:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev_state) 
 8003cf6:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003cfa:	2b03      	cmp	r3, #3
{
 8003cfc:	4604      	mov	r4, r0
 8003cfe:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 8003d00:	d10d      	bne.n	8003d1e <USBD_StdItfReq+0x2a>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8003d02:	790b      	ldrb	r3, [r1, #4]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d80a      	bhi.n	8003d1e <USBD_StdItfReq+0x2a>
      pdev->pClass->Setup (pdev, req); 
 8003d08:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 8003d10:	88eb      	ldrh	r3, [r5, #6]
 8003d12:	b913      	cbnz	r3, 8003d1a <USBD_StdItfReq+0x26>
         USBD_CtlSendStatus(pdev);
 8003d14:	4620      	mov	r0, r4
 8003d16:	f000 f8c4 	bl	8003ea2 <USBD_CtlSendStatus>
}
 8003d1a:	2000      	movs	r0, #0
 8003d1c:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);
 8003d1e:	f7ff fee4 	bl	8003aea <USBD_CtlError.constprop.0>
    break;
 8003d22:	e7fa      	b.n	8003d1a <USBD_StdItfReq+0x26>

08003d24 <USBD_StdEPReq>:
{
 8003d24:	b570      	push	{r4, r5, r6, lr}
  if ((req->bmRequest & 0x60) == 0x20)
 8003d26:	780a      	ldrb	r2, [r1, #0]
  ep_addr  = LOBYTE(req->wIndex);   
 8003d28:	888e      	ldrh	r6, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 8003d2a:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8003d2e:	2a20      	cmp	r2, #32
{
 8003d30:	4604      	mov	r4, r0
 8003d32:	460d      	mov	r5, r1
  ep_addr  = LOBYTE(req->wIndex);   
 8003d34:	b2f3      	uxtb	r3, r6
  if ((req->bmRequest & 0x60) == 0x20)
 8003d36:	d105      	bne.n	8003d44 <USBD_StdEPReq+0x20>
    pdev->pClass->Setup (pdev, req);
 8003d38:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	4798      	blx	r3
}
 8003d40:	2000      	movs	r0, #0
 8003d42:	bd70      	pop	{r4, r5, r6, pc}
  switch (req->bRequest) 
 8003d44:	784a      	ldrb	r2, [r1, #1]
 8003d46:	2a01      	cmp	r2, #1
 8003d48:	d01c      	beq.n	8003d84 <USBD_StdEPReq+0x60>
 8003d4a:	d32a      	bcc.n	8003da2 <USBD_StdEPReq+0x7e>
 8003d4c:	2a03      	cmp	r2, #3
 8003d4e:	d1f7      	bne.n	8003d40 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8003d50:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003d54:	2a02      	cmp	r2, #2
 8003d56:	d040      	beq.n	8003dda <USBD_StdEPReq+0xb6>
 8003d58:	2a03      	cmp	r2, #3
 8003d5a:	d002      	beq.n	8003d62 <USBD_StdEPReq+0x3e>
      USBD_CtlError(pdev , req);
 8003d5c:	f7ff fec5 	bl	8003aea <USBD_CtlError.constprop.0>
      break;
 8003d60:	e7ee      	b.n	8003d40 <USBD_StdEPReq+0x1c>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8003d62:	884a      	ldrh	r2, [r1, #2]
 8003d64:	b922      	cbnz	r2, 8003d70 <USBD_StdEPReq+0x4c>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8003d66:	065e      	lsls	r6, r3, #25
 8003d68:	d002      	beq.n	8003d70 <USBD_StdEPReq+0x4c>
          USBD_LL_StallEP(pdev , ep_addr);
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	f000 fcf8 	bl	8004760 <USBD_LL_StallEP>
          pdev->pClass->Setup (pdev, req);
 8003d70:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8003d74:	4629      	mov	r1, r5
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	4620      	mov	r0, r4
 8003d7a:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8003d7c:	4620      	mov	r0, r4
 8003d7e:	f000 f890 	bl	8003ea2 <USBD_CtlSendStatus>
 8003d82:	e7dd      	b.n	8003d40 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8003d84:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003d88:	2a02      	cmp	r2, #2
 8003d8a:	d026      	beq.n	8003dda <USBD_StdEPReq+0xb6>
 8003d8c:	2a03      	cmp	r2, #3
 8003d8e:	d1e5      	bne.n	8003d5c <USBD_StdEPReq+0x38>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8003d90:	884a      	ldrh	r2, [r1, #2]
 8003d92:	2a00      	cmp	r2, #0
 8003d94:	d1d4      	bne.n	8003d40 <USBD_StdEPReq+0x1c>
        if ((ep_addr & 0x7F) != 0x00) 
 8003d96:	0659      	lsls	r1, r3, #25
 8003d98:	d0f0      	beq.n	8003d7c <USBD_StdEPReq+0x58>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	f000 fcee 	bl	800477c <USBD_LL_ClearStallEP>
 8003da0:	e7e6      	b.n	8003d70 <USBD_StdEPReq+0x4c>
    switch (pdev->dev_state) 
 8003da2:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003da6:	2a02      	cmp	r2, #2
 8003da8:	d017      	beq.n	8003dda <USBD_StdEPReq+0xb6>
 8003daa:	2a03      	cmp	r2, #3
 8003dac:	d1d6      	bne.n	8003d5c <USBD_StdEPReq+0x38>
 8003dae:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8003db2:	f016 0f80 	tst.w	r6, #128	; 0x80
 8003db6:	eb00 1505 	add.w	r5, r0, r5, lsl #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8003dba:	4619      	mov	r1, r3
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8003dbc:	bf14      	ite	ne
 8003dbe:	3514      	addne	r5, #20
 8003dc0:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8003dc4:	f000 fce8 	bl	8004798 <USBD_LL_IsStallEP>
 8003dc8:	b168      	cbz	r0, 8003de6 <USBD_StdEPReq+0xc2>
        pep->status = 0x0001;     
 8003dca:	2301      	movs	r3, #1
 8003dcc:	602b      	str	r3, [r5, #0]
      USBD_CtlSendData (pdev,
 8003dce:	2202      	movs	r2, #2
 8003dd0:	4629      	mov	r1, r5
 8003dd2:	4620      	mov	r0, r4
 8003dd4:	f000 f839 	bl	8003e4a <USBD_CtlSendData>
      break;
 8003dd8:	e7b2      	b.n	8003d40 <USBD_StdEPReq+0x1c>
      if ((ep_addr & 0x7F) != 0x00) 
 8003dda:	065a      	lsls	r2, r3, #25
 8003ddc:	d0b0      	beq.n	8003d40 <USBD_StdEPReq+0x1c>
        USBD_LL_StallEP(pdev , ep_addr);
 8003dde:	4619      	mov	r1, r3
 8003de0:	f000 fcbe 	bl	8004760 <USBD_LL_StallEP>
 8003de4:	e7ac      	b.n	8003d40 <USBD_StdEPReq+0x1c>
        pep->status = 0x0000;  
 8003de6:	6028      	str	r0, [r5, #0]
 8003de8:	e7f1      	b.n	8003dce <USBD_StdEPReq+0xaa>

08003dea <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 8003dea:	780b      	ldrb	r3, [r1, #0]
 8003dec:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8003dee:	784b      	ldrb	r3, [r1, #1]
 8003df0:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8003df2:	78ca      	ldrb	r2, [r1, #3]
 8003df4:	788b      	ldrb	r3, [r1, #2]
 8003df6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003dfa:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8003dfc:	794a      	ldrb	r2, [r1, #5]
 8003dfe:	790b      	ldrb	r3, [r1, #4]
 8003e00:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003e04:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8003e06:	79ca      	ldrb	r2, [r1, #7]
 8003e08:	798b      	ldrb	r3, [r1, #6]
 8003e0a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003e0e:	80c3      	strh	r3, [r0, #6]
 8003e10:	4770      	bx	lr

08003e12 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8003e12:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 8003e14:	b188      	cbz	r0, 8003e3a <USBD_GetString+0x28>
 8003e16:	4605      	mov	r5, r0
 8003e18:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 8003e1a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	2c00      	cmp	r4, #0
 8003e22:	d1f9      	bne.n	8003e18 <USBD_GetString+0x6>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8003e24:	005b      	lsls	r3, r3, #1
 8003e26:	3302      	adds	r3, #2
 8003e28:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 8003e2a:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	704b      	strb	r3, [r1, #1]
 8003e30:	3801      	subs	r0, #1
 8003e32:	2302      	movs	r3, #2
    while (*desc != '\0') 
 8003e34:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8003e38:	b905      	cbnz	r5, 8003e3c <USBD_GetString+0x2a>
 8003e3a:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8003e3c:	1c5a      	adds	r2, r3, #1
 8003e3e:	b2d2      	uxtb	r2, r2
 8003e40:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0x00;
 8003e42:	3302      	adds	r3, #2
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	548c      	strb	r4, [r1, r2]
 8003e48:	e7f4      	b.n	8003e34 <USBD_GetString+0x22>

08003e4a <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8003e4a:	b510      	push	{r4, lr}
 8003e4c:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8003e4e:	2202      	movs	r2, #2
 8003e50:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8003e54:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8003e56:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 8003e58:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8003e5a:	2100      	movs	r1, #0
 8003e5c:	f000 fcbe 	bl	80047dc <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8003e60:	2000      	movs	r0, #0
 8003e62:	bd10      	pop	{r4, pc}

08003e64 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8003e64:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8003e66:	4613      	mov	r3, r2
 8003e68:	460a      	mov	r2, r1
 8003e6a:	2100      	movs	r1, #0
 8003e6c:	f000 fcb6 	bl	80047dc <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8003e70:	2000      	movs	r0, #0
 8003e72:	bd08      	pop	{r3, pc}

08003e74 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8003e74:	b510      	push	{r4, lr}
 8003e76:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8003e78:	2203      	movs	r2, #3
 8003e7a:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 8003e7e:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8003e82:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 8003e84:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  USBD_LL_PrepareReceive (pdev,
 8003e88:	2100      	movs	r1, #0
 8003e8a:	f000 fcb5 	bl	80047f8 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 8003e8e:	2000      	movs	r0, #0
 8003e90:	bd10      	pop	{r4, pc}

08003e92 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8003e92:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 8003e94:	4613      	mov	r3, r2
 8003e96:	460a      	mov	r2, r1
 8003e98:	2100      	movs	r1, #0
 8003e9a:	f000 fcad 	bl	80047f8 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 8003e9e:	2000      	movs	r0, #0
 8003ea0:	bd08      	pop	{r3, pc}

08003ea2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8003ea2:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8003ea4:	2304      	movs	r3, #4
 8003ea6:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8003eaa:	2300      	movs	r3, #0
 8003eac:	461a      	mov	r2, r3
 8003eae:	4619      	mov	r1, r3
 8003eb0:	f000 fc94 	bl	80047dc <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8003eb4:	2000      	movs	r0, #0
 8003eb6:	bd08      	pop	{r3, pc}

08003eb8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8003eb8:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8003eba:	2305      	movs	r3, #5
 8003ebc:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	f000 fc97 	bl	80047f8 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 8003eca:	2000      	movs	r0, #0
 8003ecc:	bd08      	pop	{r3, pc}
	...

08003ed0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ed0:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ed2:	2230      	movs	r2, #48	; 0x30
{
 8003ed4:	b098      	sub	sp, #96	; 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ed6:	eb0d 0002 	add.w	r0, sp, r2
 8003eda:	2100      	movs	r1, #0
 8003edc:	f000 fd50 	bl	8004980 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ee0:	2214      	movs	r2, #20
 8003ee2:	2100      	movs	r1, #0
 8003ee4:	a807      	add	r0, sp, #28
 8003ee6:	f000 fd4b 	bl	8004980 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003eea:	2100      	movs	r1, #0
 8003eec:	2210      	movs	r2, #16
 8003eee:	a803      	add	r0, sp, #12
 8003ef0:	f000 fd46 	bl	8004980 <memset>

  /**Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ef4:	2500      	movs	r5, #0
 8003ef6:	4b21      	ldr	r3, [pc, #132]	; (8003f7c <SystemClock_Config+0xac>)
 8003ef8:	9501      	str	r5, [sp, #4]
 8003efa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003efc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003f00:	641a      	str	r2, [r3, #64]	; 0x40
 8003f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f08:	9301      	str	r3, [sp, #4]
 8003f0a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f0c:	4b1c      	ldr	r3, [pc, #112]	; (8003f80 <SystemClock_Config+0xb0>)
 8003f0e:	9502      	str	r5, [sp, #8]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f16:	601a      	str	r2, [r3, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f1e:	9302      	str	r3, [sp, #8]
 8003f20:	9b02      	ldr	r3, [sp, #8]
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003f22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f26:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003f28:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003f2c:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003f2e:	2308      	movs	r3, #8
 8003f30:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003f32:	f44f 73a8 	mov.w	r3, #336	; 0x150
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003f36:	2402      	movs	r4, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003f38:	2601      	movs	r6, #1
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003f3a:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003f3c:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003f3e:	2307      	movs	r3, #7
 8003f40:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003f42:	960c      	str	r6, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003f44:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003f46:	9416      	str	r4, [sp, #88]	; 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003f48:	f7fe fc04 	bl	8002754 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003f4c:	230f      	movs	r3, #15
 8003f4e:	9307      	str	r3, [sp, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003f50:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003f54:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003f56:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003f58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003f5c:	a807      	add	r0, sp, #28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003f5e:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003f60:	9408      	str	r4, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003f62:	9509      	str	r5, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003f64:	f7fe fda6 	bl	8002ab4 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8003f68:	23c0      	movs	r3, #192	; 0xc0
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003f6a:	a803      	add	r0, sp, #12
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8003f6c:	9603      	str	r6, [sp, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8003f6e:	9304      	str	r3, [sp, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8003f70:	9405      	str	r4, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003f72:	f7fe fe4f 	bl	8002c14 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8003f76:	b018      	add	sp, #96	; 0x60
 8003f78:	bd70      	pop	{r4, r5, r6, pc}
 8003f7a:	bf00      	nop
 8003f7c:	40023800 	.word	0x40023800
 8003f80:	40007000 	.word	0x40007000
 8003f84:	00000000 	.word	0x00000000

08003f88 <main>:
{
 8003f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f8c:	b09c      	sub	sp, #112	; 0x70
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f8e:	ac0f      	add	r4, sp, #60	; 0x3c
  HAL_Init();
 8003f90:	f7fd f802 	bl	8000f98 <HAL_Init>
  SystemClock_Config();
 8003f94:	f7ff ff9c 	bl	8003ed0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f98:	2214      	movs	r2, #20
 8003f9a:	2100      	movs	r1, #0
 8003f9c:	4620      	mov	r0, r4

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003f9e:	2500      	movs	r5, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fa0:	f000 fcee 	bl	8004980 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003fa4:	4bb0      	ldr	r3, [pc, #704]	; (8004268 <main+0x2e0>)
 8003fa6:	9507      	str	r5, [sp, #28]
 8003fa8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8003faa:	48b0      	ldr	r0, [pc, #704]	; (800426c <main+0x2e4>)
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003fac:	f8df 8304 	ldr.w	r8, [pc, #772]	; 80042b4 <main+0x32c>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003fb0:	f042 0210 	orr.w	r2, r2, #16
 8003fb4:	631a      	str	r2, [r3, #48]	; 0x30
 8003fb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fb8:	f002 0210 	and.w	r2, r2, #16
 8003fbc:	9207      	str	r2, [sp, #28]
 8003fbe:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fc0:	9508      	str	r5, [sp, #32]
 8003fc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fc4:	f042 0204 	orr.w	r2, r2, #4
 8003fc8:	631a      	str	r2, [r3, #48]	; 0x30
 8003fca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fcc:	f002 0204 	and.w	r2, r2, #4
 8003fd0:	9208      	str	r2, [sp, #32]
 8003fd2:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003fd4:	9509      	str	r5, [sp, #36]	; 0x24
 8003fd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fd8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003fdc:	631a      	str	r2, [r3, #48]	; 0x30
 8003fde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fe0:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003fe4:	9209      	str	r2, [sp, #36]	; 0x24
 8003fe6:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fe8:	950a      	str	r5, [sp, #40]	; 0x28
 8003fea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fec:	f042 0201 	orr.w	r2, r2, #1
 8003ff0:	631a      	str	r2, [r3, #48]	; 0x30
 8003ff2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ff4:	f002 0201 	and.w	r2, r2, #1
 8003ff8:	920a      	str	r2, [sp, #40]	; 0x28
 8003ffa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ffc:	950b      	str	r5, [sp, #44]	; 0x2c
 8003ffe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004000:	f042 0202 	orr.w	r2, r2, #2
 8004004:	631a      	str	r2, [r3, #48]	; 0x30
 8004006:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004008:	f002 0202 	and.w	r2, r2, #2
 800400c:	920b      	str	r2, [sp, #44]	; 0x2c
 800400e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004010:	950c      	str	r5, [sp, #48]	; 0x30
 8004012:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004014:	f042 0208 	orr.w	r2, r2, #8
 8004018:	631a      	str	r2, [r3, #48]	; 0x30
 800401a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401c:	f003 0308 	and.w	r3, r3, #8
 8004020:	930c      	str	r3, [sp, #48]	; 0x30
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8004022:	462a      	mov	r2, r5
 8004024:	2108      	movs	r1, #8
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004026:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8004028:	f7fd f93e 	bl	80012a8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800402c:	2201      	movs	r2, #1
 800402e:	4611      	mov	r1, r2
 8004030:	488f      	ldr	r0, [pc, #572]	; (8004270 <main+0x2e8>)
 8004032:	f7fd f939 	bl	80012a8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8004036:	462a      	mov	r2, r5
 8004038:	f24f 0110 	movw	r1, #61456	; 0xf010
 800403c:	488d      	ldr	r0, [pc, #564]	; (8004274 <main+0x2ec>)
 800403e:	f7fd f933 	bl	80012a8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004042:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8004044:	2708      	movs	r7, #8
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8004046:	4621      	mov	r1, r4
 8004048:	4888      	ldr	r0, [pc, #544]	; (800426c <main+0x2e4>)
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800404a:	970f      	str	r7, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800404c:	9610      	str	r6, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800404e:	9511      	str	r5, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004050:	9512      	str	r5, [sp, #72]	; 0x48
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8004052:	f7fd f849 	bl	80010e8 <HAL_GPIO_Init>
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8004056:	4621      	mov	r1, r4
 8004058:	4885      	ldr	r0, [pc, #532]	; (8004270 <main+0x2e8>)
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800405a:	960f      	str	r6, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800405c:	9610      	str	r6, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800405e:	f04f 0905 	mov.w	r9, #5
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004062:	9511      	str	r5, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004064:	9512      	str	r5, [sp, #72]	; 0x48
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8004066:	f7fd f83f 	bl	80010e8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800406a:	970f      	str	r7, [sp, #60]	; 0x3c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800406c:	4621      	mov	r1, r4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800406e:	2702      	movs	r7, #2
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8004070:	487f      	ldr	r0, [pc, #508]	; (8004270 <main+0x2e8>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004072:	9710      	str	r7, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004074:	9511      	str	r5, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004076:	9512      	str	r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004078:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800407c:	f7fd f834 	bl	80010e8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004080:	4621      	mov	r1, r4
 8004082:	487d      	ldr	r0, [pc, #500]	; (8004278 <main+0x2f0>)
  GPIO_InitStruct.Pin = B1_Pin;
 8004084:	960f      	str	r6, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8004086:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800408a:	9511      	str	r5, [sp, #68]	; 0x44
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800408c:	f7fd f82c 	bl	80010e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8004090:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8004092:	4621      	mov	r1, r4
 8004094:	4879      	ldr	r0, [pc, #484]	; (800427c <main+0x2f4>)
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8004096:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004098:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800409a:	9511      	str	r5, [sp, #68]	; 0x44
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800409c:	f7fd f824 	bl	80010e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80040a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80040a4:	4621      	mov	r1, r4
 80040a6:	4875      	ldr	r0, [pc, #468]	; (800427c <main+0x2f4>)
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80040a8:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040aa:	9710      	str	r7, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ac:	9511      	str	r5, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040ae:	9512      	str	r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80040b0:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80040b4:	f7fd f818 	bl	80010e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80040b8:	f24f 0310 	movw	r3, #61456	; 0xf010
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80040bc:	4621      	mov	r1, r4
 80040be:	486d      	ldr	r0, [pc, #436]	; (8004274 <main+0x2ec>)
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80040c0:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040c2:	9610      	str	r6, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040c4:	9511      	str	r5, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040c6:	9512      	str	r5, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80040c8:	f7fd f80e 	bl	80010e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80040cc:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80040ce:	4621      	mov	r1, r4
 80040d0:	4868      	ldr	r0, [pc, #416]	; (8004274 <main+0x2ec>)
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80040d2:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80040d4:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040d6:	9511      	str	r5, [sp, #68]	; 0x44
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80040d8:	f7fd f806 	bl	80010e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80040dc:	4621      	mov	r1, r4
 80040de:	4863      	ldr	r0, [pc, #396]	; (800426c <main+0x2e4>)
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80040e0:	970f      	str	r7, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80040e2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040e6:	9511      	str	r5, [sp, #68]	; 0x44
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80040e8:	f7fc fffe 	bl	80010e8 <HAL_GPIO_Init>
  hi2s3.Instance = SPI3;
 80040ec:	4864      	ldr	r0, [pc, #400]	; (8004280 <main+0x2f8>)
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80040ee:	4b65      	ldr	r3, [pc, #404]	; (8004284 <main+0x2fc>)
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80040f0:	6085      	str	r5, [r0, #8]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80040f2:	f44f 7600 	mov.w	r6, #512	; 0x200
 80040f6:	e880 0048 	stmia.w	r0, {r3, r6}
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80040fa:	4b63      	ldr	r3, [pc, #396]	; (8004288 <main+0x300>)
 80040fc:	6143      	str	r3, [r0, #20]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80040fe:	60c5      	str	r5, [r0, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8004100:	6106      	str	r6, [r0, #16]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8004102:	6185      	str	r5, [r0, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8004104:	61c5      	str	r5, [r0, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8004106:	6205      	str	r5, [r0, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8004108:	f7fd fc8e 	bl	8001a28 <HAL_I2S_Init>
  hspi1.Instance = SPI1;
 800410c:	485f      	ldr	r0, [pc, #380]	; (800428c <main+0x304>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800410e:	4a60      	ldr	r2, [pc, #384]	; (8004290 <main+0x308>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004110:	6085      	str	r5, [r0, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004112:	f44f 7382 	mov.w	r3, #260	; 0x104
 8004116:	e880 000c 	stmia.w	r0, {r2, r3}
  hspi1.Init.CRCPolynomial = 10;
 800411a:	230a      	movs	r3, #10
 800411c:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800411e:	60c5      	str	r5, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004120:	6105      	str	r5, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004122:	6145      	str	r5, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004124:	6186      	str	r6, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004126:	61c5      	str	r5, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004128:	6205      	str	r5, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800412a:	6245      	str	r5, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800412c:	6285      	str	r5, [r0, #40]	; 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800412e:	f7fe fe37 	bl	8002da0 <HAL_SPI_Init>
  MX_USB_DEVICE_Init();
 8004132:	f000 f9cf 	bl	80044d4 <MX_USB_DEVICE_Init>
  hi2c1.Instance = I2C1;
 8004136:	4857      	ldr	r0, [pc, #348]	; (8004294 <main+0x30c>)
  hi2c1.Init.ClockSpeed = 100000;
 8004138:	4957      	ldr	r1, [pc, #348]	; (8004298 <main+0x310>)
 800413a:	4b58      	ldr	r3, [pc, #352]	; (800429c <main+0x314>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800413c:	6085      	str	r5, [r0, #8]
  hi2c1.Init.ClockSpeed = 100000;
 800413e:	e880 000a 	stmia.w	r0, {r1, r3}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004142:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004146:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress1 = 0;
 8004148:	60c5      	str	r5, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800414a:	6145      	str	r5, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800414c:	6185      	str	r5, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800414e:	61c5      	str	r5, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004150:	6205      	str	r5, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004152:	f7fd f9ab 	bl	80014ac <HAL_I2C_Init>
  uint8_t meas_command[2] = {0x22, 0x20};
 8004156:	4b52      	ldr	r3, [pc, #328]	; (80042a0 <main+0x318>)
 8004158:	881b      	ldrh	r3, [r3, #0]
 800415a:	f8ad 3018 	strh.w	r3, [sp, #24]
	  Buf[i] = 0;
 800415e:	462b      	mov	r3, r5
 8004160:	5563      	strb	r3, [r4, r5]
  for (int i = 0; i < Len; i++)
 8004162:	3501      	adds	r5, #1
 8004164:	2d32      	cmp	r5, #50	; 0x32
 8004166:	d1fb      	bne.n	8004160 <main+0x1d8>
  HAL_I2C_Master_Transmit(&hi2c1, 0x8A, meas_command, 2, 200);
 8004168:	23c8      	movs	r3, #200	; 0xc8
 800416a:	9300      	str	r3, [sp, #0]
 800416c:	aa06      	add	r2, sp, #24
 800416e:	2302      	movs	r3, #2
 8004170:	218a      	movs	r1, #138	; 0x8a
 8004172:	4848      	ldr	r0, [pc, #288]	; (8004294 <main+0x30c>)
 8004174:	f7fd fa08 	bl	8001588 <HAL_I2C_Master_Transmit>
		  temp_f2 = 100.0 * dis_ret / 65535.0;
 8004178:	f20f 09dc 	addw	r9, pc, #220	; 0xdc
 800417c:	e9d9 8900 	ldrd	r8, r9, [r9]
  uint8_t cnt = 0;
 8004180:	2700      	movs	r7, #0
	  HAL_Delay(500);
 8004182:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004186:	f7fc ff33 	bl	8000ff0 <HAL_Delay>
		  HAL_I2C_Master_Receive(&hi2c1, 0x8A, temp6, 6, 200);
 800418a:	23c8      	movs	r3, #200	; 0xc8
 800418c:	9300      	str	r3, [sp, #0]
 800418e:	aa0d      	add	r2, sp, #52	; 0x34
 8004190:	2306      	movs	r3, #6
 8004192:	218a      	movs	r1, #138	; 0x8a
 8004194:	483f      	ldr	r0, [pc, #252]	; (8004294 <main+0x30c>)
 8004196:	f7fd facd 	bl	8001734 <HAL_I2C_Master_Receive>
		  sprintf(Buf, "%02x %02x %02x %02x %02x %02x  temp=%04x\n", temp6[0], temp6[1], temp6[2], temp6[3], temp6[4], temp6[5], temp_s);
 800419a:	2300      	movs	r3, #0
 800419c:	9304      	str	r3, [sp, #16]
 800419e:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 80041a2:	9303      	str	r3, [sp, #12]
 80041a4:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
		  dis_ret = (((uint16_t)temp6[0])<<8) + temp6[1];
 80041a8:	f89d a034 	ldrb.w	sl, [sp, #52]	; 0x34
 80041ac:	f89d 6035 	ldrb.w	r6, [sp, #53]	; 0x35
		  sprintf(Buf, "%02x %02x %02x %02x %02x %02x  temp=%04x\n", temp6[0], temp6[1], temp6[2], temp6[3], temp6[4], temp6[5], temp_s);
 80041b0:	9302      	str	r3, [sp, #8]
 80041b2:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 80041b6:	9301      	str	r3, [sp, #4]
 80041b8:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 80041bc:	4939      	ldr	r1, [pc, #228]	; (80042a4 <main+0x31c>)
 80041be:	9300      	str	r3, [sp, #0]
 80041c0:	4652      	mov	r2, sl
 80041c2:	4633      	mov	r3, r6
 80041c4:	4620      	mov	r0, r4
 80041c6:	f001 f90b 	bl	80053e0 <siprintf>
		  HAL_Delay(500);
 80041ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80041ce:	f7fc ff0f 	bl	8000ff0 <HAL_Delay>
		  CDC_Transmit_FS(Buf, Len);
 80041d2:	2132      	movs	r1, #50	; 0x32
 80041d4:	4620      	mov	r0, r4
 80041d6:	f000 f9bf 	bl	8004558 <CDC_Transmit_FS>
		  dis_ret = (((uint16_t)temp6[3])<<8) + temp6[4];
 80041da:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 80041de:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 80041e2:	eb00 2003 	add.w	r0, r0, r3, lsl #8
		  temp_f2 = 100.0 * dis_ret / 65535.0;
 80041e6:	b280      	uxth	r0, r0
 80041e8:	f7fc f99c 	bl	8000524 <__aeabi_i2d>
 80041ec:	2200      	movs	r2, #0
 80041ee:	4b2e      	ldr	r3, [pc, #184]	; (80042a8 <main+0x320>)
 80041f0:	f7fc f9fe 	bl	80005f0 <__aeabi_dmul>
 80041f4:	4642      	mov	r2, r8
 80041f6:	464b      	mov	r3, r9
 80041f8:	f7fc fb24 	bl	8000844 <__aeabi_ddiv>
 80041fc:	f7fc fcd0 	bl	8000ba0 <__aeabi_d2f>
		  sprintf(Buf,"ARM, cnt=%u tmp1=%3.2f tmp2=%3.2f  \r", cnt++, temp_f1, temp_f2);
 8004200:	f7fc f9a2 	bl	8000548 <__aeabi_f2d>
 8004204:	e9cd 0102 	strd	r0, r1, [sp, #8]
		  dis_ret = (((uint16_t)temp6[0])<<8) + temp6[1];
 8004208:	eb06 200a 	add.w	r0, r6, sl, lsl #8
		  temp_f1 = 175.0 * dis_ret / 65535.0 - 45;
 800420c:	b280      	uxth	r0, r0
 800420e:	f7fc f989 	bl	8000524 <__aeabi_i2d>
 8004212:	a313      	add	r3, pc, #76	; (adr r3, 8004260 <main+0x2d8>)
 8004214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004218:	f7fc f9ea 	bl	80005f0 <__aeabi_dmul>
 800421c:	4642      	mov	r2, r8
 800421e:	464b      	mov	r3, r9
 8004220:	f7fc fb10 	bl	8000844 <__aeabi_ddiv>
 8004224:	4b21      	ldr	r3, [pc, #132]	; (80042ac <main+0x324>)
 8004226:	2200      	movs	r2, #0
 8004228:	f7fc f82e 	bl	8000288 <__aeabi_dsub>
 800422c:	f7fc fcb8 	bl	8000ba0 <__aeabi_d2f>
		  sprintf(Buf,"ARM, cnt=%u tmp1=%3.2f tmp2=%3.2f  \r", cnt++, temp_f1, temp_f2);
 8004230:	f7fc f98a 	bl	8000548 <__aeabi_f2d>
 8004234:	1c7d      	adds	r5, r7, #1
 8004236:	b2ed      	uxtb	r5, r5
 8004238:	e9cd 0100 	strd	r0, r1, [sp]
 800423c:	463a      	mov	r2, r7
 800423e:	491c      	ldr	r1, [pc, #112]	; (80042b0 <main+0x328>)
 8004240:	4620      	mov	r0, r4
 8004242:	f001 f8cd 	bl	80053e0 <siprintf>
		  if (cnt == 10) cnt = 0;
 8004246:	2d0a      	cmp	r5, #10
 8004248:	bf08      	it	eq
 800424a:	2500      	moveq	r5, #0
		  CDC_Transmit_FS(Buf, Len);
 800424c:	2132      	movs	r1, #50	; 0x32
 800424e:	4620      	mov	r0, r4
 8004250:	f000 f982 	bl	8004558 <CDC_Transmit_FS>
	  HAL_Delay(500);
 8004254:	462f      	mov	r7, r5
 8004256:	e794      	b.n	8004182 <main+0x1fa>
 8004258:	00000000 	.word	0x00000000
 800425c:	40efffe0 	.word	0x40efffe0
 8004260:	00000000 	.word	0x00000000
 8004264:	4065e000 	.word	0x4065e000
 8004268:	40023800 	.word	0x40023800
 800426c:	40021000 	.word	0x40021000
 8004270:	40020800 	.word	0x40020800
 8004274:	40020c00 	.word	0x40020c00
 8004278:	40020000 	.word	0x40020000
 800427c:	40020400 	.word	0x40020400
 8004280:	2000040c 	.word	0x2000040c
 8004284:	40003c00 	.word	0x40003c00
 8004288:	00017700 	.word	0x00017700
 800428c:	200003b4 	.word	0x200003b4
 8004290:	40013000 	.word	0x40013000
 8004294:	20000360 	.word	0x20000360
 8004298:	40005400 	.word	0x40005400
 800429c:	000186a0 	.word	0x000186a0
 80042a0:	08006a78 	.word	0x08006a78
 80042a4:	08006a7a 	.word	0x08006a7a
 80042a8:	40590000 	.word	0x40590000
 80042ac:	40468000 	.word	0x40468000
 80042b0:	08006aa4 	.word	0x08006aa4
 80042b4:	10120000 	.word	0x10120000

080042b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80042b8:	4770      	bx	lr
	...

080042bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80042bc:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042be:	4b0e      	ldr	r3, [pc, #56]	; (80042f8 <HAL_MspInit+0x3c>)
 80042c0:	2100      	movs	r1, #0
 80042c2:	9100      	str	r1, [sp, #0]
 80042c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042ca:	645a      	str	r2, [r3, #68]	; 0x44
 80042cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042ce:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80042d2:	9200      	str	r2, [sp, #0]
 80042d4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80042d6:	9101      	str	r1, [sp, #4]
 80042d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042da:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80042de:	641a      	str	r2, [r3, #64]	; 0x40
 80042e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042e6:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80042e8:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 80042ea:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80042ec:	f7fc fe94 	bl	8001018 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80042f0:	b003      	add	sp, #12
 80042f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80042f6:	bf00      	nop
 80042f8:	40023800 	.word	0x40023800

080042fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80042fc:	b530      	push	{r4, r5, lr}
 80042fe:	4604      	mov	r4, r0
 8004300:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004302:	2214      	movs	r2, #20
 8004304:	2100      	movs	r1, #0
 8004306:	a803      	add	r0, sp, #12
 8004308:	f000 fb3a 	bl	8004980 <memset>
  if(hi2c->Instance==I2C1)
 800430c:	6822      	ldr	r2, [r4, #0]
 800430e:	4b14      	ldr	r3, [pc, #80]	; (8004360 <HAL_I2C_MspInit+0x64>)
 8004310:	429a      	cmp	r2, r3
 8004312:	d123      	bne.n	800435c <HAL_I2C_MspInit+0x60>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004314:	4c13      	ldr	r4, [pc, #76]	; (8004364 <HAL_I2C_MspInit+0x68>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004316:	4814      	ldr	r0, [pc, #80]	; (8004368 <HAL_I2C_MspInit+0x6c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004318:	2500      	movs	r5, #0
 800431a:	9501      	str	r5, [sp, #4]
 800431c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800431e:	f043 0302 	orr.w	r3, r3, #2
 8004322:	6323      	str	r3, [r4, #48]	; 0x30
 8004324:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004326:	f003 0302 	and.w	r3, r3, #2
 800432a:	9301      	str	r3, [sp, #4]
 800432c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800432e:	23c0      	movs	r3, #192	; 0xc0
 8004330:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004332:	2312      	movs	r3, #18
 8004334:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004336:	2301      	movs	r3, #1
 8004338:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800433a:	2303      	movs	r3, #3
 800433c:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800433e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004340:	2304      	movs	r3, #4
 8004342:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004344:	f7fc fed0 	bl	80010e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004348:	9502      	str	r5, [sp, #8]
 800434a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800434c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004350:	6423      	str	r3, [r4, #64]	; 0x40
 8004352:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004354:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004358:	9302      	str	r3, [sp, #8]
 800435a:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800435c:	b009      	add	sp, #36	; 0x24
 800435e:	bd30      	pop	{r4, r5, pc}
 8004360:	40005400 	.word	0x40005400
 8004364:	40023800 	.word	0x40023800
 8004368:	40020400 	.word	0x40020400

0800436c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800436c:	b570      	push	{r4, r5, r6, lr}
 800436e:	4604      	mov	r4, r0
 8004370:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004372:	2214      	movs	r2, #20
 8004374:	2100      	movs	r1, #0
 8004376:	a803      	add	r0, sp, #12
 8004378:	f000 fb02 	bl	8004980 <memset>
  if(hi2s->Instance==SPI3)
 800437c:	6822      	ldr	r2, [r4, #0]
 800437e:	4b1d      	ldr	r3, [pc, #116]	; (80043f4 <HAL_I2S_MspInit+0x88>)
 8004380:	429a      	cmp	r2, r3
 8004382:	d135      	bne.n	80043f0 <HAL_I2S_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004384:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
 8004388:	2400      	movs	r4, #0
 800438a:	9400      	str	r4, [sp, #0]
 800438c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800438e:	481a      	ldr	r0, [pc, #104]	; (80043f8 <HAL_I2S_MspInit+0x8c>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004390:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004394:	641a      	str	r2, [r3, #64]	; 0x40
 8004396:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004398:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 800439c:	9200      	str	r2, [sp, #0]
 800439e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043a0:	9401      	str	r4, [sp, #4]
 80043a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043a4:	f042 0201 	orr.w	r2, r2, #1
 80043a8:	631a      	str	r2, [r3, #48]	; 0x30
 80043aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043ac:	f002 0201 	and.w	r2, r2, #1
 80043b0:	9201      	str	r2, [sp, #4]
 80043b2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80043b4:	9402      	str	r4, [sp, #8]
 80043b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043b8:	f042 0204 	orr.w	r2, r2, #4
 80043bc:	631a      	str	r2, [r3, #48]	; 0x30
 80043be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c0:	f003 0304 	and.w	r3, r3, #4
 80043c4:	9302      	str	r3, [sp, #8]
 80043c6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043c8:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80043ca:	2310      	movs	r3, #16
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80043cc:	2506      	movs	r5, #6
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80043ce:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80043d0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043d2:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80043d4:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80043d6:	f7fc fe87 	bl	80010e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80043da:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043de:	a903      	add	r1, sp, #12
 80043e0:	4806      	ldr	r0, [pc, #24]	; (80043fc <HAL_I2S_MspInit+0x90>)
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80043e2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043e4:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043e6:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043e8:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80043ea:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043ec:	f7fc fe7c 	bl	80010e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80043f0:	b008      	add	sp, #32
 80043f2:	bd70      	pop	{r4, r5, r6, pc}
 80043f4:	40003c00 	.word	0x40003c00
 80043f8:	40020000 	.word	0x40020000
 80043fc:	40020800 	.word	0x40020800

08004400 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004400:	b510      	push	{r4, lr}
 8004402:	4604      	mov	r4, r0
 8004404:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004406:	2214      	movs	r2, #20
 8004408:	2100      	movs	r1, #0
 800440a:	a803      	add	r0, sp, #12
 800440c:	f000 fab8 	bl	8004980 <memset>
  if(hspi->Instance==SPI1)
 8004410:	6822      	ldr	r2, [r4, #0]
 8004412:	4b13      	ldr	r3, [pc, #76]	; (8004460 <HAL_SPI_MspInit+0x60>)
 8004414:	429a      	cmp	r2, r3
 8004416:	d120      	bne.n	800445a <HAL_SPI_MspInit+0x5a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004418:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 800441c:	2100      	movs	r1, #0
 800441e:	9101      	str	r1, [sp, #4]
 8004420:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004422:	4810      	ldr	r0, [pc, #64]	; (8004464 <HAL_SPI_MspInit+0x64>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004424:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004428:	645a      	str	r2, [r3, #68]	; 0x44
 800442a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800442c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004430:	9201      	str	r2, [sp, #4]
 8004432:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004434:	9102      	str	r1, [sp, #8]
 8004436:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004438:	f042 0201 	orr.w	r2, r2, #1
 800443c:	631a      	str	r2, [r3, #48]	; 0x30
 800443e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004440:	f003 0301 	and.w	r3, r3, #1
 8004444:	9302      	str	r3, [sp, #8]
 8004446:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8004448:	23e0      	movs	r3, #224	; 0xe0
 800444a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800444c:	2302      	movs	r3, #2
 800444e:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004450:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004452:	2305      	movs	r3, #5
 8004454:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004456:	f7fc fe47 	bl	80010e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800445a:	b008      	add	sp, #32
 800445c:	bd10      	pop	{r4, pc}
 800445e:	bf00      	nop
 8004460:	40013000 	.word	0x40013000
 8004464:	40020000 	.word	0x40020000

08004468 <NMI_Handler>:
 8004468:	4770      	bx	lr

0800446a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800446a:	e7fe      	b.n	800446a <HardFault_Handler>

0800446c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800446c:	e7fe      	b.n	800446c <MemManage_Handler>

0800446e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800446e:	e7fe      	b.n	800446e <BusFault_Handler>

08004470 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004470:	e7fe      	b.n	8004470 <UsageFault_Handler>

08004472 <SVC_Handler>:
 8004472:	4770      	bx	lr

08004474 <DebugMon_Handler>:
 8004474:	4770      	bx	lr

08004476 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004476:	4770      	bx	lr

08004478 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004478:	f7fc bda8 	b.w	8000fcc <HAL_IncTick>

0800447c <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800447c:	4801      	ldr	r0, [pc, #4]	; (8004484 <OTG_FS_IRQHandler+0x8>)
 800447e:	f7fd bd97 	b.w	8001fb0 <HAL_PCD_IRQHandler>
 8004482:	bf00      	nop
 8004484:	20001678 	.word	0x20001678

08004488 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004488:	490f      	ldr	r1, [pc, #60]	; (80044c8 <SystemInit+0x40>)
 800448a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800448e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004492:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004496:	4b0d      	ldr	r3, [pc, #52]	; (80044cc <SystemInit+0x44>)
 8004498:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800449a:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 800449c:	f042 0201 	orr.w	r2, r2, #1
 80044a0:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80044a2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80044aa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80044ae:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80044b0:	4a07      	ldr	r2, [pc, #28]	; (80044d0 <SystemInit+0x48>)
 80044b2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80044ba:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80044bc:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80044be:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80044c2:	608b      	str	r3, [r1, #8]
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop
 80044c8:	e000ed00 	.word	0xe000ed00
 80044cc:	40023800 	.word	0x40023800
 80044d0:	24003010 	.word	0x24003010

080044d4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80044d4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 80044d6:	4c09      	ldr	r4, [pc, #36]	; (80044fc <MX_USB_DEVICE_Init+0x28>)
 80044d8:	4909      	ldr	r1, [pc, #36]	; (8004500 <MX_USB_DEVICE_Init+0x2c>)
 80044da:	2200      	movs	r2, #0
 80044dc:	4620      	mov	r0, r4
 80044de:	f7ff f9d5 	bl	800388c <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 80044e2:	4908      	ldr	r1, [pc, #32]	; (8004504 <MX_USB_DEVICE_Init+0x30>)
 80044e4:	4620      	mov	r0, r4
 80044e6:	f7ff f9e6 	bl	80038b6 <USBD_RegisterClass>

  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 80044ea:	4620      	mov	r0, r4
 80044ec:	4906      	ldr	r1, [pc, #24]	; (8004508 <MX_USB_DEVICE_Init+0x34>)
 80044ee:	f7ff f98e 	bl	800380e <USBD_CDC_RegisterInterface>

  USBD_Start(&hUsbDeviceFS);
 80044f2:	4620      	mov	r0, r4

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80044f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_Start(&hUsbDeviceFS);
 80044f8:	f7ff b9e4 	b.w	80038c4 <USBD_Start>
 80044fc:	20000454 	.word	0x20000454
 8004500:	2000012c 	.word	0x2000012c
 8004504:	20000008 	.word	0x20000008
 8004508:	2000011c 	.word	0x2000011c

0800450c <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 800450c:	2000      	movs	r0, #0
 800450e:	4770      	bx	lr

08004510 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8004510:	2000      	movs	r0, #0
 8004512:	4770      	bx	lr

08004514 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8004514:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8004516:	4c05      	ldr	r4, [pc, #20]	; (800452c <CDC_Receive_FS+0x18>)
 8004518:	4601      	mov	r1, r0
 800451a:	4620      	mov	r0, r4
 800451c:	f7ff f986 	bl	800382c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8004520:	4620      	mov	r0, r4
 8004522:	f7ff f9a0 	bl	8003866 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8004526:	2000      	movs	r0, #0
 8004528:	bd10      	pop	{r4, pc}
 800452a:	bf00      	nop
 800452c:	20000454 	.word	0x20000454

08004530 <CDC_Init_FS>:
{
 8004530:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8004532:	4c06      	ldr	r4, [pc, #24]	; (800454c <CDC_Init_FS+0x1c>)
 8004534:	4906      	ldr	r1, [pc, #24]	; (8004550 <CDC_Init_FS+0x20>)
 8004536:	2200      	movs	r2, #0
 8004538:	4620      	mov	r0, r4
 800453a:	f7ff f96f 	bl	800381c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800453e:	4905      	ldr	r1, [pc, #20]	; (8004554 <CDC_Init_FS+0x24>)
 8004540:	4620      	mov	r0, r4
 8004542:	f7ff f973 	bl	800382c <USBD_CDC_SetRxBuffer>
}
 8004546:	2000      	movs	r0, #0
 8004548:	bd10      	pop	{r4, pc}
 800454a:	bf00      	nop
 800454c:	20000454 	.word	0x20000454
 8004550:	20000e78 	.word	0x20000e78
 8004554:	20000678 	.word	0x20000678

08004558 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8004558:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800455a:	4c09      	ldr	r4, [pc, #36]	; (8004580 <CDC_Transmit_FS+0x28>)
 800455c:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  if (hcdc->TxState != 0){
 8004560:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
{
 8004564:	460a      	mov	r2, r1
  if (hcdc->TxState != 0){
 8004566:	b943      	cbnz	r3, 800457a <CDC_Transmit_FS+0x22>
    return USBD_BUSY;
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8004568:	4601      	mov	r1, r0
 800456a:	4620      	mov	r0, r4
 800456c:	f7ff f956 	bl	800381c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8004570:	4620      	mov	r0, r4
  /* USER CODE END 7 */
  return result;
}
 8004572:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8004576:	f7ff b95f 	b.w	8003838 <USBD_CDC_TransmitPacket>
}
 800457a:	2001      	movs	r0, #1
 800457c:	bd10      	pop	{r4, pc}
 800457e:	bf00      	nop
 8004580:	20000454 	.word	0x20000454

08004584 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8004584:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_FS)
 8004586:	6803      	ldr	r3, [r0, #0]
 8004588:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 800458c:	b086      	sub	sp, #24
  if(pcdHandle->Instance==USB_OTG_FS)
 800458e:	d12d      	bne.n	80045ec <HAL_PCD_MspInit+0x68>
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004590:	2400      	movs	r4, #0
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8004592:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8004596:	a901      	add	r1, sp, #4
 8004598:	4815      	ldr	r0, [pc, #84]	; (80045f0 <HAL_PCD_MspInit+0x6c>)
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800459a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800459c:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800459e:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80045a0:	f7fc fda2 	bl	80010e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80045a4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80045a8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045aa:	2302      	movs	r3, #2
 80045ac:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045ae:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80045b0:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045b2:	480f      	ldr	r0, [pc, #60]	; (80045f0 <HAL_PCD_MspInit+0x6c>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80045b4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045b6:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045b8:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045ba:	f7fc fd95 	bl	80010e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80045be:	4b0d      	ldr	r3, [pc, #52]	; (80045f4 <HAL_PCD_MspInit+0x70>)
 80045c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80045c6:	635a      	str	r2, [r3, #52]	; 0x34
 80045c8:	9400      	str	r4, [sp, #0]
 80045ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045d0:	645a      	str	r2, [r3, #68]	; 0x44
 80045d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045d8:	9300      	str	r3, [sp, #0]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80045da:	2043      	movs	r0, #67	; 0x43
 80045dc:	4622      	mov	r2, r4
 80045de:	4621      	mov	r1, r4
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80045e0:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80045e2:	f7fc fd2b 	bl	800103c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80045e6:	2043      	movs	r0, #67	; 0x43
 80045e8:	f7fc fd5c 	bl	80010a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80045ec:	b006      	add	sp, #24
 80045ee:	bd10      	pop	{r4, pc}
 80045f0:	40020000 	.word	0x40020000
 80045f4:	40023800 	.word	0x40023800

080045f8 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80045f8:	f500 716f 	add.w	r1, r0, #956	; 0x3bc
 80045fc:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8004600:	f7ff b977 	b.w	80038f2 <USBD_LL_SetupStage>

08004604 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8004604:	231c      	movs	r3, #28
 8004606:	fb03 0301 	mla	r3, r3, r1, r0
 800460a:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 800460e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004612:	f7ff b99b 	b.w	800394c <USBD_LL_DataOutStage>

08004616 <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8004616:	231c      	movs	r3, #28
 8004618:	fb03 0301 	mla	r3, r3, r1, r0
 800461c:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8004620:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004622:	f7ff b9c5 	b.w	80039b0 <USBD_LL_DataInStage>

08004626 <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8004626:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 800462a:	f7ff ba41 	b.w	8003ab0 <USBD_LL_SOF>

0800462e <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 800462e:	b510      	push	{r4, lr}
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  /* Set USB current speed. */
  switch (hpcd->Init.speed)
 8004630:	68c1      	ldr	r1, [r0, #12]
{ 
 8004632:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8004634:	3100      	adds	r1, #0
 8004636:	bf18      	it	ne
 8004638:	2101      	movne	r1, #1
 800463a:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 800463e:	f7ff fa25 	bl	8003a8c <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004642:	f8d4 03ec 	ldr.w	r0, [r4, #1004]	; 0x3ec
}
 8004646:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800464a:	f7ff ba00 	b.w	8003a4e <USBD_LL_Reset>
	...

08004650 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8004650:	b510      	push	{r4, lr}
 8004652:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8004654:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8004658:	f7ff fa1b 	bl	8003a92 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800465c:	6822      	ldr	r2, [r4, #0]
 800465e:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8004662:	f043 0301 	orr.w	r3, r3, #1
 8004666:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800466a:	6a23      	ldr	r3, [r4, #32]
 800466c:	b123      	cbz	r3, 8004678 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800466e:	4a03      	ldr	r2, [pc, #12]	; (800467c <HAL_PCD_SuspendCallback+0x2c>)
 8004670:	6913      	ldr	r3, [r2, #16]
 8004672:	f043 0306 	orr.w	r3, r3, #6
 8004676:	6113      	str	r3, [r2, #16]
 8004678:	bd10      	pop	{r4, pc}
 800467a:	bf00      	nop
 800467c:	e000ed00 	.word	0xe000ed00

08004680 <HAL_PCD_ResumeCallback>:
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8004680:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8004684:	f7ff ba0e 	b.w	8003aa4 <USBD_LL_Resume>

08004688 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8004688:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 800468c:	f7ff ba1e 	b.w	8003acc <USBD_LL_IsoOUTIncomplete>

08004690 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8004690:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8004694:	f7ff ba18 	b.w	8003ac8 <USBD_LL_IsoINIncomplete>

08004698 <HAL_PCD_ConnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8004698:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 800469c:	f7ff ba18 	b.w	8003ad0 <USBD_LL_DevConnected>

080046a0 <HAL_PCD_DisconnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80046a0:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 80046a4:	f7ff ba16 	b.w	8003ad4 <USBD_LL_DevDisconnected>

080046a8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80046a8:	b508      	push	{r3, lr}
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80046aa:	7802      	ldrb	r2, [r0, #0]
 80046ac:	bb42      	cbnz	r2, 8004700 <USBD_LL_Init+0x58>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80046ae:	4b15      	ldr	r3, [pc, #84]	; (8004704 <USBD_LL_Init+0x5c>)
  pdev->pData = &hpcd_USB_OTG_FS;
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80046b0:	2104      	movs	r1, #4
  hpcd_USB_OTG_FS.pData = pdev;
 80046b2:	f8c3 03ec 	str.w	r0, [r3, #1004]	; 0x3ec
  pdev->pData = &hpcd_USB_OTG_FS;
 80046b6:	f8c0 3220 	str.w	r3, [r0, #544]	; 0x220
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80046ba:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80046be:	e883 0003 	stmia.w	r3, {r0, r1}
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80046c2:	2102      	movs	r1, #2
 80046c4:	60d9      	str	r1, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80046c6:	6199      	str	r1, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80046c8:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80046ca:	2101      	movs	r1, #1
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80046cc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 80046ce:	615a      	str	r2, [r3, #20]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80046d0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80046d2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80046d4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80046d6:	62d9      	str	r1, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80046d8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80046da:	f7fd fbe7 	bl	8001eac <HAL_PCD_Init>
 80046de:	b108      	cbz	r0, 80046e4 <USBD_LL_Init+0x3c>
  {
    Error_Handler( );
 80046e0:	f7ff fdea 	bl	80042b8 <Error_Handler>
  }

  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80046e4:	2180      	movs	r1, #128	; 0x80
 80046e6:	4807      	ldr	r0, [pc, #28]	; (8004704 <USBD_LL_Init+0x5c>)
 80046e8:	f7fe f82f 	bl	800274a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80046ec:	2240      	movs	r2, #64	; 0x40
 80046ee:	2100      	movs	r1, #0
 80046f0:	4804      	ldr	r0, [pc, #16]	; (8004704 <USBD_LL_Init+0x5c>)
 80046f2:	f7fe f809 	bl	8002708 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80046f6:	2280      	movs	r2, #128	; 0x80
 80046f8:	2101      	movs	r1, #1
 80046fa:	4802      	ldr	r0, [pc, #8]	; (8004704 <USBD_LL_Init+0x5c>)
 80046fc:	f7fe f804 	bl	8002708 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
}
 8004700:	2000      	movs	r0, #0
 8004702:	bd08      	pop	{r3, pc}
 8004704:	20001678 	.word	0x20001678

08004708 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8004708:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800470a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800470e:	f7fd fc39 	bl	8001f84 <HAL_PCD_Start>
 8004712:	2803      	cmp	r0, #3
 8004714:	bf9a      	itte	ls
 8004716:	4b02      	ldrls	r3, [pc, #8]	; (8004720 <USBD_LL_Start+0x18>)
 8004718:	5c18      	ldrbls	r0, [r3, r0]
 800471a:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 800471c:	bd08      	pop	{r3, pc}
 800471e:	bf00      	nop
 8004720:	08006ae1 	.word	0x08006ae1

08004724 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8004724:	b510      	push	{r4, lr}
 8004726:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8004728:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800472c:	4613      	mov	r3, r2
 800472e:	4622      	mov	r2, r4
 8004730:	f7fd fefc 	bl	800252c <HAL_PCD_EP_Open>
 8004734:	2803      	cmp	r0, #3
 8004736:	bf9a      	itte	ls
 8004738:	4b01      	ldrls	r3, [pc, #4]	; (8004740 <USBD_LL_OpenEP+0x1c>)
 800473a:	5c18      	ldrbls	r0, [r3, r0]
 800473c:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 800473e:	bd10      	pop	{r4, pc}
 8004740:	08006ae1 	.word	0x08006ae1

08004744 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004744:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8004746:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800474a:	f7fd ff1d 	bl	8002588 <HAL_PCD_EP_Close>
 800474e:	2803      	cmp	r0, #3
 8004750:	bf9a      	itte	ls
 8004752:	4b02      	ldrls	r3, [pc, #8]	; (800475c <USBD_LL_CloseEP+0x18>)
 8004754:	5c18      	ldrbls	r0, [r3, r0]
 8004756:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8004758:	bd08      	pop	{r3, pc}
 800475a:	bf00      	nop
 800475c:	08006ae1 	.word	0x08006ae1

08004760 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004760:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8004762:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004766:	f7fd ff7e 	bl	8002666 <HAL_PCD_EP_SetStall>
 800476a:	2803      	cmp	r0, #3
 800476c:	bf9a      	itte	ls
 800476e:	4b02      	ldrls	r3, [pc, #8]	; (8004778 <USBD_LL_StallEP+0x18>)
 8004770:	5c18      	ldrbls	r0, [r3, r0]
 8004772:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8004774:	bd08      	pop	{r3, pc}
 8004776:	bf00      	nop
 8004778:	08006ae1 	.word	0x08006ae1

0800477c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800477c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800477e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004782:	f7fd ff9c 	bl	80026be <HAL_PCD_EP_ClrStall>
 8004786:	2803      	cmp	r0, #3
 8004788:	bf9a      	itte	ls
 800478a:	4b02      	ldrls	r3, [pc, #8]	; (8004794 <USBD_LL_ClearStallEP+0x18>)
 800478c:	5c18      	ldrbls	r0, [r3, r0]
 800478e:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8004790:	bd08      	pop	{r3, pc}
 8004792:	bf00      	nop
 8004794:	08006ae1 	.word	0x08006ae1

08004798 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8004798:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800479c:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
 80047a0:	f04f 021c 	mov.w	r2, #28
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80047a4:	bf1b      	ittet	ne
 80047a6:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 80047aa:	fb02 3101 	mlane	r1, r2, r1, r3
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80047ae:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80047b2:	f891 003a 	ldrbne.w	r0, [r1, #58]	; 0x3a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80047b6:	bf08      	it	eq
 80047b8:	f891 01fa 	ldrbeq.w	r0, [r1, #506]	; 0x1fa
  }
}
 80047bc:	4770      	bx	lr
	...

080047c0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80047c0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80047c2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80047c6:	f7fd fe9f 	bl	8002508 <HAL_PCD_SetAddress>
 80047ca:	2803      	cmp	r0, #3
 80047cc:	bf9a      	itte	ls
 80047ce:	4b02      	ldrls	r3, [pc, #8]	; (80047d8 <USBD_LL_SetUSBAddress+0x18>)
 80047d0:	5c18      	ldrbls	r0, [r3, r0]
 80047d2:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 80047d4:	bd08      	pop	{r3, pc}
 80047d6:	bf00      	nop
 80047d8:	08006ae1 	.word	0x08006ae1

080047dc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80047dc:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80047de:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80047e2:	f7fd ff20 	bl	8002626 <HAL_PCD_EP_Transmit>
 80047e6:	2803      	cmp	r0, #3
 80047e8:	bf9a      	itte	ls
 80047ea:	4b02      	ldrls	r3, [pc, #8]	; (80047f4 <USBD_LL_Transmit+0x18>)
 80047ec:	5c18      	ldrbls	r0, [r3, r0]
 80047ee:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;    
}
 80047f0:	bd08      	pop	{r3, pc}
 80047f2:	bf00      	nop
 80047f4:	08006ae1 	.word	0x08006ae1

080047f8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80047f8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80047fa:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80047fe:	f7fd fee6 	bl	80025ce <HAL_PCD_EP_Receive>
 8004802:	2803      	cmp	r0, #3
 8004804:	bf9a      	itte	ls
 8004806:	4b02      	ldrls	r3, [pc, #8]	; (8004810 <USBD_LL_PrepareReceive+0x18>)
 8004808:	5c18      	ldrbls	r0, [r3, r0]
 800480a:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 800480c:	bd08      	pop	{r3, pc}
 800480e:	bf00      	nop
 8004810:	08006ae1 	.word	0x08006ae1

08004814 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004814:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8004816:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800481a:	f7fd fefc 	bl	8002616 <HAL_PCD_EP_GetRxCount>
}
 800481e:	bd08      	pop	{r3, pc}

08004820 <USBD_FS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 8004820:	2312      	movs	r3, #18
 8004822:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8004824:	4800      	ldr	r0, [pc, #0]	; (8004828 <USBD_FS_DeviceDescriptor+0x8>)
 8004826:	4770      	bx	lr
 8004828:	20000148 	.word	0x20000148

0800482c <USBD_FS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 800482c:	2304      	movs	r3, #4
 800482e:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8004830:	4800      	ldr	r0, [pc, #0]	; (8004834 <USBD_FS_LangIDStrDescriptor+0x8>)
 8004832:	4770      	bx	lr
 8004834:	2000015c 	.word	0x2000015c

08004838 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004838:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800483a:	4c04      	ldr	r4, [pc, #16]	; (800484c <USBD_FS_ManufacturerStrDescriptor+0x14>)
 800483c:	4804      	ldr	r0, [pc, #16]	; (8004850 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800483e:	460a      	mov	r2, r1
 8004840:	4621      	mov	r1, r4
 8004842:	f7ff fae6 	bl	8003e12 <USBD_GetString>
  return USBD_StrDesc;
}
 8004846:	4620      	mov	r0, r4
 8004848:	bd10      	pop	{r4, pc}
 800484a:	bf00      	nop
 800484c:	20001a68 	.word	0x20001a68
 8004850:	08006afe 	.word	0x08006afe

08004854 <USBD_FS_ProductStrDescriptor>:
{
 8004854:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8004856:	4c04      	ldr	r4, [pc, #16]	; (8004868 <USBD_FS_ProductStrDescriptor+0x14>)
 8004858:	4804      	ldr	r0, [pc, #16]	; (800486c <USBD_FS_ProductStrDescriptor+0x18>)
 800485a:	460a      	mov	r2, r1
 800485c:	4621      	mov	r1, r4
 800485e:	f7ff fad8 	bl	8003e12 <USBD_GetString>
}
 8004862:	4620      	mov	r0, r4
 8004864:	bd10      	pop	{r4, pc}
 8004866:	bf00      	nop
 8004868:	20001a68 	.word	0x20001a68
 800486c:	08006b11 	.word	0x08006b11

08004870 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004870:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8004872:	4c04      	ldr	r4, [pc, #16]	; (8004884 <USBD_FS_SerialStrDescriptor+0x14>)
 8004874:	4804      	ldr	r0, [pc, #16]	; (8004888 <USBD_FS_SerialStrDescriptor+0x18>)
 8004876:	460a      	mov	r2, r1
 8004878:	4621      	mov	r1, r4
 800487a:	f7ff faca 	bl	8003e12 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 800487e:	4620      	mov	r0, r4
 8004880:	bd10      	pop	{r4, pc}
 8004882:	bf00      	nop
 8004884:	20001a68 	.word	0x20001a68
 8004888:	08006b27 	.word	0x08006b27

0800488c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800488c:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800488e:	4c04      	ldr	r4, [pc, #16]	; (80048a0 <USBD_FS_ConfigStrDescriptor+0x14>)
 8004890:	4804      	ldr	r0, [pc, #16]	; (80048a4 <USBD_FS_ConfigStrDescriptor+0x18>)
 8004892:	460a      	mov	r2, r1
 8004894:	4621      	mov	r1, r4
 8004896:	f7ff fabc 	bl	8003e12 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 800489a:	4620      	mov	r0, r4
 800489c:	bd10      	pop	{r4, pc}
 800489e:	bf00      	nop
 80048a0:	20001a68 	.word	0x20001a68
 80048a4:	08006ae5 	.word	0x08006ae5

080048a8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80048a8:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80048aa:	4c04      	ldr	r4, [pc, #16]	; (80048bc <USBD_FS_InterfaceStrDescriptor+0x14>)
 80048ac:	4804      	ldr	r0, [pc, #16]	; (80048c0 <USBD_FS_InterfaceStrDescriptor+0x18>)
 80048ae:	460a      	mov	r2, r1
 80048b0:	4621      	mov	r1, r4
 80048b2:	f7ff faae 	bl	8003e12 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 80048b6:	4620      	mov	r0, r4
 80048b8:	bd10      	pop	{r4, pc}
 80048ba:	bf00      	nop
 80048bc:	20001a68 	.word	0x20001a68
 80048c0:	08006af0 	.word	0x08006af0

080048c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80048c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80048fc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80048c8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80048ca:	e003      	b.n	80048d4 <LoopCopyDataInit>

080048cc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80048cc:	4b0c      	ldr	r3, [pc, #48]	; (8004900 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80048ce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80048d0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80048d2:	3104      	adds	r1, #4

080048d4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80048d4:	480b      	ldr	r0, [pc, #44]	; (8004904 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80048d6:	4b0c      	ldr	r3, [pc, #48]	; (8004908 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80048d8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80048da:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80048dc:	d3f6      	bcc.n	80048cc <CopyDataInit>
  ldr  r2, =_sbss
 80048de:	4a0b      	ldr	r2, [pc, #44]	; (800490c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80048e0:	e002      	b.n	80048e8 <LoopFillZerobss>

080048e2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80048e2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80048e4:	f842 3b04 	str.w	r3, [r2], #4

080048e8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80048e8:	4b09      	ldr	r3, [pc, #36]	; (8004910 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80048ea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80048ec:	d3f9      	bcc.n	80048e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80048ee:	f7ff fdcb 	bl	8004488 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80048f2:	f000 f811 	bl	8004918 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80048f6:	f7ff fb47 	bl	8003f88 <main>
  bx  lr    
 80048fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80048fc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004900:	08006da0 	.word	0x08006da0
  ldr  r0, =_sdata
 8004904:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004908:	20000330 	.word	0x20000330
  ldr  r2, =_sbss
 800490c:	20000330 	.word	0x20000330
  ldr  r3, = _ebss
 8004910:	20001c6c 	.word	0x20001c6c

08004914 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004914:	e7fe      	b.n	8004914 <ADC_IRQHandler>
	...

08004918 <__libc_init_array>:
 8004918:	b570      	push	{r4, r5, r6, lr}
 800491a:	4e0d      	ldr	r6, [pc, #52]	; (8004950 <__libc_init_array+0x38>)
 800491c:	4c0d      	ldr	r4, [pc, #52]	; (8004954 <__libc_init_array+0x3c>)
 800491e:	1ba4      	subs	r4, r4, r6
 8004920:	10a4      	asrs	r4, r4, #2
 8004922:	2500      	movs	r5, #0
 8004924:	42a5      	cmp	r5, r4
 8004926:	d109      	bne.n	800493c <__libc_init_array+0x24>
 8004928:	4e0b      	ldr	r6, [pc, #44]	; (8004958 <__libc_init_array+0x40>)
 800492a:	4c0c      	ldr	r4, [pc, #48]	; (800495c <__libc_init_array+0x44>)
 800492c:	f002 f896 	bl	8006a5c <_init>
 8004930:	1ba4      	subs	r4, r4, r6
 8004932:	10a4      	asrs	r4, r4, #2
 8004934:	2500      	movs	r5, #0
 8004936:	42a5      	cmp	r5, r4
 8004938:	d105      	bne.n	8004946 <__libc_init_array+0x2e>
 800493a:	bd70      	pop	{r4, r5, r6, pc}
 800493c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004940:	4798      	blx	r3
 8004942:	3501      	adds	r5, #1
 8004944:	e7ee      	b.n	8004924 <__libc_init_array+0xc>
 8004946:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800494a:	4798      	blx	r3
 800494c:	3501      	adds	r5, #1
 800494e:	e7f2      	b.n	8004936 <__libc_init_array+0x1e>
 8004950:	08006d98 	.word	0x08006d98
 8004954:	08006d98 	.word	0x08006d98
 8004958:	08006d98 	.word	0x08006d98
 800495c:	08006d9c 	.word	0x08006d9c

08004960 <malloc>:
 8004960:	4b02      	ldr	r3, [pc, #8]	; (800496c <malloc+0xc>)
 8004962:	4601      	mov	r1, r0
 8004964:	6818      	ldr	r0, [r3, #0]
 8004966:	f000 b861 	b.w	8004a2c <_malloc_r>
 800496a:	bf00      	nop
 800496c:	20000160 	.word	0x20000160

08004970 <free>:
 8004970:	4b02      	ldr	r3, [pc, #8]	; (800497c <free+0xc>)
 8004972:	4601      	mov	r1, r0
 8004974:	6818      	ldr	r0, [r3, #0]
 8004976:	f000 b80b 	b.w	8004990 <_free_r>
 800497a:	bf00      	nop
 800497c:	20000160 	.word	0x20000160

08004980 <memset>:
 8004980:	4402      	add	r2, r0
 8004982:	4603      	mov	r3, r0
 8004984:	4293      	cmp	r3, r2
 8004986:	d100      	bne.n	800498a <memset+0xa>
 8004988:	4770      	bx	lr
 800498a:	f803 1b01 	strb.w	r1, [r3], #1
 800498e:	e7f9      	b.n	8004984 <memset+0x4>

08004990 <_free_r>:
 8004990:	b538      	push	{r3, r4, r5, lr}
 8004992:	4605      	mov	r5, r0
 8004994:	2900      	cmp	r1, #0
 8004996:	d045      	beq.n	8004a24 <_free_r+0x94>
 8004998:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800499c:	1f0c      	subs	r4, r1, #4
 800499e:	2b00      	cmp	r3, #0
 80049a0:	bfb8      	it	lt
 80049a2:	18e4      	addlt	r4, r4, r3
 80049a4:	f001 fbb3 	bl	800610e <__malloc_lock>
 80049a8:	4a1f      	ldr	r2, [pc, #124]	; (8004a28 <_free_r+0x98>)
 80049aa:	6813      	ldr	r3, [r2, #0]
 80049ac:	4610      	mov	r0, r2
 80049ae:	b933      	cbnz	r3, 80049be <_free_r+0x2e>
 80049b0:	6063      	str	r3, [r4, #4]
 80049b2:	6014      	str	r4, [r2, #0]
 80049b4:	4628      	mov	r0, r5
 80049b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80049ba:	f001 bba9 	b.w	8006110 <__malloc_unlock>
 80049be:	42a3      	cmp	r3, r4
 80049c0:	d90c      	bls.n	80049dc <_free_r+0x4c>
 80049c2:	6821      	ldr	r1, [r4, #0]
 80049c4:	1862      	adds	r2, r4, r1
 80049c6:	4293      	cmp	r3, r2
 80049c8:	bf04      	itt	eq
 80049ca:	681a      	ldreq	r2, [r3, #0]
 80049cc:	685b      	ldreq	r3, [r3, #4]
 80049ce:	6063      	str	r3, [r4, #4]
 80049d0:	bf04      	itt	eq
 80049d2:	1852      	addeq	r2, r2, r1
 80049d4:	6022      	streq	r2, [r4, #0]
 80049d6:	6004      	str	r4, [r0, #0]
 80049d8:	e7ec      	b.n	80049b4 <_free_r+0x24>
 80049da:	4613      	mov	r3, r2
 80049dc:	685a      	ldr	r2, [r3, #4]
 80049de:	b10a      	cbz	r2, 80049e4 <_free_r+0x54>
 80049e0:	42a2      	cmp	r2, r4
 80049e2:	d9fa      	bls.n	80049da <_free_r+0x4a>
 80049e4:	6819      	ldr	r1, [r3, #0]
 80049e6:	1858      	adds	r0, r3, r1
 80049e8:	42a0      	cmp	r0, r4
 80049ea:	d10b      	bne.n	8004a04 <_free_r+0x74>
 80049ec:	6820      	ldr	r0, [r4, #0]
 80049ee:	4401      	add	r1, r0
 80049f0:	1858      	adds	r0, r3, r1
 80049f2:	4282      	cmp	r2, r0
 80049f4:	6019      	str	r1, [r3, #0]
 80049f6:	d1dd      	bne.n	80049b4 <_free_r+0x24>
 80049f8:	6810      	ldr	r0, [r2, #0]
 80049fa:	6852      	ldr	r2, [r2, #4]
 80049fc:	605a      	str	r2, [r3, #4]
 80049fe:	4401      	add	r1, r0
 8004a00:	6019      	str	r1, [r3, #0]
 8004a02:	e7d7      	b.n	80049b4 <_free_r+0x24>
 8004a04:	d902      	bls.n	8004a0c <_free_r+0x7c>
 8004a06:	230c      	movs	r3, #12
 8004a08:	602b      	str	r3, [r5, #0]
 8004a0a:	e7d3      	b.n	80049b4 <_free_r+0x24>
 8004a0c:	6820      	ldr	r0, [r4, #0]
 8004a0e:	1821      	adds	r1, r4, r0
 8004a10:	428a      	cmp	r2, r1
 8004a12:	bf04      	itt	eq
 8004a14:	6811      	ldreq	r1, [r2, #0]
 8004a16:	6852      	ldreq	r2, [r2, #4]
 8004a18:	6062      	str	r2, [r4, #4]
 8004a1a:	bf04      	itt	eq
 8004a1c:	1809      	addeq	r1, r1, r0
 8004a1e:	6021      	streq	r1, [r4, #0]
 8004a20:	605c      	str	r4, [r3, #4]
 8004a22:	e7c7      	b.n	80049b4 <_free_r+0x24>
 8004a24:	bd38      	pop	{r3, r4, r5, pc}
 8004a26:	bf00      	nop
 8004a28:	20000350 	.word	0x20000350

08004a2c <_malloc_r>:
 8004a2c:	b570      	push	{r4, r5, r6, lr}
 8004a2e:	1ccd      	adds	r5, r1, #3
 8004a30:	f025 0503 	bic.w	r5, r5, #3
 8004a34:	3508      	adds	r5, #8
 8004a36:	2d0c      	cmp	r5, #12
 8004a38:	bf38      	it	cc
 8004a3a:	250c      	movcc	r5, #12
 8004a3c:	2d00      	cmp	r5, #0
 8004a3e:	4606      	mov	r6, r0
 8004a40:	db01      	blt.n	8004a46 <_malloc_r+0x1a>
 8004a42:	42a9      	cmp	r1, r5
 8004a44:	d903      	bls.n	8004a4e <_malloc_r+0x22>
 8004a46:	230c      	movs	r3, #12
 8004a48:	6033      	str	r3, [r6, #0]
 8004a4a:	2000      	movs	r0, #0
 8004a4c:	bd70      	pop	{r4, r5, r6, pc}
 8004a4e:	f001 fb5e 	bl	800610e <__malloc_lock>
 8004a52:	4a23      	ldr	r2, [pc, #140]	; (8004ae0 <_malloc_r+0xb4>)
 8004a54:	6814      	ldr	r4, [r2, #0]
 8004a56:	4621      	mov	r1, r4
 8004a58:	b991      	cbnz	r1, 8004a80 <_malloc_r+0x54>
 8004a5a:	4c22      	ldr	r4, [pc, #136]	; (8004ae4 <_malloc_r+0xb8>)
 8004a5c:	6823      	ldr	r3, [r4, #0]
 8004a5e:	b91b      	cbnz	r3, 8004a68 <_malloc_r+0x3c>
 8004a60:	4630      	mov	r0, r6
 8004a62:	f000 fcad 	bl	80053c0 <_sbrk_r>
 8004a66:	6020      	str	r0, [r4, #0]
 8004a68:	4629      	mov	r1, r5
 8004a6a:	4630      	mov	r0, r6
 8004a6c:	f000 fca8 	bl	80053c0 <_sbrk_r>
 8004a70:	1c43      	adds	r3, r0, #1
 8004a72:	d126      	bne.n	8004ac2 <_malloc_r+0x96>
 8004a74:	230c      	movs	r3, #12
 8004a76:	6033      	str	r3, [r6, #0]
 8004a78:	4630      	mov	r0, r6
 8004a7a:	f001 fb49 	bl	8006110 <__malloc_unlock>
 8004a7e:	e7e4      	b.n	8004a4a <_malloc_r+0x1e>
 8004a80:	680b      	ldr	r3, [r1, #0]
 8004a82:	1b5b      	subs	r3, r3, r5
 8004a84:	d41a      	bmi.n	8004abc <_malloc_r+0x90>
 8004a86:	2b0b      	cmp	r3, #11
 8004a88:	d90f      	bls.n	8004aaa <_malloc_r+0x7e>
 8004a8a:	600b      	str	r3, [r1, #0]
 8004a8c:	50cd      	str	r5, [r1, r3]
 8004a8e:	18cc      	adds	r4, r1, r3
 8004a90:	4630      	mov	r0, r6
 8004a92:	f001 fb3d 	bl	8006110 <__malloc_unlock>
 8004a96:	f104 000b 	add.w	r0, r4, #11
 8004a9a:	1d23      	adds	r3, r4, #4
 8004a9c:	f020 0007 	bic.w	r0, r0, #7
 8004aa0:	1ac3      	subs	r3, r0, r3
 8004aa2:	d01b      	beq.n	8004adc <_malloc_r+0xb0>
 8004aa4:	425a      	negs	r2, r3
 8004aa6:	50e2      	str	r2, [r4, r3]
 8004aa8:	bd70      	pop	{r4, r5, r6, pc}
 8004aaa:	428c      	cmp	r4, r1
 8004aac:	bf0d      	iteet	eq
 8004aae:	6863      	ldreq	r3, [r4, #4]
 8004ab0:	684b      	ldrne	r3, [r1, #4]
 8004ab2:	6063      	strne	r3, [r4, #4]
 8004ab4:	6013      	streq	r3, [r2, #0]
 8004ab6:	bf18      	it	ne
 8004ab8:	460c      	movne	r4, r1
 8004aba:	e7e9      	b.n	8004a90 <_malloc_r+0x64>
 8004abc:	460c      	mov	r4, r1
 8004abe:	6849      	ldr	r1, [r1, #4]
 8004ac0:	e7ca      	b.n	8004a58 <_malloc_r+0x2c>
 8004ac2:	1cc4      	adds	r4, r0, #3
 8004ac4:	f024 0403 	bic.w	r4, r4, #3
 8004ac8:	42a0      	cmp	r0, r4
 8004aca:	d005      	beq.n	8004ad8 <_malloc_r+0xac>
 8004acc:	1a21      	subs	r1, r4, r0
 8004ace:	4630      	mov	r0, r6
 8004ad0:	f000 fc76 	bl	80053c0 <_sbrk_r>
 8004ad4:	3001      	adds	r0, #1
 8004ad6:	d0cd      	beq.n	8004a74 <_malloc_r+0x48>
 8004ad8:	6025      	str	r5, [r4, #0]
 8004ada:	e7d9      	b.n	8004a90 <_malloc_r+0x64>
 8004adc:	bd70      	pop	{r4, r5, r6, pc}
 8004ade:	bf00      	nop
 8004ae0:	20000350 	.word	0x20000350
 8004ae4:	20000354 	.word	0x20000354

08004ae8 <__cvt>:
 8004ae8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004aec:	ec55 4b10 	vmov	r4, r5, d0
 8004af0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8004af2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004af6:	2d00      	cmp	r5, #0
 8004af8:	460e      	mov	r6, r1
 8004afa:	4691      	mov	r9, r2
 8004afc:	4619      	mov	r1, r3
 8004afe:	bfb8      	it	lt
 8004b00:	4622      	movlt	r2, r4
 8004b02:	462b      	mov	r3, r5
 8004b04:	f027 0720 	bic.w	r7, r7, #32
 8004b08:	bfbb      	ittet	lt
 8004b0a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004b0e:	461d      	movlt	r5, r3
 8004b10:	2300      	movge	r3, #0
 8004b12:	232d      	movlt	r3, #45	; 0x2d
 8004b14:	bfb8      	it	lt
 8004b16:	4614      	movlt	r4, r2
 8004b18:	2f46      	cmp	r7, #70	; 0x46
 8004b1a:	700b      	strb	r3, [r1, #0]
 8004b1c:	d004      	beq.n	8004b28 <__cvt+0x40>
 8004b1e:	2f45      	cmp	r7, #69	; 0x45
 8004b20:	d100      	bne.n	8004b24 <__cvt+0x3c>
 8004b22:	3601      	adds	r6, #1
 8004b24:	2102      	movs	r1, #2
 8004b26:	e000      	b.n	8004b2a <__cvt+0x42>
 8004b28:	2103      	movs	r1, #3
 8004b2a:	ab03      	add	r3, sp, #12
 8004b2c:	9301      	str	r3, [sp, #4]
 8004b2e:	ab02      	add	r3, sp, #8
 8004b30:	9300      	str	r3, [sp, #0]
 8004b32:	4632      	mov	r2, r6
 8004b34:	4653      	mov	r3, sl
 8004b36:	ec45 4b10 	vmov	d0, r4, r5
 8004b3a:	f000 fd01 	bl	8005540 <_dtoa_r>
 8004b3e:	2f47      	cmp	r7, #71	; 0x47
 8004b40:	4680      	mov	r8, r0
 8004b42:	d102      	bne.n	8004b4a <__cvt+0x62>
 8004b44:	f019 0f01 	tst.w	r9, #1
 8004b48:	d026      	beq.n	8004b98 <__cvt+0xb0>
 8004b4a:	2f46      	cmp	r7, #70	; 0x46
 8004b4c:	eb08 0906 	add.w	r9, r8, r6
 8004b50:	d111      	bne.n	8004b76 <__cvt+0x8e>
 8004b52:	f898 3000 	ldrb.w	r3, [r8]
 8004b56:	2b30      	cmp	r3, #48	; 0x30
 8004b58:	d10a      	bne.n	8004b70 <__cvt+0x88>
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	4620      	mov	r0, r4
 8004b60:	4629      	mov	r1, r5
 8004b62:	f7fb ffad 	bl	8000ac0 <__aeabi_dcmpeq>
 8004b66:	b918      	cbnz	r0, 8004b70 <__cvt+0x88>
 8004b68:	f1c6 0601 	rsb	r6, r6, #1
 8004b6c:	f8ca 6000 	str.w	r6, [sl]
 8004b70:	f8da 3000 	ldr.w	r3, [sl]
 8004b74:	4499      	add	r9, r3
 8004b76:	2200      	movs	r2, #0
 8004b78:	2300      	movs	r3, #0
 8004b7a:	4620      	mov	r0, r4
 8004b7c:	4629      	mov	r1, r5
 8004b7e:	f7fb ff9f 	bl	8000ac0 <__aeabi_dcmpeq>
 8004b82:	b938      	cbnz	r0, 8004b94 <__cvt+0xac>
 8004b84:	2230      	movs	r2, #48	; 0x30
 8004b86:	9b03      	ldr	r3, [sp, #12]
 8004b88:	4599      	cmp	r9, r3
 8004b8a:	d905      	bls.n	8004b98 <__cvt+0xb0>
 8004b8c:	1c59      	adds	r1, r3, #1
 8004b8e:	9103      	str	r1, [sp, #12]
 8004b90:	701a      	strb	r2, [r3, #0]
 8004b92:	e7f8      	b.n	8004b86 <__cvt+0x9e>
 8004b94:	f8cd 900c 	str.w	r9, [sp, #12]
 8004b98:	9b03      	ldr	r3, [sp, #12]
 8004b9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004b9c:	eba3 0308 	sub.w	r3, r3, r8
 8004ba0:	4640      	mov	r0, r8
 8004ba2:	6013      	str	r3, [r2, #0]
 8004ba4:	b004      	add	sp, #16
 8004ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004baa <__exponent>:
 8004baa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004bac:	4603      	mov	r3, r0
 8004bae:	2900      	cmp	r1, #0
 8004bb0:	bfb8      	it	lt
 8004bb2:	4249      	neglt	r1, r1
 8004bb4:	f803 2b02 	strb.w	r2, [r3], #2
 8004bb8:	bfb4      	ite	lt
 8004bba:	222d      	movlt	r2, #45	; 0x2d
 8004bbc:	222b      	movge	r2, #43	; 0x2b
 8004bbe:	2909      	cmp	r1, #9
 8004bc0:	7042      	strb	r2, [r0, #1]
 8004bc2:	dd20      	ble.n	8004c06 <__exponent+0x5c>
 8004bc4:	f10d 0207 	add.w	r2, sp, #7
 8004bc8:	4617      	mov	r7, r2
 8004bca:	260a      	movs	r6, #10
 8004bcc:	fb91 f5f6 	sdiv	r5, r1, r6
 8004bd0:	fb06 1115 	mls	r1, r6, r5, r1
 8004bd4:	3130      	adds	r1, #48	; 0x30
 8004bd6:	2d09      	cmp	r5, #9
 8004bd8:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004bdc:	f102 34ff 	add.w	r4, r2, #4294967295
 8004be0:	4629      	mov	r1, r5
 8004be2:	dc09      	bgt.n	8004bf8 <__exponent+0x4e>
 8004be4:	3130      	adds	r1, #48	; 0x30
 8004be6:	3a02      	subs	r2, #2
 8004be8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004bec:	42ba      	cmp	r2, r7
 8004bee:	461c      	mov	r4, r3
 8004bf0:	d304      	bcc.n	8004bfc <__exponent+0x52>
 8004bf2:	1a20      	subs	r0, r4, r0
 8004bf4:	b003      	add	sp, #12
 8004bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bf8:	4622      	mov	r2, r4
 8004bfa:	e7e7      	b.n	8004bcc <__exponent+0x22>
 8004bfc:	f812 1b01 	ldrb.w	r1, [r2], #1
 8004c00:	f803 1b01 	strb.w	r1, [r3], #1
 8004c04:	e7f2      	b.n	8004bec <__exponent+0x42>
 8004c06:	2230      	movs	r2, #48	; 0x30
 8004c08:	461c      	mov	r4, r3
 8004c0a:	4411      	add	r1, r2
 8004c0c:	f804 2b02 	strb.w	r2, [r4], #2
 8004c10:	7059      	strb	r1, [r3, #1]
 8004c12:	e7ee      	b.n	8004bf2 <__exponent+0x48>

08004c14 <_printf_float>:
 8004c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c18:	b08d      	sub	sp, #52	; 0x34
 8004c1a:	460c      	mov	r4, r1
 8004c1c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8004c20:	4616      	mov	r6, r2
 8004c22:	461f      	mov	r7, r3
 8004c24:	4605      	mov	r5, r0
 8004c26:	f001 fa59 	bl	80060dc <_localeconv_r>
 8004c2a:	6803      	ldr	r3, [r0, #0]
 8004c2c:	9304      	str	r3, [sp, #16]
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f7fb face 	bl	80001d0 <strlen>
 8004c34:	2300      	movs	r3, #0
 8004c36:	930a      	str	r3, [sp, #40]	; 0x28
 8004c38:	f8d8 3000 	ldr.w	r3, [r8]
 8004c3c:	9005      	str	r0, [sp, #20]
 8004c3e:	3307      	adds	r3, #7
 8004c40:	f023 0307 	bic.w	r3, r3, #7
 8004c44:	f103 0208 	add.w	r2, r3, #8
 8004c48:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004c4c:	f8d4 b000 	ldr.w	fp, [r4]
 8004c50:	f8c8 2000 	str.w	r2, [r8]
 8004c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c58:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004c5c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004c60:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004c64:	9307      	str	r3, [sp, #28]
 8004c66:	f8cd 8018 	str.w	r8, [sp, #24]
 8004c6a:	f04f 32ff 	mov.w	r2, #4294967295
 8004c6e:	4ba5      	ldr	r3, [pc, #660]	; (8004f04 <_printf_float+0x2f0>)
 8004c70:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004c74:	f7fb ff56 	bl	8000b24 <__aeabi_dcmpun>
 8004c78:	2800      	cmp	r0, #0
 8004c7a:	f040 81fb 	bne.w	8005074 <_printf_float+0x460>
 8004c7e:	f04f 32ff 	mov.w	r2, #4294967295
 8004c82:	4ba0      	ldr	r3, [pc, #640]	; (8004f04 <_printf_float+0x2f0>)
 8004c84:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004c88:	f7fb ff2e 	bl	8000ae8 <__aeabi_dcmple>
 8004c8c:	2800      	cmp	r0, #0
 8004c8e:	f040 81f1 	bne.w	8005074 <_printf_float+0x460>
 8004c92:	2200      	movs	r2, #0
 8004c94:	2300      	movs	r3, #0
 8004c96:	4640      	mov	r0, r8
 8004c98:	4649      	mov	r1, r9
 8004c9a:	f7fb ff1b 	bl	8000ad4 <__aeabi_dcmplt>
 8004c9e:	b110      	cbz	r0, 8004ca6 <_printf_float+0x92>
 8004ca0:	232d      	movs	r3, #45	; 0x2d
 8004ca2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ca6:	4b98      	ldr	r3, [pc, #608]	; (8004f08 <_printf_float+0x2f4>)
 8004ca8:	4a98      	ldr	r2, [pc, #608]	; (8004f0c <_printf_float+0x2f8>)
 8004caa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004cae:	bf8c      	ite	hi
 8004cb0:	4690      	movhi	r8, r2
 8004cb2:	4698      	movls	r8, r3
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	f02b 0204 	bic.w	r2, fp, #4
 8004cba:	6123      	str	r3, [r4, #16]
 8004cbc:	6022      	str	r2, [r4, #0]
 8004cbe:	f04f 0900 	mov.w	r9, #0
 8004cc2:	9700      	str	r7, [sp, #0]
 8004cc4:	4633      	mov	r3, r6
 8004cc6:	aa0b      	add	r2, sp, #44	; 0x2c
 8004cc8:	4621      	mov	r1, r4
 8004cca:	4628      	mov	r0, r5
 8004ccc:	f000 f9e2 	bl	8005094 <_printf_common>
 8004cd0:	3001      	adds	r0, #1
 8004cd2:	f040 8093 	bne.w	8004dfc <_printf_float+0x1e8>
 8004cd6:	f04f 30ff 	mov.w	r0, #4294967295
 8004cda:	b00d      	add	sp, #52	; 0x34
 8004cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ce0:	6861      	ldr	r1, [r4, #4]
 8004ce2:	1c4b      	adds	r3, r1, #1
 8004ce4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8004ce8:	d13f      	bne.n	8004d6a <_printf_float+0x156>
 8004cea:	2306      	movs	r3, #6
 8004cec:	6063      	str	r3, [r4, #4]
 8004cee:	2300      	movs	r3, #0
 8004cf0:	9303      	str	r3, [sp, #12]
 8004cf2:	ab0a      	add	r3, sp, #40	; 0x28
 8004cf4:	9302      	str	r3, [sp, #8]
 8004cf6:	ab09      	add	r3, sp, #36	; 0x24
 8004cf8:	9300      	str	r3, [sp, #0]
 8004cfa:	ec49 8b10 	vmov	d0, r8, r9
 8004cfe:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004d02:	6022      	str	r2, [r4, #0]
 8004d04:	f8cd a004 	str.w	sl, [sp, #4]
 8004d08:	6861      	ldr	r1, [r4, #4]
 8004d0a:	4628      	mov	r0, r5
 8004d0c:	f7ff feec 	bl	8004ae8 <__cvt>
 8004d10:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8004d14:	2b47      	cmp	r3, #71	; 0x47
 8004d16:	4680      	mov	r8, r0
 8004d18:	d109      	bne.n	8004d2e <_printf_float+0x11a>
 8004d1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d1c:	1cd8      	adds	r0, r3, #3
 8004d1e:	db02      	blt.n	8004d26 <_printf_float+0x112>
 8004d20:	6862      	ldr	r2, [r4, #4]
 8004d22:	4293      	cmp	r3, r2
 8004d24:	dd57      	ble.n	8004dd6 <_printf_float+0x1c2>
 8004d26:	f1aa 0a02 	sub.w	sl, sl, #2
 8004d2a:	fa5f fa8a 	uxtb.w	sl, sl
 8004d2e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004d32:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004d34:	d834      	bhi.n	8004da0 <_printf_float+0x18c>
 8004d36:	3901      	subs	r1, #1
 8004d38:	4652      	mov	r2, sl
 8004d3a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004d3e:	9109      	str	r1, [sp, #36]	; 0x24
 8004d40:	f7ff ff33 	bl	8004baa <__exponent>
 8004d44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d46:	1883      	adds	r3, r0, r2
 8004d48:	2a01      	cmp	r2, #1
 8004d4a:	4681      	mov	r9, r0
 8004d4c:	6123      	str	r3, [r4, #16]
 8004d4e:	dc02      	bgt.n	8004d56 <_printf_float+0x142>
 8004d50:	6822      	ldr	r2, [r4, #0]
 8004d52:	07d1      	lsls	r1, r2, #31
 8004d54:	d501      	bpl.n	8004d5a <_printf_float+0x146>
 8004d56:	3301      	adds	r3, #1
 8004d58:	6123      	str	r3, [r4, #16]
 8004d5a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d0af      	beq.n	8004cc2 <_printf_float+0xae>
 8004d62:	232d      	movs	r3, #45	; 0x2d
 8004d64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d68:	e7ab      	b.n	8004cc2 <_printf_float+0xae>
 8004d6a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8004d6e:	d002      	beq.n	8004d76 <_printf_float+0x162>
 8004d70:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004d74:	d1bb      	bne.n	8004cee <_printf_float+0xda>
 8004d76:	b189      	cbz	r1, 8004d9c <_printf_float+0x188>
 8004d78:	2300      	movs	r3, #0
 8004d7a:	9303      	str	r3, [sp, #12]
 8004d7c:	ab0a      	add	r3, sp, #40	; 0x28
 8004d7e:	9302      	str	r3, [sp, #8]
 8004d80:	ab09      	add	r3, sp, #36	; 0x24
 8004d82:	9300      	str	r3, [sp, #0]
 8004d84:	ec49 8b10 	vmov	d0, r8, r9
 8004d88:	6022      	str	r2, [r4, #0]
 8004d8a:	f8cd a004 	str.w	sl, [sp, #4]
 8004d8e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004d92:	4628      	mov	r0, r5
 8004d94:	f7ff fea8 	bl	8004ae8 <__cvt>
 8004d98:	4680      	mov	r8, r0
 8004d9a:	e7be      	b.n	8004d1a <_printf_float+0x106>
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e7a5      	b.n	8004cec <_printf_float+0xd8>
 8004da0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8004da4:	d119      	bne.n	8004dda <_printf_float+0x1c6>
 8004da6:	2900      	cmp	r1, #0
 8004da8:	6863      	ldr	r3, [r4, #4]
 8004daa:	dd0c      	ble.n	8004dc6 <_printf_float+0x1b2>
 8004dac:	6121      	str	r1, [r4, #16]
 8004dae:	b913      	cbnz	r3, 8004db6 <_printf_float+0x1a2>
 8004db0:	6822      	ldr	r2, [r4, #0]
 8004db2:	07d2      	lsls	r2, r2, #31
 8004db4:	d502      	bpl.n	8004dbc <_printf_float+0x1a8>
 8004db6:	3301      	adds	r3, #1
 8004db8:	440b      	add	r3, r1
 8004dba:	6123      	str	r3, [r4, #16]
 8004dbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dbe:	65a3      	str	r3, [r4, #88]	; 0x58
 8004dc0:	f04f 0900 	mov.w	r9, #0
 8004dc4:	e7c9      	b.n	8004d5a <_printf_float+0x146>
 8004dc6:	b913      	cbnz	r3, 8004dce <_printf_float+0x1ba>
 8004dc8:	6822      	ldr	r2, [r4, #0]
 8004dca:	07d0      	lsls	r0, r2, #31
 8004dcc:	d501      	bpl.n	8004dd2 <_printf_float+0x1be>
 8004dce:	3302      	adds	r3, #2
 8004dd0:	e7f3      	b.n	8004dba <_printf_float+0x1a6>
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e7f1      	b.n	8004dba <_printf_float+0x1a6>
 8004dd6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8004dda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ddc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004dde:	4293      	cmp	r3, r2
 8004de0:	db05      	blt.n	8004dee <_printf_float+0x1da>
 8004de2:	6822      	ldr	r2, [r4, #0]
 8004de4:	6123      	str	r3, [r4, #16]
 8004de6:	07d1      	lsls	r1, r2, #31
 8004de8:	d5e8      	bpl.n	8004dbc <_printf_float+0x1a8>
 8004dea:	3301      	adds	r3, #1
 8004dec:	e7e5      	b.n	8004dba <_printf_float+0x1a6>
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	bfd4      	ite	le
 8004df2:	f1c3 0302 	rsble	r3, r3, #2
 8004df6:	2301      	movgt	r3, #1
 8004df8:	4413      	add	r3, r2
 8004dfa:	e7de      	b.n	8004dba <_printf_float+0x1a6>
 8004dfc:	6823      	ldr	r3, [r4, #0]
 8004dfe:	055a      	lsls	r2, r3, #21
 8004e00:	d407      	bmi.n	8004e12 <_printf_float+0x1fe>
 8004e02:	6923      	ldr	r3, [r4, #16]
 8004e04:	4642      	mov	r2, r8
 8004e06:	4631      	mov	r1, r6
 8004e08:	4628      	mov	r0, r5
 8004e0a:	47b8      	blx	r7
 8004e0c:	3001      	adds	r0, #1
 8004e0e:	d12b      	bne.n	8004e68 <_printf_float+0x254>
 8004e10:	e761      	b.n	8004cd6 <_printf_float+0xc2>
 8004e12:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004e16:	f240 80e2 	bls.w	8004fde <_printf_float+0x3ca>
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004e22:	f7fb fe4d 	bl	8000ac0 <__aeabi_dcmpeq>
 8004e26:	2800      	cmp	r0, #0
 8004e28:	d03c      	beq.n	8004ea4 <_printf_float+0x290>
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	4a38      	ldr	r2, [pc, #224]	; (8004f10 <_printf_float+0x2fc>)
 8004e2e:	4631      	mov	r1, r6
 8004e30:	4628      	mov	r0, r5
 8004e32:	47b8      	blx	r7
 8004e34:	3001      	adds	r0, #1
 8004e36:	f43f af4e 	beq.w	8004cd6 <_printf_float+0xc2>
 8004e3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	db02      	blt.n	8004e48 <_printf_float+0x234>
 8004e42:	6823      	ldr	r3, [r4, #0]
 8004e44:	07d8      	lsls	r0, r3, #31
 8004e46:	d50f      	bpl.n	8004e68 <_printf_float+0x254>
 8004e48:	9b05      	ldr	r3, [sp, #20]
 8004e4a:	9a04      	ldr	r2, [sp, #16]
 8004e4c:	4631      	mov	r1, r6
 8004e4e:	4628      	mov	r0, r5
 8004e50:	47b8      	blx	r7
 8004e52:	3001      	adds	r0, #1
 8004e54:	f43f af3f 	beq.w	8004cd6 <_printf_float+0xc2>
 8004e58:	f04f 0800 	mov.w	r8, #0
 8004e5c:	f104 091a 	add.w	r9, r4, #26
 8004e60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e62:	3b01      	subs	r3, #1
 8004e64:	4598      	cmp	r8, r3
 8004e66:	db12      	blt.n	8004e8e <_printf_float+0x27a>
 8004e68:	6823      	ldr	r3, [r4, #0]
 8004e6a:	079b      	lsls	r3, r3, #30
 8004e6c:	d509      	bpl.n	8004e82 <_printf_float+0x26e>
 8004e6e:	f04f 0800 	mov.w	r8, #0
 8004e72:	f104 0919 	add.w	r9, r4, #25
 8004e76:	68e3      	ldr	r3, [r4, #12]
 8004e78:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004e7a:	1a9b      	subs	r3, r3, r2
 8004e7c:	4598      	cmp	r8, r3
 8004e7e:	f2c0 80ee 	blt.w	800505e <_printf_float+0x44a>
 8004e82:	68e0      	ldr	r0, [r4, #12]
 8004e84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e86:	4298      	cmp	r0, r3
 8004e88:	bfb8      	it	lt
 8004e8a:	4618      	movlt	r0, r3
 8004e8c:	e725      	b.n	8004cda <_printf_float+0xc6>
 8004e8e:	2301      	movs	r3, #1
 8004e90:	464a      	mov	r2, r9
 8004e92:	4631      	mov	r1, r6
 8004e94:	4628      	mov	r0, r5
 8004e96:	47b8      	blx	r7
 8004e98:	3001      	adds	r0, #1
 8004e9a:	f43f af1c 	beq.w	8004cd6 <_printf_float+0xc2>
 8004e9e:	f108 0801 	add.w	r8, r8, #1
 8004ea2:	e7dd      	b.n	8004e60 <_printf_float+0x24c>
 8004ea4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	dc34      	bgt.n	8004f14 <_printf_float+0x300>
 8004eaa:	2301      	movs	r3, #1
 8004eac:	4a18      	ldr	r2, [pc, #96]	; (8004f10 <_printf_float+0x2fc>)
 8004eae:	4631      	mov	r1, r6
 8004eb0:	4628      	mov	r0, r5
 8004eb2:	47b8      	blx	r7
 8004eb4:	3001      	adds	r0, #1
 8004eb6:	f43f af0e 	beq.w	8004cd6 <_printf_float+0xc2>
 8004eba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ebc:	b923      	cbnz	r3, 8004ec8 <_printf_float+0x2b4>
 8004ebe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ec0:	b913      	cbnz	r3, 8004ec8 <_printf_float+0x2b4>
 8004ec2:	6823      	ldr	r3, [r4, #0]
 8004ec4:	07d9      	lsls	r1, r3, #31
 8004ec6:	d5cf      	bpl.n	8004e68 <_printf_float+0x254>
 8004ec8:	9b05      	ldr	r3, [sp, #20]
 8004eca:	9a04      	ldr	r2, [sp, #16]
 8004ecc:	4631      	mov	r1, r6
 8004ece:	4628      	mov	r0, r5
 8004ed0:	47b8      	blx	r7
 8004ed2:	3001      	adds	r0, #1
 8004ed4:	f43f aeff 	beq.w	8004cd6 <_printf_float+0xc2>
 8004ed8:	f04f 0900 	mov.w	r9, #0
 8004edc:	f104 0a1a 	add.w	sl, r4, #26
 8004ee0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ee2:	425b      	negs	r3, r3
 8004ee4:	4599      	cmp	r9, r3
 8004ee6:	db01      	blt.n	8004eec <_printf_float+0x2d8>
 8004ee8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004eea:	e78b      	b.n	8004e04 <_printf_float+0x1f0>
 8004eec:	2301      	movs	r3, #1
 8004eee:	4652      	mov	r2, sl
 8004ef0:	4631      	mov	r1, r6
 8004ef2:	4628      	mov	r0, r5
 8004ef4:	47b8      	blx	r7
 8004ef6:	3001      	adds	r0, #1
 8004ef8:	f43f aeed 	beq.w	8004cd6 <_printf_float+0xc2>
 8004efc:	f109 0901 	add.w	r9, r9, #1
 8004f00:	e7ee      	b.n	8004ee0 <_printf_float+0x2cc>
 8004f02:	bf00      	nop
 8004f04:	7fefffff 	.word	0x7fefffff
 8004f08:	08006b34 	.word	0x08006b34
 8004f0c:	08006b38 	.word	0x08006b38
 8004f10:	08006b44 	.word	0x08006b44
 8004f14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f16:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	bfa8      	it	ge
 8004f1c:	461a      	movge	r2, r3
 8004f1e:	2a00      	cmp	r2, #0
 8004f20:	4691      	mov	r9, r2
 8004f22:	dc38      	bgt.n	8004f96 <_printf_float+0x382>
 8004f24:	f104 031a 	add.w	r3, r4, #26
 8004f28:	f04f 0b00 	mov.w	fp, #0
 8004f2c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004f30:	9306      	str	r3, [sp, #24]
 8004f32:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004f36:	ebaa 0309 	sub.w	r3, sl, r9
 8004f3a:	459b      	cmp	fp, r3
 8004f3c:	db33      	blt.n	8004fa6 <_printf_float+0x392>
 8004f3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f42:	429a      	cmp	r2, r3
 8004f44:	db3a      	blt.n	8004fbc <_printf_float+0x3a8>
 8004f46:	6823      	ldr	r3, [r4, #0]
 8004f48:	07da      	lsls	r2, r3, #31
 8004f4a:	d437      	bmi.n	8004fbc <_printf_float+0x3a8>
 8004f4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f4e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004f50:	eba3 020a 	sub.w	r2, r3, sl
 8004f54:	eba3 0901 	sub.w	r9, r3, r1
 8004f58:	4591      	cmp	r9, r2
 8004f5a:	bfa8      	it	ge
 8004f5c:	4691      	movge	r9, r2
 8004f5e:	f1b9 0f00 	cmp.w	r9, #0
 8004f62:	dc33      	bgt.n	8004fcc <_printf_float+0x3b8>
 8004f64:	f04f 0800 	mov.w	r8, #0
 8004f68:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004f6c:	f104 0a1a 	add.w	sl, r4, #26
 8004f70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f74:	1a9b      	subs	r3, r3, r2
 8004f76:	eba3 0309 	sub.w	r3, r3, r9
 8004f7a:	4598      	cmp	r8, r3
 8004f7c:	f6bf af74 	bge.w	8004e68 <_printf_float+0x254>
 8004f80:	2301      	movs	r3, #1
 8004f82:	4652      	mov	r2, sl
 8004f84:	4631      	mov	r1, r6
 8004f86:	4628      	mov	r0, r5
 8004f88:	47b8      	blx	r7
 8004f8a:	3001      	adds	r0, #1
 8004f8c:	f43f aea3 	beq.w	8004cd6 <_printf_float+0xc2>
 8004f90:	f108 0801 	add.w	r8, r8, #1
 8004f94:	e7ec      	b.n	8004f70 <_printf_float+0x35c>
 8004f96:	4613      	mov	r3, r2
 8004f98:	4631      	mov	r1, r6
 8004f9a:	4642      	mov	r2, r8
 8004f9c:	4628      	mov	r0, r5
 8004f9e:	47b8      	blx	r7
 8004fa0:	3001      	adds	r0, #1
 8004fa2:	d1bf      	bne.n	8004f24 <_printf_float+0x310>
 8004fa4:	e697      	b.n	8004cd6 <_printf_float+0xc2>
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	9a06      	ldr	r2, [sp, #24]
 8004faa:	4631      	mov	r1, r6
 8004fac:	4628      	mov	r0, r5
 8004fae:	47b8      	blx	r7
 8004fb0:	3001      	adds	r0, #1
 8004fb2:	f43f ae90 	beq.w	8004cd6 <_printf_float+0xc2>
 8004fb6:	f10b 0b01 	add.w	fp, fp, #1
 8004fba:	e7ba      	b.n	8004f32 <_printf_float+0x31e>
 8004fbc:	9b05      	ldr	r3, [sp, #20]
 8004fbe:	9a04      	ldr	r2, [sp, #16]
 8004fc0:	4631      	mov	r1, r6
 8004fc2:	4628      	mov	r0, r5
 8004fc4:	47b8      	blx	r7
 8004fc6:	3001      	adds	r0, #1
 8004fc8:	d1c0      	bne.n	8004f4c <_printf_float+0x338>
 8004fca:	e684      	b.n	8004cd6 <_printf_float+0xc2>
 8004fcc:	464b      	mov	r3, r9
 8004fce:	eb08 020a 	add.w	r2, r8, sl
 8004fd2:	4631      	mov	r1, r6
 8004fd4:	4628      	mov	r0, r5
 8004fd6:	47b8      	blx	r7
 8004fd8:	3001      	adds	r0, #1
 8004fda:	d1c3      	bne.n	8004f64 <_printf_float+0x350>
 8004fdc:	e67b      	b.n	8004cd6 <_printf_float+0xc2>
 8004fde:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004fe0:	2a01      	cmp	r2, #1
 8004fe2:	dc01      	bgt.n	8004fe8 <_printf_float+0x3d4>
 8004fe4:	07db      	lsls	r3, r3, #31
 8004fe6:	d537      	bpl.n	8005058 <_printf_float+0x444>
 8004fe8:	2301      	movs	r3, #1
 8004fea:	4642      	mov	r2, r8
 8004fec:	4631      	mov	r1, r6
 8004fee:	4628      	mov	r0, r5
 8004ff0:	47b8      	blx	r7
 8004ff2:	3001      	adds	r0, #1
 8004ff4:	f43f ae6f 	beq.w	8004cd6 <_printf_float+0xc2>
 8004ff8:	9b05      	ldr	r3, [sp, #20]
 8004ffa:	9a04      	ldr	r2, [sp, #16]
 8004ffc:	4631      	mov	r1, r6
 8004ffe:	4628      	mov	r0, r5
 8005000:	47b8      	blx	r7
 8005002:	3001      	adds	r0, #1
 8005004:	f43f ae67 	beq.w	8004cd6 <_printf_float+0xc2>
 8005008:	2200      	movs	r2, #0
 800500a:	2300      	movs	r3, #0
 800500c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005010:	f7fb fd56 	bl	8000ac0 <__aeabi_dcmpeq>
 8005014:	b158      	cbz	r0, 800502e <_printf_float+0x41a>
 8005016:	f04f 0800 	mov.w	r8, #0
 800501a:	f104 0a1a 	add.w	sl, r4, #26
 800501e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005020:	3b01      	subs	r3, #1
 8005022:	4598      	cmp	r8, r3
 8005024:	db0d      	blt.n	8005042 <_printf_float+0x42e>
 8005026:	464b      	mov	r3, r9
 8005028:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800502c:	e6eb      	b.n	8004e06 <_printf_float+0x1f2>
 800502e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005030:	f108 0201 	add.w	r2, r8, #1
 8005034:	3b01      	subs	r3, #1
 8005036:	4631      	mov	r1, r6
 8005038:	4628      	mov	r0, r5
 800503a:	47b8      	blx	r7
 800503c:	3001      	adds	r0, #1
 800503e:	d1f2      	bne.n	8005026 <_printf_float+0x412>
 8005040:	e649      	b.n	8004cd6 <_printf_float+0xc2>
 8005042:	2301      	movs	r3, #1
 8005044:	4652      	mov	r2, sl
 8005046:	4631      	mov	r1, r6
 8005048:	4628      	mov	r0, r5
 800504a:	47b8      	blx	r7
 800504c:	3001      	adds	r0, #1
 800504e:	f43f ae42 	beq.w	8004cd6 <_printf_float+0xc2>
 8005052:	f108 0801 	add.w	r8, r8, #1
 8005056:	e7e2      	b.n	800501e <_printf_float+0x40a>
 8005058:	2301      	movs	r3, #1
 800505a:	4642      	mov	r2, r8
 800505c:	e7eb      	b.n	8005036 <_printf_float+0x422>
 800505e:	2301      	movs	r3, #1
 8005060:	464a      	mov	r2, r9
 8005062:	4631      	mov	r1, r6
 8005064:	4628      	mov	r0, r5
 8005066:	47b8      	blx	r7
 8005068:	3001      	adds	r0, #1
 800506a:	f43f ae34 	beq.w	8004cd6 <_printf_float+0xc2>
 800506e:	f108 0801 	add.w	r8, r8, #1
 8005072:	e700      	b.n	8004e76 <_printf_float+0x262>
 8005074:	4642      	mov	r2, r8
 8005076:	464b      	mov	r3, r9
 8005078:	4640      	mov	r0, r8
 800507a:	4649      	mov	r1, r9
 800507c:	f7fb fd52 	bl	8000b24 <__aeabi_dcmpun>
 8005080:	2800      	cmp	r0, #0
 8005082:	f43f ae2d 	beq.w	8004ce0 <_printf_float+0xcc>
 8005086:	4b01      	ldr	r3, [pc, #4]	; (800508c <_printf_float+0x478>)
 8005088:	4a01      	ldr	r2, [pc, #4]	; (8005090 <_printf_float+0x47c>)
 800508a:	e60e      	b.n	8004caa <_printf_float+0x96>
 800508c:	08006b3c 	.word	0x08006b3c
 8005090:	08006b40 	.word	0x08006b40

08005094 <_printf_common>:
 8005094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005098:	4691      	mov	r9, r2
 800509a:	461f      	mov	r7, r3
 800509c:	688a      	ldr	r2, [r1, #8]
 800509e:	690b      	ldr	r3, [r1, #16]
 80050a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80050a4:	4293      	cmp	r3, r2
 80050a6:	bfb8      	it	lt
 80050a8:	4613      	movlt	r3, r2
 80050aa:	f8c9 3000 	str.w	r3, [r9]
 80050ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80050b2:	4606      	mov	r6, r0
 80050b4:	460c      	mov	r4, r1
 80050b6:	b112      	cbz	r2, 80050be <_printf_common+0x2a>
 80050b8:	3301      	adds	r3, #1
 80050ba:	f8c9 3000 	str.w	r3, [r9]
 80050be:	6823      	ldr	r3, [r4, #0]
 80050c0:	0699      	lsls	r1, r3, #26
 80050c2:	bf42      	ittt	mi
 80050c4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80050c8:	3302      	addmi	r3, #2
 80050ca:	f8c9 3000 	strmi.w	r3, [r9]
 80050ce:	6825      	ldr	r5, [r4, #0]
 80050d0:	f015 0506 	ands.w	r5, r5, #6
 80050d4:	d107      	bne.n	80050e6 <_printf_common+0x52>
 80050d6:	f104 0a19 	add.w	sl, r4, #25
 80050da:	68e3      	ldr	r3, [r4, #12]
 80050dc:	f8d9 2000 	ldr.w	r2, [r9]
 80050e0:	1a9b      	subs	r3, r3, r2
 80050e2:	429d      	cmp	r5, r3
 80050e4:	db29      	blt.n	800513a <_printf_common+0xa6>
 80050e6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80050ea:	6822      	ldr	r2, [r4, #0]
 80050ec:	3300      	adds	r3, #0
 80050ee:	bf18      	it	ne
 80050f0:	2301      	movne	r3, #1
 80050f2:	0692      	lsls	r2, r2, #26
 80050f4:	d42e      	bmi.n	8005154 <_printf_common+0xc0>
 80050f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80050fa:	4639      	mov	r1, r7
 80050fc:	4630      	mov	r0, r6
 80050fe:	47c0      	blx	r8
 8005100:	3001      	adds	r0, #1
 8005102:	d021      	beq.n	8005148 <_printf_common+0xb4>
 8005104:	6823      	ldr	r3, [r4, #0]
 8005106:	68e5      	ldr	r5, [r4, #12]
 8005108:	f8d9 2000 	ldr.w	r2, [r9]
 800510c:	f003 0306 	and.w	r3, r3, #6
 8005110:	2b04      	cmp	r3, #4
 8005112:	bf08      	it	eq
 8005114:	1aad      	subeq	r5, r5, r2
 8005116:	68a3      	ldr	r3, [r4, #8]
 8005118:	6922      	ldr	r2, [r4, #16]
 800511a:	bf0c      	ite	eq
 800511c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005120:	2500      	movne	r5, #0
 8005122:	4293      	cmp	r3, r2
 8005124:	bfc4      	itt	gt
 8005126:	1a9b      	subgt	r3, r3, r2
 8005128:	18ed      	addgt	r5, r5, r3
 800512a:	f04f 0900 	mov.w	r9, #0
 800512e:	341a      	adds	r4, #26
 8005130:	454d      	cmp	r5, r9
 8005132:	d11b      	bne.n	800516c <_printf_common+0xd8>
 8005134:	2000      	movs	r0, #0
 8005136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800513a:	2301      	movs	r3, #1
 800513c:	4652      	mov	r2, sl
 800513e:	4639      	mov	r1, r7
 8005140:	4630      	mov	r0, r6
 8005142:	47c0      	blx	r8
 8005144:	3001      	adds	r0, #1
 8005146:	d103      	bne.n	8005150 <_printf_common+0xbc>
 8005148:	f04f 30ff 	mov.w	r0, #4294967295
 800514c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005150:	3501      	adds	r5, #1
 8005152:	e7c2      	b.n	80050da <_printf_common+0x46>
 8005154:	18e1      	adds	r1, r4, r3
 8005156:	1c5a      	adds	r2, r3, #1
 8005158:	2030      	movs	r0, #48	; 0x30
 800515a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800515e:	4422      	add	r2, r4
 8005160:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005164:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005168:	3302      	adds	r3, #2
 800516a:	e7c4      	b.n	80050f6 <_printf_common+0x62>
 800516c:	2301      	movs	r3, #1
 800516e:	4622      	mov	r2, r4
 8005170:	4639      	mov	r1, r7
 8005172:	4630      	mov	r0, r6
 8005174:	47c0      	blx	r8
 8005176:	3001      	adds	r0, #1
 8005178:	d0e6      	beq.n	8005148 <_printf_common+0xb4>
 800517a:	f109 0901 	add.w	r9, r9, #1
 800517e:	e7d7      	b.n	8005130 <_printf_common+0x9c>

08005180 <_printf_i>:
 8005180:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005184:	4617      	mov	r7, r2
 8005186:	7e0a      	ldrb	r2, [r1, #24]
 8005188:	b085      	sub	sp, #20
 800518a:	2a6e      	cmp	r2, #110	; 0x6e
 800518c:	4698      	mov	r8, r3
 800518e:	4606      	mov	r6, r0
 8005190:	460c      	mov	r4, r1
 8005192:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005194:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8005198:	f000 80bc 	beq.w	8005314 <_printf_i+0x194>
 800519c:	d81a      	bhi.n	80051d4 <_printf_i+0x54>
 800519e:	2a63      	cmp	r2, #99	; 0x63
 80051a0:	d02e      	beq.n	8005200 <_printf_i+0x80>
 80051a2:	d80a      	bhi.n	80051ba <_printf_i+0x3a>
 80051a4:	2a00      	cmp	r2, #0
 80051a6:	f000 80c8 	beq.w	800533a <_printf_i+0x1ba>
 80051aa:	2a58      	cmp	r2, #88	; 0x58
 80051ac:	f000 808a 	beq.w	80052c4 <_printf_i+0x144>
 80051b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051b4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80051b8:	e02a      	b.n	8005210 <_printf_i+0x90>
 80051ba:	2a64      	cmp	r2, #100	; 0x64
 80051bc:	d001      	beq.n	80051c2 <_printf_i+0x42>
 80051be:	2a69      	cmp	r2, #105	; 0x69
 80051c0:	d1f6      	bne.n	80051b0 <_printf_i+0x30>
 80051c2:	6821      	ldr	r1, [r4, #0]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	f011 0f80 	tst.w	r1, #128	; 0x80
 80051ca:	d023      	beq.n	8005214 <_printf_i+0x94>
 80051cc:	1d11      	adds	r1, r2, #4
 80051ce:	6019      	str	r1, [r3, #0]
 80051d0:	6813      	ldr	r3, [r2, #0]
 80051d2:	e027      	b.n	8005224 <_printf_i+0xa4>
 80051d4:	2a73      	cmp	r2, #115	; 0x73
 80051d6:	f000 80b4 	beq.w	8005342 <_printf_i+0x1c2>
 80051da:	d808      	bhi.n	80051ee <_printf_i+0x6e>
 80051dc:	2a6f      	cmp	r2, #111	; 0x6f
 80051de:	d02a      	beq.n	8005236 <_printf_i+0xb6>
 80051e0:	2a70      	cmp	r2, #112	; 0x70
 80051e2:	d1e5      	bne.n	80051b0 <_printf_i+0x30>
 80051e4:	680a      	ldr	r2, [r1, #0]
 80051e6:	f042 0220 	orr.w	r2, r2, #32
 80051ea:	600a      	str	r2, [r1, #0]
 80051ec:	e003      	b.n	80051f6 <_printf_i+0x76>
 80051ee:	2a75      	cmp	r2, #117	; 0x75
 80051f0:	d021      	beq.n	8005236 <_printf_i+0xb6>
 80051f2:	2a78      	cmp	r2, #120	; 0x78
 80051f4:	d1dc      	bne.n	80051b0 <_printf_i+0x30>
 80051f6:	2278      	movs	r2, #120	; 0x78
 80051f8:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80051fc:	496e      	ldr	r1, [pc, #440]	; (80053b8 <_printf_i+0x238>)
 80051fe:	e064      	b.n	80052ca <_printf_i+0x14a>
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8005206:	1d11      	adds	r1, r2, #4
 8005208:	6019      	str	r1, [r3, #0]
 800520a:	6813      	ldr	r3, [r2, #0]
 800520c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005210:	2301      	movs	r3, #1
 8005212:	e0a3      	b.n	800535c <_printf_i+0x1dc>
 8005214:	f011 0f40 	tst.w	r1, #64	; 0x40
 8005218:	f102 0104 	add.w	r1, r2, #4
 800521c:	6019      	str	r1, [r3, #0]
 800521e:	d0d7      	beq.n	80051d0 <_printf_i+0x50>
 8005220:	f9b2 3000 	ldrsh.w	r3, [r2]
 8005224:	2b00      	cmp	r3, #0
 8005226:	da03      	bge.n	8005230 <_printf_i+0xb0>
 8005228:	222d      	movs	r2, #45	; 0x2d
 800522a:	425b      	negs	r3, r3
 800522c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005230:	4962      	ldr	r1, [pc, #392]	; (80053bc <_printf_i+0x23c>)
 8005232:	220a      	movs	r2, #10
 8005234:	e017      	b.n	8005266 <_printf_i+0xe6>
 8005236:	6820      	ldr	r0, [r4, #0]
 8005238:	6819      	ldr	r1, [r3, #0]
 800523a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800523e:	d003      	beq.n	8005248 <_printf_i+0xc8>
 8005240:	1d08      	adds	r0, r1, #4
 8005242:	6018      	str	r0, [r3, #0]
 8005244:	680b      	ldr	r3, [r1, #0]
 8005246:	e006      	b.n	8005256 <_printf_i+0xd6>
 8005248:	f010 0f40 	tst.w	r0, #64	; 0x40
 800524c:	f101 0004 	add.w	r0, r1, #4
 8005250:	6018      	str	r0, [r3, #0]
 8005252:	d0f7      	beq.n	8005244 <_printf_i+0xc4>
 8005254:	880b      	ldrh	r3, [r1, #0]
 8005256:	4959      	ldr	r1, [pc, #356]	; (80053bc <_printf_i+0x23c>)
 8005258:	2a6f      	cmp	r2, #111	; 0x6f
 800525a:	bf14      	ite	ne
 800525c:	220a      	movne	r2, #10
 800525e:	2208      	moveq	r2, #8
 8005260:	2000      	movs	r0, #0
 8005262:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8005266:	6865      	ldr	r5, [r4, #4]
 8005268:	60a5      	str	r5, [r4, #8]
 800526a:	2d00      	cmp	r5, #0
 800526c:	f2c0 809c 	blt.w	80053a8 <_printf_i+0x228>
 8005270:	6820      	ldr	r0, [r4, #0]
 8005272:	f020 0004 	bic.w	r0, r0, #4
 8005276:	6020      	str	r0, [r4, #0]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d13f      	bne.n	80052fc <_printf_i+0x17c>
 800527c:	2d00      	cmp	r5, #0
 800527e:	f040 8095 	bne.w	80053ac <_printf_i+0x22c>
 8005282:	4675      	mov	r5, lr
 8005284:	2a08      	cmp	r2, #8
 8005286:	d10b      	bne.n	80052a0 <_printf_i+0x120>
 8005288:	6823      	ldr	r3, [r4, #0]
 800528a:	07da      	lsls	r2, r3, #31
 800528c:	d508      	bpl.n	80052a0 <_printf_i+0x120>
 800528e:	6923      	ldr	r3, [r4, #16]
 8005290:	6862      	ldr	r2, [r4, #4]
 8005292:	429a      	cmp	r2, r3
 8005294:	bfde      	ittt	le
 8005296:	2330      	movle	r3, #48	; 0x30
 8005298:	f805 3c01 	strble.w	r3, [r5, #-1]
 800529c:	f105 35ff 	addle.w	r5, r5, #4294967295
 80052a0:	ebae 0305 	sub.w	r3, lr, r5
 80052a4:	6123      	str	r3, [r4, #16]
 80052a6:	f8cd 8000 	str.w	r8, [sp]
 80052aa:	463b      	mov	r3, r7
 80052ac:	aa03      	add	r2, sp, #12
 80052ae:	4621      	mov	r1, r4
 80052b0:	4630      	mov	r0, r6
 80052b2:	f7ff feef 	bl	8005094 <_printf_common>
 80052b6:	3001      	adds	r0, #1
 80052b8:	d155      	bne.n	8005366 <_printf_i+0x1e6>
 80052ba:	f04f 30ff 	mov.w	r0, #4294967295
 80052be:	b005      	add	sp, #20
 80052c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80052c4:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80052c8:	493c      	ldr	r1, [pc, #240]	; (80053bc <_printf_i+0x23c>)
 80052ca:	6822      	ldr	r2, [r4, #0]
 80052cc:	6818      	ldr	r0, [r3, #0]
 80052ce:	f012 0f80 	tst.w	r2, #128	; 0x80
 80052d2:	f100 0504 	add.w	r5, r0, #4
 80052d6:	601d      	str	r5, [r3, #0]
 80052d8:	d001      	beq.n	80052de <_printf_i+0x15e>
 80052da:	6803      	ldr	r3, [r0, #0]
 80052dc:	e002      	b.n	80052e4 <_printf_i+0x164>
 80052de:	0655      	lsls	r5, r2, #25
 80052e0:	d5fb      	bpl.n	80052da <_printf_i+0x15a>
 80052e2:	8803      	ldrh	r3, [r0, #0]
 80052e4:	07d0      	lsls	r0, r2, #31
 80052e6:	bf44      	itt	mi
 80052e8:	f042 0220 	orrmi.w	r2, r2, #32
 80052ec:	6022      	strmi	r2, [r4, #0]
 80052ee:	b91b      	cbnz	r3, 80052f8 <_printf_i+0x178>
 80052f0:	6822      	ldr	r2, [r4, #0]
 80052f2:	f022 0220 	bic.w	r2, r2, #32
 80052f6:	6022      	str	r2, [r4, #0]
 80052f8:	2210      	movs	r2, #16
 80052fa:	e7b1      	b.n	8005260 <_printf_i+0xe0>
 80052fc:	4675      	mov	r5, lr
 80052fe:	fbb3 f0f2 	udiv	r0, r3, r2
 8005302:	fb02 3310 	mls	r3, r2, r0, r3
 8005306:	5ccb      	ldrb	r3, [r1, r3]
 8005308:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800530c:	4603      	mov	r3, r0
 800530e:	2800      	cmp	r0, #0
 8005310:	d1f5      	bne.n	80052fe <_printf_i+0x17e>
 8005312:	e7b7      	b.n	8005284 <_printf_i+0x104>
 8005314:	6808      	ldr	r0, [r1, #0]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	6949      	ldr	r1, [r1, #20]
 800531a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800531e:	d004      	beq.n	800532a <_printf_i+0x1aa>
 8005320:	1d10      	adds	r0, r2, #4
 8005322:	6018      	str	r0, [r3, #0]
 8005324:	6813      	ldr	r3, [r2, #0]
 8005326:	6019      	str	r1, [r3, #0]
 8005328:	e007      	b.n	800533a <_printf_i+0x1ba>
 800532a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800532e:	f102 0004 	add.w	r0, r2, #4
 8005332:	6018      	str	r0, [r3, #0]
 8005334:	6813      	ldr	r3, [r2, #0]
 8005336:	d0f6      	beq.n	8005326 <_printf_i+0x1a6>
 8005338:	8019      	strh	r1, [r3, #0]
 800533a:	2300      	movs	r3, #0
 800533c:	6123      	str	r3, [r4, #16]
 800533e:	4675      	mov	r5, lr
 8005340:	e7b1      	b.n	80052a6 <_printf_i+0x126>
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	1d11      	adds	r1, r2, #4
 8005346:	6019      	str	r1, [r3, #0]
 8005348:	6815      	ldr	r5, [r2, #0]
 800534a:	6862      	ldr	r2, [r4, #4]
 800534c:	2100      	movs	r1, #0
 800534e:	4628      	mov	r0, r5
 8005350:	f7fa ff46 	bl	80001e0 <memchr>
 8005354:	b108      	cbz	r0, 800535a <_printf_i+0x1da>
 8005356:	1b40      	subs	r0, r0, r5
 8005358:	6060      	str	r0, [r4, #4]
 800535a:	6863      	ldr	r3, [r4, #4]
 800535c:	6123      	str	r3, [r4, #16]
 800535e:	2300      	movs	r3, #0
 8005360:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005364:	e79f      	b.n	80052a6 <_printf_i+0x126>
 8005366:	6923      	ldr	r3, [r4, #16]
 8005368:	462a      	mov	r2, r5
 800536a:	4639      	mov	r1, r7
 800536c:	4630      	mov	r0, r6
 800536e:	47c0      	blx	r8
 8005370:	3001      	adds	r0, #1
 8005372:	d0a2      	beq.n	80052ba <_printf_i+0x13a>
 8005374:	6823      	ldr	r3, [r4, #0]
 8005376:	079b      	lsls	r3, r3, #30
 8005378:	d507      	bpl.n	800538a <_printf_i+0x20a>
 800537a:	2500      	movs	r5, #0
 800537c:	f104 0919 	add.w	r9, r4, #25
 8005380:	68e3      	ldr	r3, [r4, #12]
 8005382:	9a03      	ldr	r2, [sp, #12]
 8005384:	1a9b      	subs	r3, r3, r2
 8005386:	429d      	cmp	r5, r3
 8005388:	db05      	blt.n	8005396 <_printf_i+0x216>
 800538a:	68e0      	ldr	r0, [r4, #12]
 800538c:	9b03      	ldr	r3, [sp, #12]
 800538e:	4298      	cmp	r0, r3
 8005390:	bfb8      	it	lt
 8005392:	4618      	movlt	r0, r3
 8005394:	e793      	b.n	80052be <_printf_i+0x13e>
 8005396:	2301      	movs	r3, #1
 8005398:	464a      	mov	r2, r9
 800539a:	4639      	mov	r1, r7
 800539c:	4630      	mov	r0, r6
 800539e:	47c0      	blx	r8
 80053a0:	3001      	adds	r0, #1
 80053a2:	d08a      	beq.n	80052ba <_printf_i+0x13a>
 80053a4:	3501      	adds	r5, #1
 80053a6:	e7eb      	b.n	8005380 <_printf_i+0x200>
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d1a7      	bne.n	80052fc <_printf_i+0x17c>
 80053ac:	780b      	ldrb	r3, [r1, #0]
 80053ae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053b2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053b6:	e765      	b.n	8005284 <_printf_i+0x104>
 80053b8:	08006b57 	.word	0x08006b57
 80053bc:	08006b46 	.word	0x08006b46

080053c0 <_sbrk_r>:
 80053c0:	b538      	push	{r3, r4, r5, lr}
 80053c2:	4c06      	ldr	r4, [pc, #24]	; (80053dc <_sbrk_r+0x1c>)
 80053c4:	2300      	movs	r3, #0
 80053c6:	4605      	mov	r5, r0
 80053c8:	4608      	mov	r0, r1
 80053ca:	6023      	str	r3, [r4, #0]
 80053cc:	f001 fb38 	bl	8006a40 <_sbrk>
 80053d0:	1c43      	adds	r3, r0, #1
 80053d2:	d102      	bne.n	80053da <_sbrk_r+0x1a>
 80053d4:	6823      	ldr	r3, [r4, #0]
 80053d6:	b103      	cbz	r3, 80053da <_sbrk_r+0x1a>
 80053d8:	602b      	str	r3, [r5, #0]
 80053da:	bd38      	pop	{r3, r4, r5, pc}
 80053dc:	20001c68 	.word	0x20001c68

080053e0 <siprintf>:
 80053e0:	b40e      	push	{r1, r2, r3}
 80053e2:	b500      	push	{lr}
 80053e4:	b09c      	sub	sp, #112	; 0x70
 80053e6:	f44f 7102 	mov.w	r1, #520	; 0x208
 80053ea:	ab1d      	add	r3, sp, #116	; 0x74
 80053ec:	f8ad 1014 	strh.w	r1, [sp, #20]
 80053f0:	9002      	str	r0, [sp, #8]
 80053f2:	9006      	str	r0, [sp, #24]
 80053f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80053f8:	480a      	ldr	r0, [pc, #40]	; (8005424 <siprintf+0x44>)
 80053fa:	9104      	str	r1, [sp, #16]
 80053fc:	9107      	str	r1, [sp, #28]
 80053fe:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005402:	f853 2b04 	ldr.w	r2, [r3], #4
 8005406:	f8ad 1016 	strh.w	r1, [sp, #22]
 800540a:	6800      	ldr	r0, [r0, #0]
 800540c:	9301      	str	r3, [sp, #4]
 800540e:	a902      	add	r1, sp, #8
 8005410:	f001 f9ba 	bl	8006788 <_svfiprintf_r>
 8005414:	9b02      	ldr	r3, [sp, #8]
 8005416:	2200      	movs	r2, #0
 8005418:	701a      	strb	r2, [r3, #0]
 800541a:	b01c      	add	sp, #112	; 0x70
 800541c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005420:	b003      	add	sp, #12
 8005422:	4770      	bx	lr
 8005424:	20000160 	.word	0x20000160

08005428 <quorem>:
 8005428:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800542c:	6903      	ldr	r3, [r0, #16]
 800542e:	690c      	ldr	r4, [r1, #16]
 8005430:	429c      	cmp	r4, r3
 8005432:	4680      	mov	r8, r0
 8005434:	f300 8082 	bgt.w	800553c <quorem+0x114>
 8005438:	3c01      	subs	r4, #1
 800543a:	f101 0714 	add.w	r7, r1, #20
 800543e:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8005442:	f100 0614 	add.w	r6, r0, #20
 8005446:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800544a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800544e:	eb06 030e 	add.w	r3, r6, lr
 8005452:	3501      	adds	r5, #1
 8005454:	eb07 090e 	add.w	r9, r7, lr
 8005458:	9301      	str	r3, [sp, #4]
 800545a:	fbb0 f5f5 	udiv	r5, r0, r5
 800545e:	b395      	cbz	r5, 80054c6 <quorem+0x9e>
 8005460:	f04f 0a00 	mov.w	sl, #0
 8005464:	4638      	mov	r0, r7
 8005466:	46b4      	mov	ip, r6
 8005468:	46d3      	mov	fp, sl
 800546a:	f850 2b04 	ldr.w	r2, [r0], #4
 800546e:	b293      	uxth	r3, r2
 8005470:	fb05 a303 	mla	r3, r5, r3, sl
 8005474:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005478:	b29b      	uxth	r3, r3
 800547a:	ebab 0303 	sub.w	r3, fp, r3
 800547e:	0c12      	lsrs	r2, r2, #16
 8005480:	f8bc b000 	ldrh.w	fp, [ip]
 8005484:	fb05 a202 	mla	r2, r5, r2, sl
 8005488:	fa13 f38b 	uxtah	r3, r3, fp
 800548c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005490:	fa1f fb82 	uxth.w	fp, r2
 8005494:	f8dc 2000 	ldr.w	r2, [ip]
 8005498:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800549c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80054a6:	4581      	cmp	r9, r0
 80054a8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80054ac:	f84c 3b04 	str.w	r3, [ip], #4
 80054b0:	d2db      	bcs.n	800546a <quorem+0x42>
 80054b2:	f856 300e 	ldr.w	r3, [r6, lr]
 80054b6:	b933      	cbnz	r3, 80054c6 <quorem+0x9e>
 80054b8:	9b01      	ldr	r3, [sp, #4]
 80054ba:	3b04      	subs	r3, #4
 80054bc:	429e      	cmp	r6, r3
 80054be:	461a      	mov	r2, r3
 80054c0:	d330      	bcc.n	8005524 <quorem+0xfc>
 80054c2:	f8c8 4010 	str.w	r4, [r8, #16]
 80054c6:	4640      	mov	r0, r8
 80054c8:	f001 f82d 	bl	8006526 <__mcmp>
 80054cc:	2800      	cmp	r0, #0
 80054ce:	db25      	blt.n	800551c <quorem+0xf4>
 80054d0:	3501      	adds	r5, #1
 80054d2:	4630      	mov	r0, r6
 80054d4:	f04f 0e00 	mov.w	lr, #0
 80054d8:	f857 2b04 	ldr.w	r2, [r7], #4
 80054dc:	f8d0 c000 	ldr.w	ip, [r0]
 80054e0:	b293      	uxth	r3, r2
 80054e2:	ebae 0303 	sub.w	r3, lr, r3
 80054e6:	0c12      	lsrs	r2, r2, #16
 80054e8:	fa13 f38c 	uxtah	r3, r3, ip
 80054ec:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80054f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80054fa:	45b9      	cmp	r9, r7
 80054fc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8005500:	f840 3b04 	str.w	r3, [r0], #4
 8005504:	d2e8      	bcs.n	80054d8 <quorem+0xb0>
 8005506:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800550a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800550e:	b92a      	cbnz	r2, 800551c <quorem+0xf4>
 8005510:	3b04      	subs	r3, #4
 8005512:	429e      	cmp	r6, r3
 8005514:	461a      	mov	r2, r3
 8005516:	d30b      	bcc.n	8005530 <quorem+0x108>
 8005518:	f8c8 4010 	str.w	r4, [r8, #16]
 800551c:	4628      	mov	r0, r5
 800551e:	b003      	add	sp, #12
 8005520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005524:	6812      	ldr	r2, [r2, #0]
 8005526:	3b04      	subs	r3, #4
 8005528:	2a00      	cmp	r2, #0
 800552a:	d1ca      	bne.n	80054c2 <quorem+0x9a>
 800552c:	3c01      	subs	r4, #1
 800552e:	e7c5      	b.n	80054bc <quorem+0x94>
 8005530:	6812      	ldr	r2, [r2, #0]
 8005532:	3b04      	subs	r3, #4
 8005534:	2a00      	cmp	r2, #0
 8005536:	d1ef      	bne.n	8005518 <quorem+0xf0>
 8005538:	3c01      	subs	r4, #1
 800553a:	e7ea      	b.n	8005512 <quorem+0xea>
 800553c:	2000      	movs	r0, #0
 800553e:	e7ee      	b.n	800551e <quorem+0xf6>

08005540 <_dtoa_r>:
 8005540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005544:	ec57 6b10 	vmov	r6, r7, d0
 8005548:	b097      	sub	sp, #92	; 0x5c
 800554a:	e9cd 6700 	strd	r6, r7, [sp]
 800554e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005550:	9107      	str	r1, [sp, #28]
 8005552:	4604      	mov	r4, r0
 8005554:	920a      	str	r2, [sp, #40]	; 0x28
 8005556:	930f      	str	r3, [sp, #60]	; 0x3c
 8005558:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800555a:	b93e      	cbnz	r6, 800556c <_dtoa_r+0x2c>
 800555c:	2010      	movs	r0, #16
 800555e:	f7ff f9ff 	bl	8004960 <malloc>
 8005562:	6260      	str	r0, [r4, #36]	; 0x24
 8005564:	6046      	str	r6, [r0, #4]
 8005566:	6086      	str	r6, [r0, #8]
 8005568:	6006      	str	r6, [r0, #0]
 800556a:	60c6      	str	r6, [r0, #12]
 800556c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800556e:	6819      	ldr	r1, [r3, #0]
 8005570:	b151      	cbz	r1, 8005588 <_dtoa_r+0x48>
 8005572:	685a      	ldr	r2, [r3, #4]
 8005574:	604a      	str	r2, [r1, #4]
 8005576:	2301      	movs	r3, #1
 8005578:	4093      	lsls	r3, r2
 800557a:	608b      	str	r3, [r1, #8]
 800557c:	4620      	mov	r0, r4
 800557e:	f000 fdfc 	bl	800617a <_Bfree>
 8005582:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005584:	2200      	movs	r2, #0
 8005586:	601a      	str	r2, [r3, #0]
 8005588:	9b01      	ldr	r3, [sp, #4]
 800558a:	2b00      	cmp	r3, #0
 800558c:	bfbf      	itttt	lt
 800558e:	2301      	movlt	r3, #1
 8005590:	602b      	strlt	r3, [r5, #0]
 8005592:	9b01      	ldrlt	r3, [sp, #4]
 8005594:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005598:	bfb2      	itee	lt
 800559a:	9301      	strlt	r3, [sp, #4]
 800559c:	2300      	movge	r3, #0
 800559e:	602b      	strge	r3, [r5, #0]
 80055a0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80055a4:	4ba8      	ldr	r3, [pc, #672]	; (8005848 <_dtoa_r+0x308>)
 80055a6:	ea33 0308 	bics.w	r3, r3, r8
 80055aa:	d11b      	bne.n	80055e4 <_dtoa_r+0xa4>
 80055ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80055ae:	f242 730f 	movw	r3, #9999	; 0x270f
 80055b2:	6013      	str	r3, [r2, #0]
 80055b4:	9b00      	ldr	r3, [sp, #0]
 80055b6:	b923      	cbnz	r3, 80055c2 <_dtoa_r+0x82>
 80055b8:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80055bc:	2800      	cmp	r0, #0
 80055be:	f000 8578 	beq.w	80060b2 <_dtoa_r+0xb72>
 80055c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80055c4:	b953      	cbnz	r3, 80055dc <_dtoa_r+0x9c>
 80055c6:	4ba1      	ldr	r3, [pc, #644]	; (800584c <_dtoa_r+0x30c>)
 80055c8:	e021      	b.n	800560e <_dtoa_r+0xce>
 80055ca:	4ba1      	ldr	r3, [pc, #644]	; (8005850 <_dtoa_r+0x310>)
 80055cc:	9302      	str	r3, [sp, #8]
 80055ce:	3308      	adds	r3, #8
 80055d0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80055d2:	6013      	str	r3, [r2, #0]
 80055d4:	9802      	ldr	r0, [sp, #8]
 80055d6:	b017      	add	sp, #92	; 0x5c
 80055d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055dc:	4b9b      	ldr	r3, [pc, #620]	; (800584c <_dtoa_r+0x30c>)
 80055de:	9302      	str	r3, [sp, #8]
 80055e0:	3303      	adds	r3, #3
 80055e2:	e7f5      	b.n	80055d0 <_dtoa_r+0x90>
 80055e4:	e9dd 6700 	ldrd	r6, r7, [sp]
 80055e8:	2200      	movs	r2, #0
 80055ea:	2300      	movs	r3, #0
 80055ec:	4630      	mov	r0, r6
 80055ee:	4639      	mov	r1, r7
 80055f0:	f7fb fa66 	bl	8000ac0 <__aeabi_dcmpeq>
 80055f4:	4681      	mov	r9, r0
 80055f6:	b160      	cbz	r0, 8005612 <_dtoa_r+0xd2>
 80055f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80055fa:	2301      	movs	r3, #1
 80055fc:	6013      	str	r3, [r2, #0]
 80055fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005600:	2b00      	cmp	r3, #0
 8005602:	f000 8553 	beq.w	80060ac <_dtoa_r+0xb6c>
 8005606:	4b93      	ldr	r3, [pc, #588]	; (8005854 <_dtoa_r+0x314>)
 8005608:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800560a:	6013      	str	r3, [r2, #0]
 800560c:	3b01      	subs	r3, #1
 800560e:	9302      	str	r3, [sp, #8]
 8005610:	e7e0      	b.n	80055d4 <_dtoa_r+0x94>
 8005612:	aa14      	add	r2, sp, #80	; 0x50
 8005614:	a915      	add	r1, sp, #84	; 0x54
 8005616:	ec47 6b10 	vmov	d0, r6, r7
 800561a:	4620      	mov	r0, r4
 800561c:	f000 fffb 	bl	8006616 <__d2b>
 8005620:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005624:	4682      	mov	sl, r0
 8005626:	2d00      	cmp	r5, #0
 8005628:	d07e      	beq.n	8005728 <_dtoa_r+0x1e8>
 800562a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800562e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005632:	4630      	mov	r0, r6
 8005634:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005638:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800563c:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8005640:	2200      	movs	r2, #0
 8005642:	4b85      	ldr	r3, [pc, #532]	; (8005858 <_dtoa_r+0x318>)
 8005644:	f7fa fe20 	bl	8000288 <__aeabi_dsub>
 8005648:	a379      	add	r3, pc, #484	; (adr r3, 8005830 <_dtoa_r+0x2f0>)
 800564a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800564e:	f7fa ffcf 	bl	80005f0 <__aeabi_dmul>
 8005652:	a379      	add	r3, pc, #484	; (adr r3, 8005838 <_dtoa_r+0x2f8>)
 8005654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005658:	f7fa fe18 	bl	800028c <__adddf3>
 800565c:	4606      	mov	r6, r0
 800565e:	4628      	mov	r0, r5
 8005660:	460f      	mov	r7, r1
 8005662:	f7fa ff5f 	bl	8000524 <__aeabi_i2d>
 8005666:	a376      	add	r3, pc, #472	; (adr r3, 8005840 <_dtoa_r+0x300>)
 8005668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800566c:	f7fa ffc0 	bl	80005f0 <__aeabi_dmul>
 8005670:	4602      	mov	r2, r0
 8005672:	460b      	mov	r3, r1
 8005674:	4630      	mov	r0, r6
 8005676:	4639      	mov	r1, r7
 8005678:	f7fa fe08 	bl	800028c <__adddf3>
 800567c:	4606      	mov	r6, r0
 800567e:	460f      	mov	r7, r1
 8005680:	f7fb fa66 	bl	8000b50 <__aeabi_d2iz>
 8005684:	2200      	movs	r2, #0
 8005686:	4683      	mov	fp, r0
 8005688:	2300      	movs	r3, #0
 800568a:	4630      	mov	r0, r6
 800568c:	4639      	mov	r1, r7
 800568e:	f7fb fa21 	bl	8000ad4 <__aeabi_dcmplt>
 8005692:	b158      	cbz	r0, 80056ac <_dtoa_r+0x16c>
 8005694:	4658      	mov	r0, fp
 8005696:	f7fa ff45 	bl	8000524 <__aeabi_i2d>
 800569a:	4602      	mov	r2, r0
 800569c:	460b      	mov	r3, r1
 800569e:	4630      	mov	r0, r6
 80056a0:	4639      	mov	r1, r7
 80056a2:	f7fb fa0d 	bl	8000ac0 <__aeabi_dcmpeq>
 80056a6:	b908      	cbnz	r0, 80056ac <_dtoa_r+0x16c>
 80056a8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80056ac:	f1bb 0f16 	cmp.w	fp, #22
 80056b0:	d859      	bhi.n	8005766 <_dtoa_r+0x226>
 80056b2:	496a      	ldr	r1, [pc, #424]	; (800585c <_dtoa_r+0x31c>)
 80056b4:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 80056b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80056bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80056c0:	f7fb fa26 	bl	8000b10 <__aeabi_dcmpgt>
 80056c4:	2800      	cmp	r0, #0
 80056c6:	d050      	beq.n	800576a <_dtoa_r+0x22a>
 80056c8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80056cc:	2300      	movs	r3, #0
 80056ce:	930e      	str	r3, [sp, #56]	; 0x38
 80056d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80056d2:	1b5d      	subs	r5, r3, r5
 80056d4:	1e6b      	subs	r3, r5, #1
 80056d6:	9306      	str	r3, [sp, #24]
 80056d8:	bf45      	ittet	mi
 80056da:	f1c5 0301 	rsbmi	r3, r5, #1
 80056de:	9305      	strmi	r3, [sp, #20]
 80056e0:	2300      	movpl	r3, #0
 80056e2:	2300      	movmi	r3, #0
 80056e4:	bf4c      	ite	mi
 80056e6:	9306      	strmi	r3, [sp, #24]
 80056e8:	9305      	strpl	r3, [sp, #20]
 80056ea:	f1bb 0f00 	cmp.w	fp, #0
 80056ee:	db3e      	blt.n	800576e <_dtoa_r+0x22e>
 80056f0:	9b06      	ldr	r3, [sp, #24]
 80056f2:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80056f6:	445b      	add	r3, fp
 80056f8:	9306      	str	r3, [sp, #24]
 80056fa:	2300      	movs	r3, #0
 80056fc:	9308      	str	r3, [sp, #32]
 80056fe:	9b07      	ldr	r3, [sp, #28]
 8005700:	2b09      	cmp	r3, #9
 8005702:	f200 80af 	bhi.w	8005864 <_dtoa_r+0x324>
 8005706:	2b05      	cmp	r3, #5
 8005708:	bfc4      	itt	gt
 800570a:	3b04      	subgt	r3, #4
 800570c:	9307      	strgt	r3, [sp, #28]
 800570e:	9b07      	ldr	r3, [sp, #28]
 8005710:	f1a3 0302 	sub.w	r3, r3, #2
 8005714:	bfcc      	ite	gt
 8005716:	2600      	movgt	r6, #0
 8005718:	2601      	movle	r6, #1
 800571a:	2b03      	cmp	r3, #3
 800571c:	f200 80ae 	bhi.w	800587c <_dtoa_r+0x33c>
 8005720:	e8df f003 	tbb	[pc, r3]
 8005724:	772f8482 	.word	0x772f8482
 8005728:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800572a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800572c:	441d      	add	r5, r3
 800572e:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005732:	2b20      	cmp	r3, #32
 8005734:	dd11      	ble.n	800575a <_dtoa_r+0x21a>
 8005736:	9a00      	ldr	r2, [sp, #0]
 8005738:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800573c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8005740:	fa22 f000 	lsr.w	r0, r2, r0
 8005744:	fa08 f303 	lsl.w	r3, r8, r3
 8005748:	4318      	orrs	r0, r3
 800574a:	f7fa fedb 	bl	8000504 <__aeabi_ui2d>
 800574e:	2301      	movs	r3, #1
 8005750:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005754:	3d01      	subs	r5, #1
 8005756:	9312      	str	r3, [sp, #72]	; 0x48
 8005758:	e772      	b.n	8005640 <_dtoa_r+0x100>
 800575a:	f1c3 0020 	rsb	r0, r3, #32
 800575e:	9b00      	ldr	r3, [sp, #0]
 8005760:	fa03 f000 	lsl.w	r0, r3, r0
 8005764:	e7f1      	b.n	800574a <_dtoa_r+0x20a>
 8005766:	2301      	movs	r3, #1
 8005768:	e7b1      	b.n	80056ce <_dtoa_r+0x18e>
 800576a:	900e      	str	r0, [sp, #56]	; 0x38
 800576c:	e7b0      	b.n	80056d0 <_dtoa_r+0x190>
 800576e:	9b05      	ldr	r3, [sp, #20]
 8005770:	eba3 030b 	sub.w	r3, r3, fp
 8005774:	9305      	str	r3, [sp, #20]
 8005776:	f1cb 0300 	rsb	r3, fp, #0
 800577a:	9308      	str	r3, [sp, #32]
 800577c:	2300      	movs	r3, #0
 800577e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005780:	e7bd      	b.n	80056fe <_dtoa_r+0x1be>
 8005782:	2301      	movs	r3, #1
 8005784:	9309      	str	r3, [sp, #36]	; 0x24
 8005786:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005788:	2b00      	cmp	r3, #0
 800578a:	dd7a      	ble.n	8005882 <_dtoa_r+0x342>
 800578c:	9304      	str	r3, [sp, #16]
 800578e:	9303      	str	r3, [sp, #12]
 8005790:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005792:	2200      	movs	r2, #0
 8005794:	606a      	str	r2, [r5, #4]
 8005796:	2104      	movs	r1, #4
 8005798:	f101 0214 	add.w	r2, r1, #20
 800579c:	429a      	cmp	r2, r3
 800579e:	d975      	bls.n	800588c <_dtoa_r+0x34c>
 80057a0:	6869      	ldr	r1, [r5, #4]
 80057a2:	4620      	mov	r0, r4
 80057a4:	f000 fcb5 	bl	8006112 <_Balloc>
 80057a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80057aa:	6028      	str	r0, [r5, #0]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	9302      	str	r3, [sp, #8]
 80057b0:	9b03      	ldr	r3, [sp, #12]
 80057b2:	2b0e      	cmp	r3, #14
 80057b4:	f200 80e5 	bhi.w	8005982 <_dtoa_r+0x442>
 80057b8:	2e00      	cmp	r6, #0
 80057ba:	f000 80e2 	beq.w	8005982 <_dtoa_r+0x442>
 80057be:	ed9d 7b00 	vldr	d7, [sp]
 80057c2:	f1bb 0f00 	cmp.w	fp, #0
 80057c6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80057ca:	dd74      	ble.n	80058b6 <_dtoa_r+0x376>
 80057cc:	4a23      	ldr	r2, [pc, #140]	; (800585c <_dtoa_r+0x31c>)
 80057ce:	f00b 030f 	and.w	r3, fp, #15
 80057d2:	ea4f 162b 	mov.w	r6, fp, asr #4
 80057d6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80057da:	06f0      	lsls	r0, r6, #27
 80057dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80057e0:	d559      	bpl.n	8005896 <_dtoa_r+0x356>
 80057e2:	4b1f      	ldr	r3, [pc, #124]	; (8005860 <_dtoa_r+0x320>)
 80057e4:	ec51 0b17 	vmov	r0, r1, d7
 80057e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80057ec:	f7fb f82a 	bl	8000844 <__aeabi_ddiv>
 80057f0:	e9cd 0100 	strd	r0, r1, [sp]
 80057f4:	f006 060f 	and.w	r6, r6, #15
 80057f8:	2503      	movs	r5, #3
 80057fa:	4f19      	ldr	r7, [pc, #100]	; (8005860 <_dtoa_r+0x320>)
 80057fc:	2e00      	cmp	r6, #0
 80057fe:	d14c      	bne.n	800589a <_dtoa_r+0x35a>
 8005800:	4642      	mov	r2, r8
 8005802:	464b      	mov	r3, r9
 8005804:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005808:	f7fb f81c 	bl	8000844 <__aeabi_ddiv>
 800580c:	e9cd 0100 	strd	r0, r1, [sp]
 8005810:	e06a      	b.n	80058e8 <_dtoa_r+0x3a8>
 8005812:	2301      	movs	r3, #1
 8005814:	9309      	str	r3, [sp, #36]	; 0x24
 8005816:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005818:	445b      	add	r3, fp
 800581a:	9304      	str	r3, [sp, #16]
 800581c:	3301      	adds	r3, #1
 800581e:	2b01      	cmp	r3, #1
 8005820:	9303      	str	r3, [sp, #12]
 8005822:	bfb8      	it	lt
 8005824:	2301      	movlt	r3, #1
 8005826:	e7b3      	b.n	8005790 <_dtoa_r+0x250>
 8005828:	2300      	movs	r3, #0
 800582a:	e7ab      	b.n	8005784 <_dtoa_r+0x244>
 800582c:	2300      	movs	r3, #0
 800582e:	e7f1      	b.n	8005814 <_dtoa_r+0x2d4>
 8005830:	636f4361 	.word	0x636f4361
 8005834:	3fd287a7 	.word	0x3fd287a7
 8005838:	8b60c8b3 	.word	0x8b60c8b3
 800583c:	3fc68a28 	.word	0x3fc68a28
 8005840:	509f79fb 	.word	0x509f79fb
 8005844:	3fd34413 	.word	0x3fd34413
 8005848:	7ff00000 	.word	0x7ff00000
 800584c:	08006b71 	.word	0x08006b71
 8005850:	08006b68 	.word	0x08006b68
 8005854:	08006b45 	.word	0x08006b45
 8005858:	3ff80000 	.word	0x3ff80000
 800585c:	08006ba0 	.word	0x08006ba0
 8005860:	08006b78 	.word	0x08006b78
 8005864:	2601      	movs	r6, #1
 8005866:	2300      	movs	r3, #0
 8005868:	9307      	str	r3, [sp, #28]
 800586a:	9609      	str	r6, [sp, #36]	; 0x24
 800586c:	f04f 33ff 	mov.w	r3, #4294967295
 8005870:	9304      	str	r3, [sp, #16]
 8005872:	9303      	str	r3, [sp, #12]
 8005874:	2200      	movs	r2, #0
 8005876:	2312      	movs	r3, #18
 8005878:	920a      	str	r2, [sp, #40]	; 0x28
 800587a:	e789      	b.n	8005790 <_dtoa_r+0x250>
 800587c:	2301      	movs	r3, #1
 800587e:	9309      	str	r3, [sp, #36]	; 0x24
 8005880:	e7f4      	b.n	800586c <_dtoa_r+0x32c>
 8005882:	2301      	movs	r3, #1
 8005884:	9304      	str	r3, [sp, #16]
 8005886:	9303      	str	r3, [sp, #12]
 8005888:	461a      	mov	r2, r3
 800588a:	e7f5      	b.n	8005878 <_dtoa_r+0x338>
 800588c:	686a      	ldr	r2, [r5, #4]
 800588e:	3201      	adds	r2, #1
 8005890:	606a      	str	r2, [r5, #4]
 8005892:	0049      	lsls	r1, r1, #1
 8005894:	e780      	b.n	8005798 <_dtoa_r+0x258>
 8005896:	2502      	movs	r5, #2
 8005898:	e7af      	b.n	80057fa <_dtoa_r+0x2ba>
 800589a:	07f1      	lsls	r1, r6, #31
 800589c:	d508      	bpl.n	80058b0 <_dtoa_r+0x370>
 800589e:	4640      	mov	r0, r8
 80058a0:	4649      	mov	r1, r9
 80058a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058a6:	f7fa fea3 	bl	80005f0 <__aeabi_dmul>
 80058aa:	3501      	adds	r5, #1
 80058ac:	4680      	mov	r8, r0
 80058ae:	4689      	mov	r9, r1
 80058b0:	1076      	asrs	r6, r6, #1
 80058b2:	3708      	adds	r7, #8
 80058b4:	e7a2      	b.n	80057fc <_dtoa_r+0x2bc>
 80058b6:	f000 809d 	beq.w	80059f4 <_dtoa_r+0x4b4>
 80058ba:	f1cb 0600 	rsb	r6, fp, #0
 80058be:	4b9f      	ldr	r3, [pc, #636]	; (8005b3c <_dtoa_r+0x5fc>)
 80058c0:	4f9f      	ldr	r7, [pc, #636]	; (8005b40 <_dtoa_r+0x600>)
 80058c2:	f006 020f 	and.w	r2, r6, #15
 80058c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80058ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80058d2:	f7fa fe8d 	bl	80005f0 <__aeabi_dmul>
 80058d6:	e9cd 0100 	strd	r0, r1, [sp]
 80058da:	1136      	asrs	r6, r6, #4
 80058dc:	2300      	movs	r3, #0
 80058de:	2502      	movs	r5, #2
 80058e0:	2e00      	cmp	r6, #0
 80058e2:	d17c      	bne.n	80059de <_dtoa_r+0x49e>
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d191      	bne.n	800580c <_dtoa_r+0x2cc>
 80058e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	f000 8084 	beq.w	80059f8 <_dtoa_r+0x4b8>
 80058f0:	e9dd 8900 	ldrd	r8, r9, [sp]
 80058f4:	2200      	movs	r2, #0
 80058f6:	4b93      	ldr	r3, [pc, #588]	; (8005b44 <_dtoa_r+0x604>)
 80058f8:	4640      	mov	r0, r8
 80058fa:	4649      	mov	r1, r9
 80058fc:	f7fb f8ea 	bl	8000ad4 <__aeabi_dcmplt>
 8005900:	2800      	cmp	r0, #0
 8005902:	d079      	beq.n	80059f8 <_dtoa_r+0x4b8>
 8005904:	9b03      	ldr	r3, [sp, #12]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d076      	beq.n	80059f8 <_dtoa_r+0x4b8>
 800590a:	9b04      	ldr	r3, [sp, #16]
 800590c:	2b00      	cmp	r3, #0
 800590e:	dd34      	ble.n	800597a <_dtoa_r+0x43a>
 8005910:	2200      	movs	r2, #0
 8005912:	4b8d      	ldr	r3, [pc, #564]	; (8005b48 <_dtoa_r+0x608>)
 8005914:	4640      	mov	r0, r8
 8005916:	4649      	mov	r1, r9
 8005918:	f7fa fe6a 	bl	80005f0 <__aeabi_dmul>
 800591c:	e9cd 0100 	strd	r0, r1, [sp]
 8005920:	9e04      	ldr	r6, [sp, #16]
 8005922:	f10b 37ff 	add.w	r7, fp, #4294967295
 8005926:	3501      	adds	r5, #1
 8005928:	4628      	mov	r0, r5
 800592a:	f7fa fdfb 	bl	8000524 <__aeabi_i2d>
 800592e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005932:	f7fa fe5d 	bl	80005f0 <__aeabi_dmul>
 8005936:	2200      	movs	r2, #0
 8005938:	4b84      	ldr	r3, [pc, #528]	; (8005b4c <_dtoa_r+0x60c>)
 800593a:	f7fa fca7 	bl	800028c <__adddf3>
 800593e:	4680      	mov	r8, r0
 8005940:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8005944:	2e00      	cmp	r6, #0
 8005946:	d15a      	bne.n	80059fe <_dtoa_r+0x4be>
 8005948:	2200      	movs	r2, #0
 800594a:	4b81      	ldr	r3, [pc, #516]	; (8005b50 <_dtoa_r+0x610>)
 800594c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005950:	f7fa fc9a 	bl	8000288 <__aeabi_dsub>
 8005954:	4642      	mov	r2, r8
 8005956:	464b      	mov	r3, r9
 8005958:	e9cd 0100 	strd	r0, r1, [sp]
 800595c:	f7fb f8d8 	bl	8000b10 <__aeabi_dcmpgt>
 8005960:	2800      	cmp	r0, #0
 8005962:	f040 829b 	bne.w	8005e9c <_dtoa_r+0x95c>
 8005966:	4642      	mov	r2, r8
 8005968:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800596c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005970:	f7fb f8b0 	bl	8000ad4 <__aeabi_dcmplt>
 8005974:	2800      	cmp	r0, #0
 8005976:	f040 828f 	bne.w	8005e98 <_dtoa_r+0x958>
 800597a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800597e:	e9cd 2300 	strd	r2, r3, [sp]
 8005982:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005984:	2b00      	cmp	r3, #0
 8005986:	f2c0 8150 	blt.w	8005c2a <_dtoa_r+0x6ea>
 800598a:	f1bb 0f0e 	cmp.w	fp, #14
 800598e:	f300 814c 	bgt.w	8005c2a <_dtoa_r+0x6ea>
 8005992:	4b6a      	ldr	r3, [pc, #424]	; (8005b3c <_dtoa_r+0x5fc>)
 8005994:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005998:	e9d3 8900 	ldrd	r8, r9, [r3]
 800599c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800599e:	2b00      	cmp	r3, #0
 80059a0:	f280 80da 	bge.w	8005b58 <_dtoa_r+0x618>
 80059a4:	9b03      	ldr	r3, [sp, #12]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	f300 80d6 	bgt.w	8005b58 <_dtoa_r+0x618>
 80059ac:	f040 8273 	bne.w	8005e96 <_dtoa_r+0x956>
 80059b0:	2200      	movs	r2, #0
 80059b2:	4b67      	ldr	r3, [pc, #412]	; (8005b50 <_dtoa_r+0x610>)
 80059b4:	4640      	mov	r0, r8
 80059b6:	4649      	mov	r1, r9
 80059b8:	f7fa fe1a 	bl	80005f0 <__aeabi_dmul>
 80059bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80059c0:	f7fb f89c 	bl	8000afc <__aeabi_dcmpge>
 80059c4:	9e03      	ldr	r6, [sp, #12]
 80059c6:	4637      	mov	r7, r6
 80059c8:	2800      	cmp	r0, #0
 80059ca:	f040 824a 	bne.w	8005e62 <_dtoa_r+0x922>
 80059ce:	9b02      	ldr	r3, [sp, #8]
 80059d0:	9a02      	ldr	r2, [sp, #8]
 80059d2:	1c5d      	adds	r5, r3, #1
 80059d4:	2331      	movs	r3, #49	; 0x31
 80059d6:	7013      	strb	r3, [r2, #0]
 80059d8:	f10b 0b01 	add.w	fp, fp, #1
 80059dc:	e245      	b.n	8005e6a <_dtoa_r+0x92a>
 80059de:	07f2      	lsls	r2, r6, #31
 80059e0:	d505      	bpl.n	80059ee <_dtoa_r+0x4ae>
 80059e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059e6:	f7fa fe03 	bl	80005f0 <__aeabi_dmul>
 80059ea:	3501      	adds	r5, #1
 80059ec:	2301      	movs	r3, #1
 80059ee:	1076      	asrs	r6, r6, #1
 80059f0:	3708      	adds	r7, #8
 80059f2:	e775      	b.n	80058e0 <_dtoa_r+0x3a0>
 80059f4:	2502      	movs	r5, #2
 80059f6:	e777      	b.n	80058e8 <_dtoa_r+0x3a8>
 80059f8:	465f      	mov	r7, fp
 80059fa:	9e03      	ldr	r6, [sp, #12]
 80059fc:	e794      	b.n	8005928 <_dtoa_r+0x3e8>
 80059fe:	9a02      	ldr	r2, [sp, #8]
 8005a00:	4b4e      	ldr	r3, [pc, #312]	; (8005b3c <_dtoa_r+0x5fc>)
 8005a02:	4432      	add	r2, r6
 8005a04:	9213      	str	r2, [sp, #76]	; 0x4c
 8005a06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a08:	1e71      	subs	r1, r6, #1
 8005a0a:	2a00      	cmp	r2, #0
 8005a0c:	d048      	beq.n	8005aa0 <_dtoa_r+0x560>
 8005a0e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8005a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a16:	2000      	movs	r0, #0
 8005a18:	494e      	ldr	r1, [pc, #312]	; (8005b54 <_dtoa_r+0x614>)
 8005a1a:	f7fa ff13 	bl	8000844 <__aeabi_ddiv>
 8005a1e:	4642      	mov	r2, r8
 8005a20:	464b      	mov	r3, r9
 8005a22:	f7fa fc31 	bl	8000288 <__aeabi_dsub>
 8005a26:	9d02      	ldr	r5, [sp, #8]
 8005a28:	4680      	mov	r8, r0
 8005a2a:	4689      	mov	r9, r1
 8005a2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a30:	f7fb f88e 	bl	8000b50 <__aeabi_d2iz>
 8005a34:	4606      	mov	r6, r0
 8005a36:	f7fa fd75 	bl	8000524 <__aeabi_i2d>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a42:	f7fa fc21 	bl	8000288 <__aeabi_dsub>
 8005a46:	3630      	adds	r6, #48	; 0x30
 8005a48:	f805 6b01 	strb.w	r6, [r5], #1
 8005a4c:	4642      	mov	r2, r8
 8005a4e:	464b      	mov	r3, r9
 8005a50:	e9cd 0100 	strd	r0, r1, [sp]
 8005a54:	f7fb f83e 	bl	8000ad4 <__aeabi_dcmplt>
 8005a58:	2800      	cmp	r0, #0
 8005a5a:	d165      	bne.n	8005b28 <_dtoa_r+0x5e8>
 8005a5c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a60:	2000      	movs	r0, #0
 8005a62:	4938      	ldr	r1, [pc, #224]	; (8005b44 <_dtoa_r+0x604>)
 8005a64:	f7fa fc10 	bl	8000288 <__aeabi_dsub>
 8005a68:	4642      	mov	r2, r8
 8005a6a:	464b      	mov	r3, r9
 8005a6c:	f7fb f832 	bl	8000ad4 <__aeabi_dcmplt>
 8005a70:	2800      	cmp	r0, #0
 8005a72:	f040 80ba 	bne.w	8005bea <_dtoa_r+0x6aa>
 8005a76:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005a78:	429d      	cmp	r5, r3
 8005a7a:	f43f af7e 	beq.w	800597a <_dtoa_r+0x43a>
 8005a7e:	2200      	movs	r2, #0
 8005a80:	4b31      	ldr	r3, [pc, #196]	; (8005b48 <_dtoa_r+0x608>)
 8005a82:	4640      	mov	r0, r8
 8005a84:	4649      	mov	r1, r9
 8005a86:	f7fa fdb3 	bl	80005f0 <__aeabi_dmul>
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	4680      	mov	r8, r0
 8005a8e:	4689      	mov	r9, r1
 8005a90:	4b2d      	ldr	r3, [pc, #180]	; (8005b48 <_dtoa_r+0x608>)
 8005a92:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a96:	f7fa fdab 	bl	80005f0 <__aeabi_dmul>
 8005a9a:	e9cd 0100 	strd	r0, r1, [sp]
 8005a9e:	e7c5      	b.n	8005a2c <_dtoa_r+0x4ec>
 8005aa0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8005aa4:	4642      	mov	r2, r8
 8005aa6:	464b      	mov	r3, r9
 8005aa8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005aac:	f7fa fda0 	bl	80005f0 <__aeabi_dmul>
 8005ab0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005ab4:	9d02      	ldr	r5, [sp, #8]
 8005ab6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005aba:	f7fb f849 	bl	8000b50 <__aeabi_d2iz>
 8005abe:	4606      	mov	r6, r0
 8005ac0:	f7fa fd30 	bl	8000524 <__aeabi_i2d>
 8005ac4:	3630      	adds	r6, #48	; 0x30
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	460b      	mov	r3, r1
 8005aca:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005ace:	f7fa fbdb 	bl	8000288 <__aeabi_dsub>
 8005ad2:	f805 6b01 	strb.w	r6, [r5], #1
 8005ad6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005ad8:	42ab      	cmp	r3, r5
 8005ada:	4680      	mov	r8, r0
 8005adc:	4689      	mov	r9, r1
 8005ade:	f04f 0200 	mov.w	r2, #0
 8005ae2:	d125      	bne.n	8005b30 <_dtoa_r+0x5f0>
 8005ae4:	4b1b      	ldr	r3, [pc, #108]	; (8005b54 <_dtoa_r+0x614>)
 8005ae6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005aea:	f7fa fbcf 	bl	800028c <__adddf3>
 8005aee:	4602      	mov	r2, r0
 8005af0:	460b      	mov	r3, r1
 8005af2:	4640      	mov	r0, r8
 8005af4:	4649      	mov	r1, r9
 8005af6:	f7fb f80b 	bl	8000b10 <__aeabi_dcmpgt>
 8005afa:	2800      	cmp	r0, #0
 8005afc:	d175      	bne.n	8005bea <_dtoa_r+0x6aa>
 8005afe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005b02:	2000      	movs	r0, #0
 8005b04:	4913      	ldr	r1, [pc, #76]	; (8005b54 <_dtoa_r+0x614>)
 8005b06:	f7fa fbbf 	bl	8000288 <__aeabi_dsub>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	460b      	mov	r3, r1
 8005b0e:	4640      	mov	r0, r8
 8005b10:	4649      	mov	r1, r9
 8005b12:	f7fa ffdf 	bl	8000ad4 <__aeabi_dcmplt>
 8005b16:	2800      	cmp	r0, #0
 8005b18:	f43f af2f 	beq.w	800597a <_dtoa_r+0x43a>
 8005b1c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005b20:	2b30      	cmp	r3, #48	; 0x30
 8005b22:	f105 32ff 	add.w	r2, r5, #4294967295
 8005b26:	d001      	beq.n	8005b2c <_dtoa_r+0x5ec>
 8005b28:	46bb      	mov	fp, r7
 8005b2a:	e04d      	b.n	8005bc8 <_dtoa_r+0x688>
 8005b2c:	4615      	mov	r5, r2
 8005b2e:	e7f5      	b.n	8005b1c <_dtoa_r+0x5dc>
 8005b30:	4b05      	ldr	r3, [pc, #20]	; (8005b48 <_dtoa_r+0x608>)
 8005b32:	f7fa fd5d 	bl	80005f0 <__aeabi_dmul>
 8005b36:	e9cd 0100 	strd	r0, r1, [sp]
 8005b3a:	e7bc      	b.n	8005ab6 <_dtoa_r+0x576>
 8005b3c:	08006ba0 	.word	0x08006ba0
 8005b40:	08006b78 	.word	0x08006b78
 8005b44:	3ff00000 	.word	0x3ff00000
 8005b48:	40240000 	.word	0x40240000
 8005b4c:	401c0000 	.word	0x401c0000
 8005b50:	40140000 	.word	0x40140000
 8005b54:	3fe00000 	.word	0x3fe00000
 8005b58:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005b5c:	9d02      	ldr	r5, [sp, #8]
 8005b5e:	4642      	mov	r2, r8
 8005b60:	464b      	mov	r3, r9
 8005b62:	4630      	mov	r0, r6
 8005b64:	4639      	mov	r1, r7
 8005b66:	f7fa fe6d 	bl	8000844 <__aeabi_ddiv>
 8005b6a:	f7fa fff1 	bl	8000b50 <__aeabi_d2iz>
 8005b6e:	9000      	str	r0, [sp, #0]
 8005b70:	f7fa fcd8 	bl	8000524 <__aeabi_i2d>
 8005b74:	4642      	mov	r2, r8
 8005b76:	464b      	mov	r3, r9
 8005b78:	f7fa fd3a 	bl	80005f0 <__aeabi_dmul>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	460b      	mov	r3, r1
 8005b80:	4630      	mov	r0, r6
 8005b82:	4639      	mov	r1, r7
 8005b84:	f7fa fb80 	bl	8000288 <__aeabi_dsub>
 8005b88:	9e00      	ldr	r6, [sp, #0]
 8005b8a:	9f03      	ldr	r7, [sp, #12]
 8005b8c:	3630      	adds	r6, #48	; 0x30
 8005b8e:	f805 6b01 	strb.w	r6, [r5], #1
 8005b92:	9e02      	ldr	r6, [sp, #8]
 8005b94:	1bae      	subs	r6, r5, r6
 8005b96:	42b7      	cmp	r7, r6
 8005b98:	4602      	mov	r2, r0
 8005b9a:	460b      	mov	r3, r1
 8005b9c:	d138      	bne.n	8005c10 <_dtoa_r+0x6d0>
 8005b9e:	f7fa fb75 	bl	800028c <__adddf3>
 8005ba2:	4606      	mov	r6, r0
 8005ba4:	460f      	mov	r7, r1
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	460b      	mov	r3, r1
 8005baa:	4640      	mov	r0, r8
 8005bac:	4649      	mov	r1, r9
 8005bae:	f7fa ff91 	bl	8000ad4 <__aeabi_dcmplt>
 8005bb2:	b9c8      	cbnz	r0, 8005be8 <_dtoa_r+0x6a8>
 8005bb4:	4632      	mov	r2, r6
 8005bb6:	463b      	mov	r3, r7
 8005bb8:	4640      	mov	r0, r8
 8005bba:	4649      	mov	r1, r9
 8005bbc:	f7fa ff80 	bl	8000ac0 <__aeabi_dcmpeq>
 8005bc0:	b110      	cbz	r0, 8005bc8 <_dtoa_r+0x688>
 8005bc2:	9b00      	ldr	r3, [sp, #0]
 8005bc4:	07db      	lsls	r3, r3, #31
 8005bc6:	d40f      	bmi.n	8005be8 <_dtoa_r+0x6a8>
 8005bc8:	4651      	mov	r1, sl
 8005bca:	4620      	mov	r0, r4
 8005bcc:	f000 fad5 	bl	800617a <_Bfree>
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005bd4:	702b      	strb	r3, [r5, #0]
 8005bd6:	f10b 0301 	add.w	r3, fp, #1
 8005bda:	6013      	str	r3, [r2, #0]
 8005bdc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	f43f acf8 	beq.w	80055d4 <_dtoa_r+0x94>
 8005be4:	601d      	str	r5, [r3, #0]
 8005be6:	e4f5      	b.n	80055d4 <_dtoa_r+0x94>
 8005be8:	465f      	mov	r7, fp
 8005bea:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005bee:	2a39      	cmp	r2, #57	; 0x39
 8005bf0:	f105 33ff 	add.w	r3, r5, #4294967295
 8005bf4:	d106      	bne.n	8005c04 <_dtoa_r+0x6c4>
 8005bf6:	9a02      	ldr	r2, [sp, #8]
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d107      	bne.n	8005c0c <_dtoa_r+0x6cc>
 8005bfc:	2330      	movs	r3, #48	; 0x30
 8005bfe:	7013      	strb	r3, [r2, #0]
 8005c00:	3701      	adds	r7, #1
 8005c02:	4613      	mov	r3, r2
 8005c04:	781a      	ldrb	r2, [r3, #0]
 8005c06:	3201      	adds	r2, #1
 8005c08:	701a      	strb	r2, [r3, #0]
 8005c0a:	e78d      	b.n	8005b28 <_dtoa_r+0x5e8>
 8005c0c:	461d      	mov	r5, r3
 8005c0e:	e7ec      	b.n	8005bea <_dtoa_r+0x6aa>
 8005c10:	2200      	movs	r2, #0
 8005c12:	4ba4      	ldr	r3, [pc, #656]	; (8005ea4 <_dtoa_r+0x964>)
 8005c14:	f7fa fcec 	bl	80005f0 <__aeabi_dmul>
 8005c18:	2200      	movs	r2, #0
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	4606      	mov	r6, r0
 8005c1e:	460f      	mov	r7, r1
 8005c20:	f7fa ff4e 	bl	8000ac0 <__aeabi_dcmpeq>
 8005c24:	2800      	cmp	r0, #0
 8005c26:	d09a      	beq.n	8005b5e <_dtoa_r+0x61e>
 8005c28:	e7ce      	b.n	8005bc8 <_dtoa_r+0x688>
 8005c2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c2c:	2a00      	cmp	r2, #0
 8005c2e:	f000 80cd 	beq.w	8005dcc <_dtoa_r+0x88c>
 8005c32:	9a07      	ldr	r2, [sp, #28]
 8005c34:	2a01      	cmp	r2, #1
 8005c36:	f300 80af 	bgt.w	8005d98 <_dtoa_r+0x858>
 8005c3a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005c3c:	2a00      	cmp	r2, #0
 8005c3e:	f000 80a7 	beq.w	8005d90 <_dtoa_r+0x850>
 8005c42:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005c46:	9e08      	ldr	r6, [sp, #32]
 8005c48:	9d05      	ldr	r5, [sp, #20]
 8005c4a:	9a05      	ldr	r2, [sp, #20]
 8005c4c:	441a      	add	r2, r3
 8005c4e:	9205      	str	r2, [sp, #20]
 8005c50:	9a06      	ldr	r2, [sp, #24]
 8005c52:	2101      	movs	r1, #1
 8005c54:	441a      	add	r2, r3
 8005c56:	4620      	mov	r0, r4
 8005c58:	9206      	str	r2, [sp, #24]
 8005c5a:	f000 fb2e 	bl	80062ba <__i2b>
 8005c5e:	4607      	mov	r7, r0
 8005c60:	2d00      	cmp	r5, #0
 8005c62:	dd0c      	ble.n	8005c7e <_dtoa_r+0x73e>
 8005c64:	9b06      	ldr	r3, [sp, #24]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	dd09      	ble.n	8005c7e <_dtoa_r+0x73e>
 8005c6a:	42ab      	cmp	r3, r5
 8005c6c:	9a05      	ldr	r2, [sp, #20]
 8005c6e:	bfa8      	it	ge
 8005c70:	462b      	movge	r3, r5
 8005c72:	1ad2      	subs	r2, r2, r3
 8005c74:	9205      	str	r2, [sp, #20]
 8005c76:	9a06      	ldr	r2, [sp, #24]
 8005c78:	1aed      	subs	r5, r5, r3
 8005c7a:	1ad3      	subs	r3, r2, r3
 8005c7c:	9306      	str	r3, [sp, #24]
 8005c7e:	9b08      	ldr	r3, [sp, #32]
 8005c80:	b1f3      	cbz	r3, 8005cc0 <_dtoa_r+0x780>
 8005c82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	f000 80a5 	beq.w	8005dd4 <_dtoa_r+0x894>
 8005c8a:	2e00      	cmp	r6, #0
 8005c8c:	dd10      	ble.n	8005cb0 <_dtoa_r+0x770>
 8005c8e:	4639      	mov	r1, r7
 8005c90:	4632      	mov	r2, r6
 8005c92:	4620      	mov	r0, r4
 8005c94:	f000 fba8 	bl	80063e8 <__pow5mult>
 8005c98:	4652      	mov	r2, sl
 8005c9a:	4601      	mov	r1, r0
 8005c9c:	4607      	mov	r7, r0
 8005c9e:	4620      	mov	r0, r4
 8005ca0:	f000 fb14 	bl	80062cc <__multiply>
 8005ca4:	4651      	mov	r1, sl
 8005ca6:	4680      	mov	r8, r0
 8005ca8:	4620      	mov	r0, r4
 8005caa:	f000 fa66 	bl	800617a <_Bfree>
 8005cae:	46c2      	mov	sl, r8
 8005cb0:	9b08      	ldr	r3, [sp, #32]
 8005cb2:	1b9a      	subs	r2, r3, r6
 8005cb4:	d004      	beq.n	8005cc0 <_dtoa_r+0x780>
 8005cb6:	4651      	mov	r1, sl
 8005cb8:	4620      	mov	r0, r4
 8005cba:	f000 fb95 	bl	80063e8 <__pow5mult>
 8005cbe:	4682      	mov	sl, r0
 8005cc0:	2101      	movs	r1, #1
 8005cc2:	4620      	mov	r0, r4
 8005cc4:	f000 faf9 	bl	80062ba <__i2b>
 8005cc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	4606      	mov	r6, r0
 8005cce:	f340 8083 	ble.w	8005dd8 <_dtoa_r+0x898>
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	4601      	mov	r1, r0
 8005cd6:	4620      	mov	r0, r4
 8005cd8:	f000 fb86 	bl	80063e8 <__pow5mult>
 8005cdc:	9b07      	ldr	r3, [sp, #28]
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	4606      	mov	r6, r0
 8005ce2:	dd7c      	ble.n	8005dde <_dtoa_r+0x89e>
 8005ce4:	f04f 0800 	mov.w	r8, #0
 8005ce8:	6933      	ldr	r3, [r6, #16]
 8005cea:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005cee:	6918      	ldr	r0, [r3, #16]
 8005cf0:	f000 fa95 	bl	800621e <__hi0bits>
 8005cf4:	f1c0 0020 	rsb	r0, r0, #32
 8005cf8:	9b06      	ldr	r3, [sp, #24]
 8005cfa:	4418      	add	r0, r3
 8005cfc:	f010 001f 	ands.w	r0, r0, #31
 8005d00:	f000 8096 	beq.w	8005e30 <_dtoa_r+0x8f0>
 8005d04:	f1c0 0320 	rsb	r3, r0, #32
 8005d08:	2b04      	cmp	r3, #4
 8005d0a:	f340 8087 	ble.w	8005e1c <_dtoa_r+0x8dc>
 8005d0e:	9b05      	ldr	r3, [sp, #20]
 8005d10:	f1c0 001c 	rsb	r0, r0, #28
 8005d14:	4403      	add	r3, r0
 8005d16:	9305      	str	r3, [sp, #20]
 8005d18:	9b06      	ldr	r3, [sp, #24]
 8005d1a:	4405      	add	r5, r0
 8005d1c:	4403      	add	r3, r0
 8005d1e:	9306      	str	r3, [sp, #24]
 8005d20:	9b05      	ldr	r3, [sp, #20]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	dd05      	ble.n	8005d32 <_dtoa_r+0x7f2>
 8005d26:	4651      	mov	r1, sl
 8005d28:	461a      	mov	r2, r3
 8005d2a:	4620      	mov	r0, r4
 8005d2c:	f000 fbaa 	bl	8006484 <__lshift>
 8005d30:	4682      	mov	sl, r0
 8005d32:	9b06      	ldr	r3, [sp, #24]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	dd05      	ble.n	8005d44 <_dtoa_r+0x804>
 8005d38:	4631      	mov	r1, r6
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	4620      	mov	r0, r4
 8005d3e:	f000 fba1 	bl	8006484 <__lshift>
 8005d42:	4606      	mov	r6, r0
 8005d44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d074      	beq.n	8005e34 <_dtoa_r+0x8f4>
 8005d4a:	4631      	mov	r1, r6
 8005d4c:	4650      	mov	r0, sl
 8005d4e:	f000 fbea 	bl	8006526 <__mcmp>
 8005d52:	2800      	cmp	r0, #0
 8005d54:	da6e      	bge.n	8005e34 <_dtoa_r+0x8f4>
 8005d56:	2300      	movs	r3, #0
 8005d58:	4651      	mov	r1, sl
 8005d5a:	220a      	movs	r2, #10
 8005d5c:	4620      	mov	r0, r4
 8005d5e:	f000 fa23 	bl	80061a8 <__multadd>
 8005d62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d64:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005d68:	4682      	mov	sl, r0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	f000 81a8 	beq.w	80060c0 <_dtoa_r+0xb80>
 8005d70:	2300      	movs	r3, #0
 8005d72:	4639      	mov	r1, r7
 8005d74:	220a      	movs	r2, #10
 8005d76:	4620      	mov	r0, r4
 8005d78:	f000 fa16 	bl	80061a8 <__multadd>
 8005d7c:	9b04      	ldr	r3, [sp, #16]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	4607      	mov	r7, r0
 8005d82:	f300 80c8 	bgt.w	8005f16 <_dtoa_r+0x9d6>
 8005d86:	9b07      	ldr	r3, [sp, #28]
 8005d88:	2b02      	cmp	r3, #2
 8005d8a:	f340 80c4 	ble.w	8005f16 <_dtoa_r+0x9d6>
 8005d8e:	e059      	b.n	8005e44 <_dtoa_r+0x904>
 8005d90:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005d92:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005d96:	e756      	b.n	8005c46 <_dtoa_r+0x706>
 8005d98:	9b03      	ldr	r3, [sp, #12]
 8005d9a:	1e5e      	subs	r6, r3, #1
 8005d9c:	9b08      	ldr	r3, [sp, #32]
 8005d9e:	42b3      	cmp	r3, r6
 8005da0:	bfbf      	itttt	lt
 8005da2:	9b08      	ldrlt	r3, [sp, #32]
 8005da4:	9608      	strlt	r6, [sp, #32]
 8005da6:	1af2      	sublt	r2, r6, r3
 8005da8:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8005daa:	bfb6      	itet	lt
 8005dac:	189b      	addlt	r3, r3, r2
 8005dae:	1b9e      	subge	r6, r3, r6
 8005db0:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8005db2:	9b03      	ldr	r3, [sp, #12]
 8005db4:	bfb8      	it	lt
 8005db6:	2600      	movlt	r6, #0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	bfb9      	ittee	lt
 8005dbc:	9b05      	ldrlt	r3, [sp, #20]
 8005dbe:	9a03      	ldrlt	r2, [sp, #12]
 8005dc0:	9d05      	ldrge	r5, [sp, #20]
 8005dc2:	9b03      	ldrge	r3, [sp, #12]
 8005dc4:	bfbc      	itt	lt
 8005dc6:	1a9d      	sublt	r5, r3, r2
 8005dc8:	2300      	movlt	r3, #0
 8005dca:	e73e      	b.n	8005c4a <_dtoa_r+0x70a>
 8005dcc:	9e08      	ldr	r6, [sp, #32]
 8005dce:	9d05      	ldr	r5, [sp, #20]
 8005dd0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005dd2:	e745      	b.n	8005c60 <_dtoa_r+0x720>
 8005dd4:	9a08      	ldr	r2, [sp, #32]
 8005dd6:	e76e      	b.n	8005cb6 <_dtoa_r+0x776>
 8005dd8:	9b07      	ldr	r3, [sp, #28]
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	dc19      	bgt.n	8005e12 <_dtoa_r+0x8d2>
 8005dde:	9b00      	ldr	r3, [sp, #0]
 8005de0:	b9bb      	cbnz	r3, 8005e12 <_dtoa_r+0x8d2>
 8005de2:	9b01      	ldr	r3, [sp, #4]
 8005de4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005de8:	b99b      	cbnz	r3, 8005e12 <_dtoa_r+0x8d2>
 8005dea:	9b01      	ldr	r3, [sp, #4]
 8005dec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005df0:	0d1b      	lsrs	r3, r3, #20
 8005df2:	051b      	lsls	r3, r3, #20
 8005df4:	b183      	cbz	r3, 8005e18 <_dtoa_r+0x8d8>
 8005df6:	9b05      	ldr	r3, [sp, #20]
 8005df8:	3301      	adds	r3, #1
 8005dfa:	9305      	str	r3, [sp, #20]
 8005dfc:	9b06      	ldr	r3, [sp, #24]
 8005dfe:	3301      	adds	r3, #1
 8005e00:	9306      	str	r3, [sp, #24]
 8005e02:	f04f 0801 	mov.w	r8, #1
 8005e06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	f47f af6d 	bne.w	8005ce8 <_dtoa_r+0x7a8>
 8005e0e:	2001      	movs	r0, #1
 8005e10:	e772      	b.n	8005cf8 <_dtoa_r+0x7b8>
 8005e12:	f04f 0800 	mov.w	r8, #0
 8005e16:	e7f6      	b.n	8005e06 <_dtoa_r+0x8c6>
 8005e18:	4698      	mov	r8, r3
 8005e1a:	e7f4      	b.n	8005e06 <_dtoa_r+0x8c6>
 8005e1c:	d080      	beq.n	8005d20 <_dtoa_r+0x7e0>
 8005e1e:	9a05      	ldr	r2, [sp, #20]
 8005e20:	331c      	adds	r3, #28
 8005e22:	441a      	add	r2, r3
 8005e24:	9205      	str	r2, [sp, #20]
 8005e26:	9a06      	ldr	r2, [sp, #24]
 8005e28:	441a      	add	r2, r3
 8005e2a:	441d      	add	r5, r3
 8005e2c:	4613      	mov	r3, r2
 8005e2e:	e776      	b.n	8005d1e <_dtoa_r+0x7de>
 8005e30:	4603      	mov	r3, r0
 8005e32:	e7f4      	b.n	8005e1e <_dtoa_r+0x8de>
 8005e34:	9b03      	ldr	r3, [sp, #12]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	dc36      	bgt.n	8005ea8 <_dtoa_r+0x968>
 8005e3a:	9b07      	ldr	r3, [sp, #28]
 8005e3c:	2b02      	cmp	r3, #2
 8005e3e:	dd33      	ble.n	8005ea8 <_dtoa_r+0x968>
 8005e40:	9b03      	ldr	r3, [sp, #12]
 8005e42:	9304      	str	r3, [sp, #16]
 8005e44:	9b04      	ldr	r3, [sp, #16]
 8005e46:	b963      	cbnz	r3, 8005e62 <_dtoa_r+0x922>
 8005e48:	4631      	mov	r1, r6
 8005e4a:	2205      	movs	r2, #5
 8005e4c:	4620      	mov	r0, r4
 8005e4e:	f000 f9ab 	bl	80061a8 <__multadd>
 8005e52:	4601      	mov	r1, r0
 8005e54:	4606      	mov	r6, r0
 8005e56:	4650      	mov	r0, sl
 8005e58:	f000 fb65 	bl	8006526 <__mcmp>
 8005e5c:	2800      	cmp	r0, #0
 8005e5e:	f73f adb6 	bgt.w	80059ce <_dtoa_r+0x48e>
 8005e62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e64:	9d02      	ldr	r5, [sp, #8]
 8005e66:	ea6f 0b03 	mvn.w	fp, r3
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	9303      	str	r3, [sp, #12]
 8005e6e:	4631      	mov	r1, r6
 8005e70:	4620      	mov	r0, r4
 8005e72:	f000 f982 	bl	800617a <_Bfree>
 8005e76:	2f00      	cmp	r7, #0
 8005e78:	f43f aea6 	beq.w	8005bc8 <_dtoa_r+0x688>
 8005e7c:	9b03      	ldr	r3, [sp, #12]
 8005e7e:	b12b      	cbz	r3, 8005e8c <_dtoa_r+0x94c>
 8005e80:	42bb      	cmp	r3, r7
 8005e82:	d003      	beq.n	8005e8c <_dtoa_r+0x94c>
 8005e84:	4619      	mov	r1, r3
 8005e86:	4620      	mov	r0, r4
 8005e88:	f000 f977 	bl	800617a <_Bfree>
 8005e8c:	4639      	mov	r1, r7
 8005e8e:	4620      	mov	r0, r4
 8005e90:	f000 f973 	bl	800617a <_Bfree>
 8005e94:	e698      	b.n	8005bc8 <_dtoa_r+0x688>
 8005e96:	2600      	movs	r6, #0
 8005e98:	4637      	mov	r7, r6
 8005e9a:	e7e2      	b.n	8005e62 <_dtoa_r+0x922>
 8005e9c:	46bb      	mov	fp, r7
 8005e9e:	4637      	mov	r7, r6
 8005ea0:	e595      	b.n	80059ce <_dtoa_r+0x48e>
 8005ea2:	bf00      	nop
 8005ea4:	40240000 	.word	0x40240000
 8005ea8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005eaa:	bb93      	cbnz	r3, 8005f12 <_dtoa_r+0x9d2>
 8005eac:	9b03      	ldr	r3, [sp, #12]
 8005eae:	9304      	str	r3, [sp, #16]
 8005eb0:	9d02      	ldr	r5, [sp, #8]
 8005eb2:	4631      	mov	r1, r6
 8005eb4:	4650      	mov	r0, sl
 8005eb6:	f7ff fab7 	bl	8005428 <quorem>
 8005eba:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005ebe:	f805 9b01 	strb.w	r9, [r5], #1
 8005ec2:	9b02      	ldr	r3, [sp, #8]
 8005ec4:	9a04      	ldr	r2, [sp, #16]
 8005ec6:	1aeb      	subs	r3, r5, r3
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	f300 80dc 	bgt.w	8006086 <_dtoa_r+0xb46>
 8005ece:	9b02      	ldr	r3, [sp, #8]
 8005ed0:	2a01      	cmp	r2, #1
 8005ed2:	bfac      	ite	ge
 8005ed4:	189b      	addge	r3, r3, r2
 8005ed6:	3301      	addlt	r3, #1
 8005ed8:	4698      	mov	r8, r3
 8005eda:	2300      	movs	r3, #0
 8005edc:	9303      	str	r3, [sp, #12]
 8005ede:	4651      	mov	r1, sl
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	4620      	mov	r0, r4
 8005ee4:	f000 face 	bl	8006484 <__lshift>
 8005ee8:	4631      	mov	r1, r6
 8005eea:	4682      	mov	sl, r0
 8005eec:	f000 fb1b 	bl	8006526 <__mcmp>
 8005ef0:	2800      	cmp	r0, #0
 8005ef2:	f300 808d 	bgt.w	8006010 <_dtoa_r+0xad0>
 8005ef6:	d103      	bne.n	8005f00 <_dtoa_r+0x9c0>
 8005ef8:	f019 0f01 	tst.w	r9, #1
 8005efc:	f040 8088 	bne.w	8006010 <_dtoa_r+0xad0>
 8005f00:	4645      	mov	r5, r8
 8005f02:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005f06:	2b30      	cmp	r3, #48	; 0x30
 8005f08:	f105 32ff 	add.w	r2, r5, #4294967295
 8005f0c:	d1af      	bne.n	8005e6e <_dtoa_r+0x92e>
 8005f0e:	4615      	mov	r5, r2
 8005f10:	e7f7      	b.n	8005f02 <_dtoa_r+0x9c2>
 8005f12:	9b03      	ldr	r3, [sp, #12]
 8005f14:	9304      	str	r3, [sp, #16]
 8005f16:	2d00      	cmp	r5, #0
 8005f18:	dd05      	ble.n	8005f26 <_dtoa_r+0x9e6>
 8005f1a:	4639      	mov	r1, r7
 8005f1c:	462a      	mov	r2, r5
 8005f1e:	4620      	mov	r0, r4
 8005f20:	f000 fab0 	bl	8006484 <__lshift>
 8005f24:	4607      	mov	r7, r0
 8005f26:	f1b8 0f00 	cmp.w	r8, #0
 8005f2a:	d04c      	beq.n	8005fc6 <_dtoa_r+0xa86>
 8005f2c:	6879      	ldr	r1, [r7, #4]
 8005f2e:	4620      	mov	r0, r4
 8005f30:	f000 f8ef 	bl	8006112 <_Balloc>
 8005f34:	693a      	ldr	r2, [r7, #16]
 8005f36:	3202      	adds	r2, #2
 8005f38:	4605      	mov	r5, r0
 8005f3a:	0092      	lsls	r2, r2, #2
 8005f3c:	f107 010c 	add.w	r1, r7, #12
 8005f40:	300c      	adds	r0, #12
 8005f42:	f000 f8d9 	bl	80060f8 <memcpy>
 8005f46:	2201      	movs	r2, #1
 8005f48:	4629      	mov	r1, r5
 8005f4a:	4620      	mov	r0, r4
 8005f4c:	f000 fa9a 	bl	8006484 <__lshift>
 8005f50:	9b00      	ldr	r3, [sp, #0]
 8005f52:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005f56:	9703      	str	r7, [sp, #12]
 8005f58:	f003 0301 	and.w	r3, r3, #1
 8005f5c:	4607      	mov	r7, r0
 8005f5e:	9305      	str	r3, [sp, #20]
 8005f60:	4631      	mov	r1, r6
 8005f62:	4650      	mov	r0, sl
 8005f64:	f7ff fa60 	bl	8005428 <quorem>
 8005f68:	9903      	ldr	r1, [sp, #12]
 8005f6a:	4605      	mov	r5, r0
 8005f6c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005f70:	4650      	mov	r0, sl
 8005f72:	f000 fad8 	bl	8006526 <__mcmp>
 8005f76:	463a      	mov	r2, r7
 8005f78:	9000      	str	r0, [sp, #0]
 8005f7a:	4631      	mov	r1, r6
 8005f7c:	4620      	mov	r0, r4
 8005f7e:	f000 faec 	bl	800655a <__mdiff>
 8005f82:	68c3      	ldr	r3, [r0, #12]
 8005f84:	4602      	mov	r2, r0
 8005f86:	bb03      	cbnz	r3, 8005fca <_dtoa_r+0xa8a>
 8005f88:	4601      	mov	r1, r0
 8005f8a:	9006      	str	r0, [sp, #24]
 8005f8c:	4650      	mov	r0, sl
 8005f8e:	f000 faca 	bl	8006526 <__mcmp>
 8005f92:	9a06      	ldr	r2, [sp, #24]
 8005f94:	4603      	mov	r3, r0
 8005f96:	4611      	mov	r1, r2
 8005f98:	4620      	mov	r0, r4
 8005f9a:	9306      	str	r3, [sp, #24]
 8005f9c:	f000 f8ed 	bl	800617a <_Bfree>
 8005fa0:	9b06      	ldr	r3, [sp, #24]
 8005fa2:	b9a3      	cbnz	r3, 8005fce <_dtoa_r+0xa8e>
 8005fa4:	9a07      	ldr	r2, [sp, #28]
 8005fa6:	b992      	cbnz	r2, 8005fce <_dtoa_r+0xa8e>
 8005fa8:	9a05      	ldr	r2, [sp, #20]
 8005faa:	b982      	cbnz	r2, 8005fce <_dtoa_r+0xa8e>
 8005fac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005fb0:	d029      	beq.n	8006006 <_dtoa_r+0xac6>
 8005fb2:	9b00      	ldr	r3, [sp, #0]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	dd01      	ble.n	8005fbc <_dtoa_r+0xa7c>
 8005fb8:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8005fbc:	f108 0501 	add.w	r5, r8, #1
 8005fc0:	f888 9000 	strb.w	r9, [r8]
 8005fc4:	e753      	b.n	8005e6e <_dtoa_r+0x92e>
 8005fc6:	4638      	mov	r0, r7
 8005fc8:	e7c2      	b.n	8005f50 <_dtoa_r+0xa10>
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e7e3      	b.n	8005f96 <_dtoa_r+0xa56>
 8005fce:	9a00      	ldr	r2, [sp, #0]
 8005fd0:	2a00      	cmp	r2, #0
 8005fd2:	db04      	blt.n	8005fde <_dtoa_r+0xa9e>
 8005fd4:	d125      	bne.n	8006022 <_dtoa_r+0xae2>
 8005fd6:	9a07      	ldr	r2, [sp, #28]
 8005fd8:	bb1a      	cbnz	r2, 8006022 <_dtoa_r+0xae2>
 8005fda:	9a05      	ldr	r2, [sp, #20]
 8005fdc:	bb0a      	cbnz	r2, 8006022 <_dtoa_r+0xae2>
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	ddec      	ble.n	8005fbc <_dtoa_r+0xa7c>
 8005fe2:	4651      	mov	r1, sl
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	4620      	mov	r0, r4
 8005fe8:	f000 fa4c 	bl	8006484 <__lshift>
 8005fec:	4631      	mov	r1, r6
 8005fee:	4682      	mov	sl, r0
 8005ff0:	f000 fa99 	bl	8006526 <__mcmp>
 8005ff4:	2800      	cmp	r0, #0
 8005ff6:	dc03      	bgt.n	8006000 <_dtoa_r+0xac0>
 8005ff8:	d1e0      	bne.n	8005fbc <_dtoa_r+0xa7c>
 8005ffa:	f019 0f01 	tst.w	r9, #1
 8005ffe:	d0dd      	beq.n	8005fbc <_dtoa_r+0xa7c>
 8006000:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006004:	d1d8      	bne.n	8005fb8 <_dtoa_r+0xa78>
 8006006:	2339      	movs	r3, #57	; 0x39
 8006008:	f888 3000 	strb.w	r3, [r8]
 800600c:	f108 0801 	add.w	r8, r8, #1
 8006010:	4645      	mov	r5, r8
 8006012:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006016:	2b39      	cmp	r3, #57	; 0x39
 8006018:	f105 32ff 	add.w	r2, r5, #4294967295
 800601c:	d03b      	beq.n	8006096 <_dtoa_r+0xb56>
 800601e:	3301      	adds	r3, #1
 8006020:	e040      	b.n	80060a4 <_dtoa_r+0xb64>
 8006022:	2b00      	cmp	r3, #0
 8006024:	f108 0501 	add.w	r5, r8, #1
 8006028:	dd05      	ble.n	8006036 <_dtoa_r+0xaf6>
 800602a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800602e:	d0ea      	beq.n	8006006 <_dtoa_r+0xac6>
 8006030:	f109 0901 	add.w	r9, r9, #1
 8006034:	e7c4      	b.n	8005fc0 <_dtoa_r+0xa80>
 8006036:	9b02      	ldr	r3, [sp, #8]
 8006038:	9a04      	ldr	r2, [sp, #16]
 800603a:	f805 9c01 	strb.w	r9, [r5, #-1]
 800603e:	1aeb      	subs	r3, r5, r3
 8006040:	4293      	cmp	r3, r2
 8006042:	46a8      	mov	r8, r5
 8006044:	f43f af4b 	beq.w	8005ede <_dtoa_r+0x99e>
 8006048:	4651      	mov	r1, sl
 800604a:	2300      	movs	r3, #0
 800604c:	220a      	movs	r2, #10
 800604e:	4620      	mov	r0, r4
 8006050:	f000 f8aa 	bl	80061a8 <__multadd>
 8006054:	9b03      	ldr	r3, [sp, #12]
 8006056:	9903      	ldr	r1, [sp, #12]
 8006058:	42bb      	cmp	r3, r7
 800605a:	4682      	mov	sl, r0
 800605c:	f04f 0300 	mov.w	r3, #0
 8006060:	f04f 020a 	mov.w	r2, #10
 8006064:	4620      	mov	r0, r4
 8006066:	d104      	bne.n	8006072 <_dtoa_r+0xb32>
 8006068:	f000 f89e 	bl	80061a8 <__multadd>
 800606c:	9003      	str	r0, [sp, #12]
 800606e:	4607      	mov	r7, r0
 8006070:	e776      	b.n	8005f60 <_dtoa_r+0xa20>
 8006072:	f000 f899 	bl	80061a8 <__multadd>
 8006076:	2300      	movs	r3, #0
 8006078:	9003      	str	r0, [sp, #12]
 800607a:	220a      	movs	r2, #10
 800607c:	4639      	mov	r1, r7
 800607e:	4620      	mov	r0, r4
 8006080:	f000 f892 	bl	80061a8 <__multadd>
 8006084:	e7f3      	b.n	800606e <_dtoa_r+0xb2e>
 8006086:	4651      	mov	r1, sl
 8006088:	2300      	movs	r3, #0
 800608a:	220a      	movs	r2, #10
 800608c:	4620      	mov	r0, r4
 800608e:	f000 f88b 	bl	80061a8 <__multadd>
 8006092:	4682      	mov	sl, r0
 8006094:	e70d      	b.n	8005eb2 <_dtoa_r+0x972>
 8006096:	9b02      	ldr	r3, [sp, #8]
 8006098:	4293      	cmp	r3, r2
 800609a:	d105      	bne.n	80060a8 <_dtoa_r+0xb68>
 800609c:	9a02      	ldr	r2, [sp, #8]
 800609e:	f10b 0b01 	add.w	fp, fp, #1
 80060a2:	2331      	movs	r3, #49	; 0x31
 80060a4:	7013      	strb	r3, [r2, #0]
 80060a6:	e6e2      	b.n	8005e6e <_dtoa_r+0x92e>
 80060a8:	4615      	mov	r5, r2
 80060aa:	e7b2      	b.n	8006012 <_dtoa_r+0xad2>
 80060ac:	4b09      	ldr	r3, [pc, #36]	; (80060d4 <_dtoa_r+0xb94>)
 80060ae:	f7ff baae 	b.w	800560e <_dtoa_r+0xce>
 80060b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	f47f aa88 	bne.w	80055ca <_dtoa_r+0x8a>
 80060ba:	4b07      	ldr	r3, [pc, #28]	; (80060d8 <_dtoa_r+0xb98>)
 80060bc:	f7ff baa7 	b.w	800560e <_dtoa_r+0xce>
 80060c0:	9b04      	ldr	r3, [sp, #16]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	f73f aef4 	bgt.w	8005eb0 <_dtoa_r+0x970>
 80060c8:	9b07      	ldr	r3, [sp, #28]
 80060ca:	2b02      	cmp	r3, #2
 80060cc:	f77f aef0 	ble.w	8005eb0 <_dtoa_r+0x970>
 80060d0:	e6b8      	b.n	8005e44 <_dtoa_r+0x904>
 80060d2:	bf00      	nop
 80060d4:	08006b44 	.word	0x08006b44
 80060d8:	08006b68 	.word	0x08006b68

080060dc <_localeconv_r>:
 80060dc:	4b04      	ldr	r3, [pc, #16]	; (80060f0 <_localeconv_r+0x14>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	6a18      	ldr	r0, [r3, #32]
 80060e2:	4b04      	ldr	r3, [pc, #16]	; (80060f4 <_localeconv_r+0x18>)
 80060e4:	2800      	cmp	r0, #0
 80060e6:	bf08      	it	eq
 80060e8:	4618      	moveq	r0, r3
 80060ea:	30f0      	adds	r0, #240	; 0xf0
 80060ec:	4770      	bx	lr
 80060ee:	bf00      	nop
 80060f0:	20000160 	.word	0x20000160
 80060f4:	200001c4 	.word	0x200001c4

080060f8 <memcpy>:
 80060f8:	b510      	push	{r4, lr}
 80060fa:	1e43      	subs	r3, r0, #1
 80060fc:	440a      	add	r2, r1
 80060fe:	4291      	cmp	r1, r2
 8006100:	d100      	bne.n	8006104 <memcpy+0xc>
 8006102:	bd10      	pop	{r4, pc}
 8006104:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006108:	f803 4f01 	strb.w	r4, [r3, #1]!
 800610c:	e7f7      	b.n	80060fe <memcpy+0x6>

0800610e <__malloc_lock>:
 800610e:	4770      	bx	lr

08006110 <__malloc_unlock>:
 8006110:	4770      	bx	lr

08006112 <_Balloc>:
 8006112:	b570      	push	{r4, r5, r6, lr}
 8006114:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006116:	4604      	mov	r4, r0
 8006118:	460e      	mov	r6, r1
 800611a:	b93d      	cbnz	r5, 800612c <_Balloc+0x1a>
 800611c:	2010      	movs	r0, #16
 800611e:	f7fe fc1f 	bl	8004960 <malloc>
 8006122:	6260      	str	r0, [r4, #36]	; 0x24
 8006124:	6045      	str	r5, [r0, #4]
 8006126:	6085      	str	r5, [r0, #8]
 8006128:	6005      	str	r5, [r0, #0]
 800612a:	60c5      	str	r5, [r0, #12]
 800612c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800612e:	68eb      	ldr	r3, [r5, #12]
 8006130:	b183      	cbz	r3, 8006154 <_Balloc+0x42>
 8006132:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800613a:	b9b8      	cbnz	r0, 800616c <_Balloc+0x5a>
 800613c:	2101      	movs	r1, #1
 800613e:	fa01 f506 	lsl.w	r5, r1, r6
 8006142:	1d6a      	adds	r2, r5, #5
 8006144:	0092      	lsls	r2, r2, #2
 8006146:	4620      	mov	r0, r4
 8006148:	f000 fab4 	bl	80066b4 <_calloc_r>
 800614c:	b160      	cbz	r0, 8006168 <_Balloc+0x56>
 800614e:	6046      	str	r6, [r0, #4]
 8006150:	6085      	str	r5, [r0, #8]
 8006152:	e00e      	b.n	8006172 <_Balloc+0x60>
 8006154:	2221      	movs	r2, #33	; 0x21
 8006156:	2104      	movs	r1, #4
 8006158:	4620      	mov	r0, r4
 800615a:	f000 faab 	bl	80066b4 <_calloc_r>
 800615e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006160:	60e8      	str	r0, [r5, #12]
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d1e4      	bne.n	8006132 <_Balloc+0x20>
 8006168:	2000      	movs	r0, #0
 800616a:	bd70      	pop	{r4, r5, r6, pc}
 800616c:	6802      	ldr	r2, [r0, #0]
 800616e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006172:	2300      	movs	r3, #0
 8006174:	6103      	str	r3, [r0, #16]
 8006176:	60c3      	str	r3, [r0, #12]
 8006178:	bd70      	pop	{r4, r5, r6, pc}

0800617a <_Bfree>:
 800617a:	b570      	push	{r4, r5, r6, lr}
 800617c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800617e:	4606      	mov	r6, r0
 8006180:	460d      	mov	r5, r1
 8006182:	b93c      	cbnz	r4, 8006194 <_Bfree+0x1a>
 8006184:	2010      	movs	r0, #16
 8006186:	f7fe fbeb 	bl	8004960 <malloc>
 800618a:	6270      	str	r0, [r6, #36]	; 0x24
 800618c:	6044      	str	r4, [r0, #4]
 800618e:	6084      	str	r4, [r0, #8]
 8006190:	6004      	str	r4, [r0, #0]
 8006192:	60c4      	str	r4, [r0, #12]
 8006194:	b13d      	cbz	r5, 80061a6 <_Bfree+0x2c>
 8006196:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006198:	686a      	ldr	r2, [r5, #4]
 800619a:	68db      	ldr	r3, [r3, #12]
 800619c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80061a0:	6029      	str	r1, [r5, #0]
 80061a2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80061a6:	bd70      	pop	{r4, r5, r6, pc}

080061a8 <__multadd>:
 80061a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061ac:	690d      	ldr	r5, [r1, #16]
 80061ae:	461f      	mov	r7, r3
 80061b0:	4606      	mov	r6, r0
 80061b2:	460c      	mov	r4, r1
 80061b4:	f101 0e14 	add.w	lr, r1, #20
 80061b8:	2300      	movs	r3, #0
 80061ba:	f8de 0000 	ldr.w	r0, [lr]
 80061be:	b281      	uxth	r1, r0
 80061c0:	fb02 7101 	mla	r1, r2, r1, r7
 80061c4:	0c0f      	lsrs	r7, r1, #16
 80061c6:	0c00      	lsrs	r0, r0, #16
 80061c8:	fb02 7000 	mla	r0, r2, r0, r7
 80061cc:	b289      	uxth	r1, r1
 80061ce:	3301      	adds	r3, #1
 80061d0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80061d4:	429d      	cmp	r5, r3
 80061d6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80061da:	f84e 1b04 	str.w	r1, [lr], #4
 80061de:	dcec      	bgt.n	80061ba <__multadd+0x12>
 80061e0:	b1d7      	cbz	r7, 8006218 <__multadd+0x70>
 80061e2:	68a3      	ldr	r3, [r4, #8]
 80061e4:	429d      	cmp	r5, r3
 80061e6:	db12      	blt.n	800620e <__multadd+0x66>
 80061e8:	6861      	ldr	r1, [r4, #4]
 80061ea:	4630      	mov	r0, r6
 80061ec:	3101      	adds	r1, #1
 80061ee:	f7ff ff90 	bl	8006112 <_Balloc>
 80061f2:	6922      	ldr	r2, [r4, #16]
 80061f4:	3202      	adds	r2, #2
 80061f6:	f104 010c 	add.w	r1, r4, #12
 80061fa:	4680      	mov	r8, r0
 80061fc:	0092      	lsls	r2, r2, #2
 80061fe:	300c      	adds	r0, #12
 8006200:	f7ff ff7a 	bl	80060f8 <memcpy>
 8006204:	4621      	mov	r1, r4
 8006206:	4630      	mov	r0, r6
 8006208:	f7ff ffb7 	bl	800617a <_Bfree>
 800620c:	4644      	mov	r4, r8
 800620e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006212:	3501      	adds	r5, #1
 8006214:	615f      	str	r7, [r3, #20]
 8006216:	6125      	str	r5, [r4, #16]
 8006218:	4620      	mov	r0, r4
 800621a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800621e <__hi0bits>:
 800621e:	0c02      	lsrs	r2, r0, #16
 8006220:	0412      	lsls	r2, r2, #16
 8006222:	4603      	mov	r3, r0
 8006224:	b9b2      	cbnz	r2, 8006254 <__hi0bits+0x36>
 8006226:	0403      	lsls	r3, r0, #16
 8006228:	2010      	movs	r0, #16
 800622a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800622e:	bf04      	itt	eq
 8006230:	021b      	lsleq	r3, r3, #8
 8006232:	3008      	addeq	r0, #8
 8006234:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006238:	bf04      	itt	eq
 800623a:	011b      	lsleq	r3, r3, #4
 800623c:	3004      	addeq	r0, #4
 800623e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006242:	bf04      	itt	eq
 8006244:	009b      	lsleq	r3, r3, #2
 8006246:	3002      	addeq	r0, #2
 8006248:	2b00      	cmp	r3, #0
 800624a:	db06      	blt.n	800625a <__hi0bits+0x3c>
 800624c:	005b      	lsls	r3, r3, #1
 800624e:	d503      	bpl.n	8006258 <__hi0bits+0x3a>
 8006250:	3001      	adds	r0, #1
 8006252:	4770      	bx	lr
 8006254:	2000      	movs	r0, #0
 8006256:	e7e8      	b.n	800622a <__hi0bits+0xc>
 8006258:	2020      	movs	r0, #32
 800625a:	4770      	bx	lr

0800625c <__lo0bits>:
 800625c:	6803      	ldr	r3, [r0, #0]
 800625e:	f013 0207 	ands.w	r2, r3, #7
 8006262:	4601      	mov	r1, r0
 8006264:	d00b      	beq.n	800627e <__lo0bits+0x22>
 8006266:	07da      	lsls	r2, r3, #31
 8006268:	d423      	bmi.n	80062b2 <__lo0bits+0x56>
 800626a:	0798      	lsls	r0, r3, #30
 800626c:	bf49      	itett	mi
 800626e:	085b      	lsrmi	r3, r3, #1
 8006270:	089b      	lsrpl	r3, r3, #2
 8006272:	2001      	movmi	r0, #1
 8006274:	600b      	strmi	r3, [r1, #0]
 8006276:	bf5c      	itt	pl
 8006278:	600b      	strpl	r3, [r1, #0]
 800627a:	2002      	movpl	r0, #2
 800627c:	4770      	bx	lr
 800627e:	b298      	uxth	r0, r3
 8006280:	b9a8      	cbnz	r0, 80062ae <__lo0bits+0x52>
 8006282:	0c1b      	lsrs	r3, r3, #16
 8006284:	2010      	movs	r0, #16
 8006286:	f013 0fff 	tst.w	r3, #255	; 0xff
 800628a:	bf04      	itt	eq
 800628c:	0a1b      	lsreq	r3, r3, #8
 800628e:	3008      	addeq	r0, #8
 8006290:	071a      	lsls	r2, r3, #28
 8006292:	bf04      	itt	eq
 8006294:	091b      	lsreq	r3, r3, #4
 8006296:	3004      	addeq	r0, #4
 8006298:	079a      	lsls	r2, r3, #30
 800629a:	bf04      	itt	eq
 800629c:	089b      	lsreq	r3, r3, #2
 800629e:	3002      	addeq	r0, #2
 80062a0:	07da      	lsls	r2, r3, #31
 80062a2:	d402      	bmi.n	80062aa <__lo0bits+0x4e>
 80062a4:	085b      	lsrs	r3, r3, #1
 80062a6:	d006      	beq.n	80062b6 <__lo0bits+0x5a>
 80062a8:	3001      	adds	r0, #1
 80062aa:	600b      	str	r3, [r1, #0]
 80062ac:	4770      	bx	lr
 80062ae:	4610      	mov	r0, r2
 80062b0:	e7e9      	b.n	8006286 <__lo0bits+0x2a>
 80062b2:	2000      	movs	r0, #0
 80062b4:	4770      	bx	lr
 80062b6:	2020      	movs	r0, #32
 80062b8:	4770      	bx	lr

080062ba <__i2b>:
 80062ba:	b510      	push	{r4, lr}
 80062bc:	460c      	mov	r4, r1
 80062be:	2101      	movs	r1, #1
 80062c0:	f7ff ff27 	bl	8006112 <_Balloc>
 80062c4:	2201      	movs	r2, #1
 80062c6:	6144      	str	r4, [r0, #20]
 80062c8:	6102      	str	r2, [r0, #16]
 80062ca:	bd10      	pop	{r4, pc}

080062cc <__multiply>:
 80062cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062d0:	4614      	mov	r4, r2
 80062d2:	690a      	ldr	r2, [r1, #16]
 80062d4:	6923      	ldr	r3, [r4, #16]
 80062d6:	429a      	cmp	r2, r3
 80062d8:	bfb8      	it	lt
 80062da:	460b      	movlt	r3, r1
 80062dc:	4689      	mov	r9, r1
 80062de:	bfbc      	itt	lt
 80062e0:	46a1      	movlt	r9, r4
 80062e2:	461c      	movlt	r4, r3
 80062e4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80062e8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80062ec:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80062f0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80062f4:	eb07 060a 	add.w	r6, r7, sl
 80062f8:	429e      	cmp	r6, r3
 80062fa:	bfc8      	it	gt
 80062fc:	3101      	addgt	r1, #1
 80062fe:	f7ff ff08 	bl	8006112 <_Balloc>
 8006302:	f100 0514 	add.w	r5, r0, #20
 8006306:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800630a:	462b      	mov	r3, r5
 800630c:	2200      	movs	r2, #0
 800630e:	4543      	cmp	r3, r8
 8006310:	d316      	bcc.n	8006340 <__multiply+0x74>
 8006312:	f104 0214 	add.w	r2, r4, #20
 8006316:	f109 0114 	add.w	r1, r9, #20
 800631a:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 800631e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006322:	9301      	str	r3, [sp, #4]
 8006324:	9c01      	ldr	r4, [sp, #4]
 8006326:	4294      	cmp	r4, r2
 8006328:	4613      	mov	r3, r2
 800632a:	d80c      	bhi.n	8006346 <__multiply+0x7a>
 800632c:	2e00      	cmp	r6, #0
 800632e:	dd03      	ble.n	8006338 <__multiply+0x6c>
 8006330:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006334:	2b00      	cmp	r3, #0
 8006336:	d054      	beq.n	80063e2 <__multiply+0x116>
 8006338:	6106      	str	r6, [r0, #16]
 800633a:	b003      	add	sp, #12
 800633c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006340:	f843 2b04 	str.w	r2, [r3], #4
 8006344:	e7e3      	b.n	800630e <__multiply+0x42>
 8006346:	f8b3 a000 	ldrh.w	sl, [r3]
 800634a:	3204      	adds	r2, #4
 800634c:	f1ba 0f00 	cmp.w	sl, #0
 8006350:	d020      	beq.n	8006394 <__multiply+0xc8>
 8006352:	46ae      	mov	lr, r5
 8006354:	4689      	mov	r9, r1
 8006356:	f04f 0c00 	mov.w	ip, #0
 800635a:	f859 4b04 	ldr.w	r4, [r9], #4
 800635e:	f8be b000 	ldrh.w	fp, [lr]
 8006362:	b2a3      	uxth	r3, r4
 8006364:	fb0a b303 	mla	r3, sl, r3, fp
 8006368:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 800636c:	f8de 4000 	ldr.w	r4, [lr]
 8006370:	4463      	add	r3, ip
 8006372:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8006376:	fb0a c40b 	mla	r4, sl, fp, ip
 800637a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800637e:	b29b      	uxth	r3, r3
 8006380:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006384:	454f      	cmp	r7, r9
 8006386:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800638a:	f84e 3b04 	str.w	r3, [lr], #4
 800638e:	d8e4      	bhi.n	800635a <__multiply+0x8e>
 8006390:	f8ce c000 	str.w	ip, [lr]
 8006394:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8006398:	f1b9 0f00 	cmp.w	r9, #0
 800639c:	d01f      	beq.n	80063de <__multiply+0x112>
 800639e:	682b      	ldr	r3, [r5, #0]
 80063a0:	46ae      	mov	lr, r5
 80063a2:	468c      	mov	ip, r1
 80063a4:	f04f 0a00 	mov.w	sl, #0
 80063a8:	f8bc 4000 	ldrh.w	r4, [ip]
 80063ac:	f8be b002 	ldrh.w	fp, [lr, #2]
 80063b0:	fb09 b404 	mla	r4, r9, r4, fp
 80063b4:	44a2      	add	sl, r4
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 80063bc:	f84e 3b04 	str.w	r3, [lr], #4
 80063c0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80063c4:	f8be 4000 	ldrh.w	r4, [lr]
 80063c8:	0c1b      	lsrs	r3, r3, #16
 80063ca:	fb09 4303 	mla	r3, r9, r3, r4
 80063ce:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 80063d2:	4567      	cmp	r7, ip
 80063d4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80063d8:	d8e6      	bhi.n	80063a8 <__multiply+0xdc>
 80063da:	f8ce 3000 	str.w	r3, [lr]
 80063de:	3504      	adds	r5, #4
 80063e0:	e7a0      	b.n	8006324 <__multiply+0x58>
 80063e2:	3e01      	subs	r6, #1
 80063e4:	e7a2      	b.n	800632c <__multiply+0x60>
	...

080063e8 <__pow5mult>:
 80063e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063ec:	4615      	mov	r5, r2
 80063ee:	f012 0203 	ands.w	r2, r2, #3
 80063f2:	4606      	mov	r6, r0
 80063f4:	460f      	mov	r7, r1
 80063f6:	d007      	beq.n	8006408 <__pow5mult+0x20>
 80063f8:	3a01      	subs	r2, #1
 80063fa:	4c21      	ldr	r4, [pc, #132]	; (8006480 <__pow5mult+0x98>)
 80063fc:	2300      	movs	r3, #0
 80063fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006402:	f7ff fed1 	bl	80061a8 <__multadd>
 8006406:	4607      	mov	r7, r0
 8006408:	10ad      	asrs	r5, r5, #2
 800640a:	d035      	beq.n	8006478 <__pow5mult+0x90>
 800640c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800640e:	b93c      	cbnz	r4, 8006420 <__pow5mult+0x38>
 8006410:	2010      	movs	r0, #16
 8006412:	f7fe faa5 	bl	8004960 <malloc>
 8006416:	6270      	str	r0, [r6, #36]	; 0x24
 8006418:	6044      	str	r4, [r0, #4]
 800641a:	6084      	str	r4, [r0, #8]
 800641c:	6004      	str	r4, [r0, #0]
 800641e:	60c4      	str	r4, [r0, #12]
 8006420:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006424:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006428:	b94c      	cbnz	r4, 800643e <__pow5mult+0x56>
 800642a:	f240 2171 	movw	r1, #625	; 0x271
 800642e:	4630      	mov	r0, r6
 8006430:	f7ff ff43 	bl	80062ba <__i2b>
 8006434:	2300      	movs	r3, #0
 8006436:	f8c8 0008 	str.w	r0, [r8, #8]
 800643a:	4604      	mov	r4, r0
 800643c:	6003      	str	r3, [r0, #0]
 800643e:	f04f 0800 	mov.w	r8, #0
 8006442:	07eb      	lsls	r3, r5, #31
 8006444:	d50a      	bpl.n	800645c <__pow5mult+0x74>
 8006446:	4639      	mov	r1, r7
 8006448:	4622      	mov	r2, r4
 800644a:	4630      	mov	r0, r6
 800644c:	f7ff ff3e 	bl	80062cc <__multiply>
 8006450:	4639      	mov	r1, r7
 8006452:	4681      	mov	r9, r0
 8006454:	4630      	mov	r0, r6
 8006456:	f7ff fe90 	bl	800617a <_Bfree>
 800645a:	464f      	mov	r7, r9
 800645c:	106d      	asrs	r5, r5, #1
 800645e:	d00b      	beq.n	8006478 <__pow5mult+0x90>
 8006460:	6820      	ldr	r0, [r4, #0]
 8006462:	b938      	cbnz	r0, 8006474 <__pow5mult+0x8c>
 8006464:	4622      	mov	r2, r4
 8006466:	4621      	mov	r1, r4
 8006468:	4630      	mov	r0, r6
 800646a:	f7ff ff2f 	bl	80062cc <__multiply>
 800646e:	6020      	str	r0, [r4, #0]
 8006470:	f8c0 8000 	str.w	r8, [r0]
 8006474:	4604      	mov	r4, r0
 8006476:	e7e4      	b.n	8006442 <__pow5mult+0x5a>
 8006478:	4638      	mov	r0, r7
 800647a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800647e:	bf00      	nop
 8006480:	08006c68 	.word	0x08006c68

08006484 <__lshift>:
 8006484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006488:	460c      	mov	r4, r1
 800648a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800648e:	6923      	ldr	r3, [r4, #16]
 8006490:	6849      	ldr	r1, [r1, #4]
 8006492:	eb0a 0903 	add.w	r9, sl, r3
 8006496:	68a3      	ldr	r3, [r4, #8]
 8006498:	4607      	mov	r7, r0
 800649a:	4616      	mov	r6, r2
 800649c:	f109 0501 	add.w	r5, r9, #1
 80064a0:	42ab      	cmp	r3, r5
 80064a2:	db31      	blt.n	8006508 <__lshift+0x84>
 80064a4:	4638      	mov	r0, r7
 80064a6:	f7ff fe34 	bl	8006112 <_Balloc>
 80064aa:	2200      	movs	r2, #0
 80064ac:	4680      	mov	r8, r0
 80064ae:	f100 0314 	add.w	r3, r0, #20
 80064b2:	4611      	mov	r1, r2
 80064b4:	4552      	cmp	r2, sl
 80064b6:	db2a      	blt.n	800650e <__lshift+0x8a>
 80064b8:	6920      	ldr	r0, [r4, #16]
 80064ba:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80064be:	f104 0114 	add.w	r1, r4, #20
 80064c2:	f016 021f 	ands.w	r2, r6, #31
 80064c6:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80064ca:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 80064ce:	d022      	beq.n	8006516 <__lshift+0x92>
 80064d0:	f1c2 0c20 	rsb	ip, r2, #32
 80064d4:	2000      	movs	r0, #0
 80064d6:	680e      	ldr	r6, [r1, #0]
 80064d8:	4096      	lsls	r6, r2
 80064da:	4330      	orrs	r0, r6
 80064dc:	f843 0b04 	str.w	r0, [r3], #4
 80064e0:	f851 0b04 	ldr.w	r0, [r1], #4
 80064e4:	458e      	cmp	lr, r1
 80064e6:	fa20 f00c 	lsr.w	r0, r0, ip
 80064ea:	d8f4      	bhi.n	80064d6 <__lshift+0x52>
 80064ec:	6018      	str	r0, [r3, #0]
 80064ee:	b108      	cbz	r0, 80064f4 <__lshift+0x70>
 80064f0:	f109 0502 	add.w	r5, r9, #2
 80064f4:	3d01      	subs	r5, #1
 80064f6:	4638      	mov	r0, r7
 80064f8:	f8c8 5010 	str.w	r5, [r8, #16]
 80064fc:	4621      	mov	r1, r4
 80064fe:	f7ff fe3c 	bl	800617a <_Bfree>
 8006502:	4640      	mov	r0, r8
 8006504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006508:	3101      	adds	r1, #1
 800650a:	005b      	lsls	r3, r3, #1
 800650c:	e7c8      	b.n	80064a0 <__lshift+0x1c>
 800650e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006512:	3201      	adds	r2, #1
 8006514:	e7ce      	b.n	80064b4 <__lshift+0x30>
 8006516:	3b04      	subs	r3, #4
 8006518:	f851 2b04 	ldr.w	r2, [r1], #4
 800651c:	f843 2f04 	str.w	r2, [r3, #4]!
 8006520:	458e      	cmp	lr, r1
 8006522:	d8f9      	bhi.n	8006518 <__lshift+0x94>
 8006524:	e7e6      	b.n	80064f4 <__lshift+0x70>

08006526 <__mcmp>:
 8006526:	6903      	ldr	r3, [r0, #16]
 8006528:	690a      	ldr	r2, [r1, #16]
 800652a:	1a9b      	subs	r3, r3, r2
 800652c:	b530      	push	{r4, r5, lr}
 800652e:	d10c      	bne.n	800654a <__mcmp+0x24>
 8006530:	0092      	lsls	r2, r2, #2
 8006532:	3014      	adds	r0, #20
 8006534:	3114      	adds	r1, #20
 8006536:	1884      	adds	r4, r0, r2
 8006538:	4411      	add	r1, r2
 800653a:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800653e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006542:	4295      	cmp	r5, r2
 8006544:	d003      	beq.n	800654e <__mcmp+0x28>
 8006546:	d305      	bcc.n	8006554 <__mcmp+0x2e>
 8006548:	2301      	movs	r3, #1
 800654a:	4618      	mov	r0, r3
 800654c:	bd30      	pop	{r4, r5, pc}
 800654e:	42a0      	cmp	r0, r4
 8006550:	d3f3      	bcc.n	800653a <__mcmp+0x14>
 8006552:	e7fa      	b.n	800654a <__mcmp+0x24>
 8006554:	f04f 33ff 	mov.w	r3, #4294967295
 8006558:	e7f7      	b.n	800654a <__mcmp+0x24>

0800655a <__mdiff>:
 800655a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800655e:	460d      	mov	r5, r1
 8006560:	4607      	mov	r7, r0
 8006562:	4611      	mov	r1, r2
 8006564:	4628      	mov	r0, r5
 8006566:	4614      	mov	r4, r2
 8006568:	f7ff ffdd 	bl	8006526 <__mcmp>
 800656c:	1e06      	subs	r6, r0, #0
 800656e:	d108      	bne.n	8006582 <__mdiff+0x28>
 8006570:	4631      	mov	r1, r6
 8006572:	4638      	mov	r0, r7
 8006574:	f7ff fdcd 	bl	8006112 <_Balloc>
 8006578:	2301      	movs	r3, #1
 800657a:	6103      	str	r3, [r0, #16]
 800657c:	6146      	str	r6, [r0, #20]
 800657e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006582:	bfa4      	itt	ge
 8006584:	4623      	movge	r3, r4
 8006586:	462c      	movge	r4, r5
 8006588:	4638      	mov	r0, r7
 800658a:	6861      	ldr	r1, [r4, #4]
 800658c:	bfa6      	itte	ge
 800658e:	461d      	movge	r5, r3
 8006590:	2600      	movge	r6, #0
 8006592:	2601      	movlt	r6, #1
 8006594:	f7ff fdbd 	bl	8006112 <_Balloc>
 8006598:	692b      	ldr	r3, [r5, #16]
 800659a:	60c6      	str	r6, [r0, #12]
 800659c:	6926      	ldr	r6, [r4, #16]
 800659e:	f105 0914 	add.w	r9, r5, #20
 80065a2:	f104 0214 	add.w	r2, r4, #20
 80065a6:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80065aa:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80065ae:	f100 0514 	add.w	r5, r0, #20
 80065b2:	f04f 0c00 	mov.w	ip, #0
 80065b6:	f852 ab04 	ldr.w	sl, [r2], #4
 80065ba:	f859 4b04 	ldr.w	r4, [r9], #4
 80065be:	fa1c f18a 	uxtah	r1, ip, sl
 80065c2:	b2a3      	uxth	r3, r4
 80065c4:	1ac9      	subs	r1, r1, r3
 80065c6:	0c23      	lsrs	r3, r4, #16
 80065c8:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80065cc:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80065d0:	b289      	uxth	r1, r1
 80065d2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80065d6:	45c8      	cmp	r8, r9
 80065d8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80065dc:	4696      	mov	lr, r2
 80065de:	f845 3b04 	str.w	r3, [r5], #4
 80065e2:	d8e8      	bhi.n	80065b6 <__mdiff+0x5c>
 80065e4:	45be      	cmp	lr, r7
 80065e6:	d305      	bcc.n	80065f4 <__mdiff+0x9a>
 80065e8:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80065ec:	b18b      	cbz	r3, 8006612 <__mdiff+0xb8>
 80065ee:	6106      	str	r6, [r0, #16]
 80065f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065f4:	f85e 1b04 	ldr.w	r1, [lr], #4
 80065f8:	fa1c f381 	uxtah	r3, ip, r1
 80065fc:	141a      	asrs	r2, r3, #16
 80065fe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006602:	b29b      	uxth	r3, r3
 8006604:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006608:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800660c:	f845 3b04 	str.w	r3, [r5], #4
 8006610:	e7e8      	b.n	80065e4 <__mdiff+0x8a>
 8006612:	3e01      	subs	r6, #1
 8006614:	e7e8      	b.n	80065e8 <__mdiff+0x8e>

08006616 <__d2b>:
 8006616:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800661a:	460e      	mov	r6, r1
 800661c:	2101      	movs	r1, #1
 800661e:	ec59 8b10 	vmov	r8, r9, d0
 8006622:	4615      	mov	r5, r2
 8006624:	f7ff fd75 	bl	8006112 <_Balloc>
 8006628:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800662c:	4607      	mov	r7, r0
 800662e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006632:	bb34      	cbnz	r4, 8006682 <__d2b+0x6c>
 8006634:	9301      	str	r3, [sp, #4]
 8006636:	f1b8 0f00 	cmp.w	r8, #0
 800663a:	d027      	beq.n	800668c <__d2b+0x76>
 800663c:	a802      	add	r0, sp, #8
 800663e:	f840 8d08 	str.w	r8, [r0, #-8]!
 8006642:	f7ff fe0b 	bl	800625c <__lo0bits>
 8006646:	9900      	ldr	r1, [sp, #0]
 8006648:	b1f0      	cbz	r0, 8006688 <__d2b+0x72>
 800664a:	9a01      	ldr	r2, [sp, #4]
 800664c:	f1c0 0320 	rsb	r3, r0, #32
 8006650:	fa02 f303 	lsl.w	r3, r2, r3
 8006654:	430b      	orrs	r3, r1
 8006656:	40c2      	lsrs	r2, r0
 8006658:	617b      	str	r3, [r7, #20]
 800665a:	9201      	str	r2, [sp, #4]
 800665c:	9b01      	ldr	r3, [sp, #4]
 800665e:	61bb      	str	r3, [r7, #24]
 8006660:	2b00      	cmp	r3, #0
 8006662:	bf14      	ite	ne
 8006664:	2102      	movne	r1, #2
 8006666:	2101      	moveq	r1, #1
 8006668:	6139      	str	r1, [r7, #16]
 800666a:	b1c4      	cbz	r4, 800669e <__d2b+0x88>
 800666c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006670:	4404      	add	r4, r0
 8006672:	6034      	str	r4, [r6, #0]
 8006674:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006678:	6028      	str	r0, [r5, #0]
 800667a:	4638      	mov	r0, r7
 800667c:	b003      	add	sp, #12
 800667e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006682:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006686:	e7d5      	b.n	8006634 <__d2b+0x1e>
 8006688:	6179      	str	r1, [r7, #20]
 800668a:	e7e7      	b.n	800665c <__d2b+0x46>
 800668c:	a801      	add	r0, sp, #4
 800668e:	f7ff fde5 	bl	800625c <__lo0bits>
 8006692:	9b01      	ldr	r3, [sp, #4]
 8006694:	617b      	str	r3, [r7, #20]
 8006696:	2101      	movs	r1, #1
 8006698:	6139      	str	r1, [r7, #16]
 800669a:	3020      	adds	r0, #32
 800669c:	e7e5      	b.n	800666a <__d2b+0x54>
 800669e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80066a2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80066a6:	6030      	str	r0, [r6, #0]
 80066a8:	6918      	ldr	r0, [r3, #16]
 80066aa:	f7ff fdb8 	bl	800621e <__hi0bits>
 80066ae:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80066b2:	e7e1      	b.n	8006678 <__d2b+0x62>

080066b4 <_calloc_r>:
 80066b4:	b538      	push	{r3, r4, r5, lr}
 80066b6:	fb02 f401 	mul.w	r4, r2, r1
 80066ba:	4621      	mov	r1, r4
 80066bc:	f7fe f9b6 	bl	8004a2c <_malloc_r>
 80066c0:	4605      	mov	r5, r0
 80066c2:	b118      	cbz	r0, 80066cc <_calloc_r+0x18>
 80066c4:	4622      	mov	r2, r4
 80066c6:	2100      	movs	r1, #0
 80066c8:	f7fe f95a 	bl	8004980 <memset>
 80066cc:	4628      	mov	r0, r5
 80066ce:	bd38      	pop	{r3, r4, r5, pc}

080066d0 <__ssputs_r>:
 80066d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066d4:	688e      	ldr	r6, [r1, #8]
 80066d6:	429e      	cmp	r6, r3
 80066d8:	4682      	mov	sl, r0
 80066da:	460c      	mov	r4, r1
 80066dc:	4691      	mov	r9, r2
 80066de:	4698      	mov	r8, r3
 80066e0:	d835      	bhi.n	800674e <__ssputs_r+0x7e>
 80066e2:	898a      	ldrh	r2, [r1, #12]
 80066e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80066e8:	d031      	beq.n	800674e <__ssputs_r+0x7e>
 80066ea:	6825      	ldr	r5, [r4, #0]
 80066ec:	6909      	ldr	r1, [r1, #16]
 80066ee:	1a6f      	subs	r7, r5, r1
 80066f0:	6965      	ldr	r5, [r4, #20]
 80066f2:	2302      	movs	r3, #2
 80066f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80066f8:	fb95 f5f3 	sdiv	r5, r5, r3
 80066fc:	f108 0301 	add.w	r3, r8, #1
 8006700:	443b      	add	r3, r7
 8006702:	429d      	cmp	r5, r3
 8006704:	bf38      	it	cc
 8006706:	461d      	movcc	r5, r3
 8006708:	0553      	lsls	r3, r2, #21
 800670a:	d531      	bpl.n	8006770 <__ssputs_r+0xa0>
 800670c:	4629      	mov	r1, r5
 800670e:	f7fe f98d 	bl	8004a2c <_malloc_r>
 8006712:	4606      	mov	r6, r0
 8006714:	b950      	cbnz	r0, 800672c <__ssputs_r+0x5c>
 8006716:	230c      	movs	r3, #12
 8006718:	f8ca 3000 	str.w	r3, [sl]
 800671c:	89a3      	ldrh	r3, [r4, #12]
 800671e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006722:	81a3      	strh	r3, [r4, #12]
 8006724:	f04f 30ff 	mov.w	r0, #4294967295
 8006728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800672c:	463a      	mov	r2, r7
 800672e:	6921      	ldr	r1, [r4, #16]
 8006730:	f7ff fce2 	bl	80060f8 <memcpy>
 8006734:	89a3      	ldrh	r3, [r4, #12]
 8006736:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800673a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800673e:	81a3      	strh	r3, [r4, #12]
 8006740:	6126      	str	r6, [r4, #16]
 8006742:	6165      	str	r5, [r4, #20]
 8006744:	443e      	add	r6, r7
 8006746:	1bed      	subs	r5, r5, r7
 8006748:	6026      	str	r6, [r4, #0]
 800674a:	60a5      	str	r5, [r4, #8]
 800674c:	4646      	mov	r6, r8
 800674e:	4546      	cmp	r6, r8
 8006750:	bf28      	it	cs
 8006752:	4646      	movcs	r6, r8
 8006754:	4632      	mov	r2, r6
 8006756:	4649      	mov	r1, r9
 8006758:	6820      	ldr	r0, [r4, #0]
 800675a:	f000 f91b 	bl	8006994 <memmove>
 800675e:	68a3      	ldr	r3, [r4, #8]
 8006760:	1b9b      	subs	r3, r3, r6
 8006762:	60a3      	str	r3, [r4, #8]
 8006764:	6823      	ldr	r3, [r4, #0]
 8006766:	441e      	add	r6, r3
 8006768:	6026      	str	r6, [r4, #0]
 800676a:	2000      	movs	r0, #0
 800676c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006770:	462a      	mov	r2, r5
 8006772:	f000 f929 	bl	80069c8 <_realloc_r>
 8006776:	4606      	mov	r6, r0
 8006778:	2800      	cmp	r0, #0
 800677a:	d1e1      	bne.n	8006740 <__ssputs_r+0x70>
 800677c:	6921      	ldr	r1, [r4, #16]
 800677e:	4650      	mov	r0, sl
 8006780:	f7fe f906 	bl	8004990 <_free_r>
 8006784:	e7c7      	b.n	8006716 <__ssputs_r+0x46>
	...

08006788 <_svfiprintf_r>:
 8006788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800678c:	b09d      	sub	sp, #116	; 0x74
 800678e:	4680      	mov	r8, r0
 8006790:	9303      	str	r3, [sp, #12]
 8006792:	898b      	ldrh	r3, [r1, #12]
 8006794:	061c      	lsls	r4, r3, #24
 8006796:	460d      	mov	r5, r1
 8006798:	4616      	mov	r6, r2
 800679a:	d50f      	bpl.n	80067bc <_svfiprintf_r+0x34>
 800679c:	690b      	ldr	r3, [r1, #16]
 800679e:	b96b      	cbnz	r3, 80067bc <_svfiprintf_r+0x34>
 80067a0:	2140      	movs	r1, #64	; 0x40
 80067a2:	f7fe f943 	bl	8004a2c <_malloc_r>
 80067a6:	6028      	str	r0, [r5, #0]
 80067a8:	6128      	str	r0, [r5, #16]
 80067aa:	b928      	cbnz	r0, 80067b8 <_svfiprintf_r+0x30>
 80067ac:	230c      	movs	r3, #12
 80067ae:	f8c8 3000 	str.w	r3, [r8]
 80067b2:	f04f 30ff 	mov.w	r0, #4294967295
 80067b6:	e0c5      	b.n	8006944 <_svfiprintf_r+0x1bc>
 80067b8:	2340      	movs	r3, #64	; 0x40
 80067ba:	616b      	str	r3, [r5, #20]
 80067bc:	2300      	movs	r3, #0
 80067be:	9309      	str	r3, [sp, #36]	; 0x24
 80067c0:	2320      	movs	r3, #32
 80067c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80067c6:	2330      	movs	r3, #48	; 0x30
 80067c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80067cc:	f04f 0b01 	mov.w	fp, #1
 80067d0:	4637      	mov	r7, r6
 80067d2:	463c      	mov	r4, r7
 80067d4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d13c      	bne.n	8006856 <_svfiprintf_r+0xce>
 80067dc:	ebb7 0a06 	subs.w	sl, r7, r6
 80067e0:	d00b      	beq.n	80067fa <_svfiprintf_r+0x72>
 80067e2:	4653      	mov	r3, sl
 80067e4:	4632      	mov	r2, r6
 80067e6:	4629      	mov	r1, r5
 80067e8:	4640      	mov	r0, r8
 80067ea:	f7ff ff71 	bl	80066d0 <__ssputs_r>
 80067ee:	3001      	adds	r0, #1
 80067f0:	f000 80a3 	beq.w	800693a <_svfiprintf_r+0x1b2>
 80067f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067f6:	4453      	add	r3, sl
 80067f8:	9309      	str	r3, [sp, #36]	; 0x24
 80067fa:	783b      	ldrb	r3, [r7, #0]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	f000 809c 	beq.w	800693a <_svfiprintf_r+0x1b2>
 8006802:	2300      	movs	r3, #0
 8006804:	f04f 32ff 	mov.w	r2, #4294967295
 8006808:	9304      	str	r3, [sp, #16]
 800680a:	9307      	str	r3, [sp, #28]
 800680c:	9205      	str	r2, [sp, #20]
 800680e:	9306      	str	r3, [sp, #24]
 8006810:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006814:	931a      	str	r3, [sp, #104]	; 0x68
 8006816:	2205      	movs	r2, #5
 8006818:	7821      	ldrb	r1, [r4, #0]
 800681a:	4850      	ldr	r0, [pc, #320]	; (800695c <_svfiprintf_r+0x1d4>)
 800681c:	f7f9 fce0 	bl	80001e0 <memchr>
 8006820:	1c67      	adds	r7, r4, #1
 8006822:	9b04      	ldr	r3, [sp, #16]
 8006824:	b9d8      	cbnz	r0, 800685e <_svfiprintf_r+0xd6>
 8006826:	06d9      	lsls	r1, r3, #27
 8006828:	bf44      	itt	mi
 800682a:	2220      	movmi	r2, #32
 800682c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006830:	071a      	lsls	r2, r3, #28
 8006832:	bf44      	itt	mi
 8006834:	222b      	movmi	r2, #43	; 0x2b
 8006836:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800683a:	7822      	ldrb	r2, [r4, #0]
 800683c:	2a2a      	cmp	r2, #42	; 0x2a
 800683e:	d016      	beq.n	800686e <_svfiprintf_r+0xe6>
 8006840:	9a07      	ldr	r2, [sp, #28]
 8006842:	2100      	movs	r1, #0
 8006844:	200a      	movs	r0, #10
 8006846:	4627      	mov	r7, r4
 8006848:	3401      	adds	r4, #1
 800684a:	783b      	ldrb	r3, [r7, #0]
 800684c:	3b30      	subs	r3, #48	; 0x30
 800684e:	2b09      	cmp	r3, #9
 8006850:	d951      	bls.n	80068f6 <_svfiprintf_r+0x16e>
 8006852:	b1c9      	cbz	r1, 8006888 <_svfiprintf_r+0x100>
 8006854:	e011      	b.n	800687a <_svfiprintf_r+0xf2>
 8006856:	2b25      	cmp	r3, #37	; 0x25
 8006858:	d0c0      	beq.n	80067dc <_svfiprintf_r+0x54>
 800685a:	4627      	mov	r7, r4
 800685c:	e7b9      	b.n	80067d2 <_svfiprintf_r+0x4a>
 800685e:	4a3f      	ldr	r2, [pc, #252]	; (800695c <_svfiprintf_r+0x1d4>)
 8006860:	1a80      	subs	r0, r0, r2
 8006862:	fa0b f000 	lsl.w	r0, fp, r0
 8006866:	4318      	orrs	r0, r3
 8006868:	9004      	str	r0, [sp, #16]
 800686a:	463c      	mov	r4, r7
 800686c:	e7d3      	b.n	8006816 <_svfiprintf_r+0x8e>
 800686e:	9a03      	ldr	r2, [sp, #12]
 8006870:	1d11      	adds	r1, r2, #4
 8006872:	6812      	ldr	r2, [r2, #0]
 8006874:	9103      	str	r1, [sp, #12]
 8006876:	2a00      	cmp	r2, #0
 8006878:	db01      	blt.n	800687e <_svfiprintf_r+0xf6>
 800687a:	9207      	str	r2, [sp, #28]
 800687c:	e004      	b.n	8006888 <_svfiprintf_r+0x100>
 800687e:	4252      	negs	r2, r2
 8006880:	f043 0302 	orr.w	r3, r3, #2
 8006884:	9207      	str	r2, [sp, #28]
 8006886:	9304      	str	r3, [sp, #16]
 8006888:	783b      	ldrb	r3, [r7, #0]
 800688a:	2b2e      	cmp	r3, #46	; 0x2e
 800688c:	d10e      	bne.n	80068ac <_svfiprintf_r+0x124>
 800688e:	787b      	ldrb	r3, [r7, #1]
 8006890:	2b2a      	cmp	r3, #42	; 0x2a
 8006892:	f107 0101 	add.w	r1, r7, #1
 8006896:	d132      	bne.n	80068fe <_svfiprintf_r+0x176>
 8006898:	9b03      	ldr	r3, [sp, #12]
 800689a:	1d1a      	adds	r2, r3, #4
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	9203      	str	r2, [sp, #12]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	bfb8      	it	lt
 80068a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80068a8:	3702      	adds	r7, #2
 80068aa:	9305      	str	r3, [sp, #20]
 80068ac:	4c2c      	ldr	r4, [pc, #176]	; (8006960 <_svfiprintf_r+0x1d8>)
 80068ae:	7839      	ldrb	r1, [r7, #0]
 80068b0:	2203      	movs	r2, #3
 80068b2:	4620      	mov	r0, r4
 80068b4:	f7f9 fc94 	bl	80001e0 <memchr>
 80068b8:	b138      	cbz	r0, 80068ca <_svfiprintf_r+0x142>
 80068ba:	2340      	movs	r3, #64	; 0x40
 80068bc:	1b00      	subs	r0, r0, r4
 80068be:	fa03 f000 	lsl.w	r0, r3, r0
 80068c2:	9b04      	ldr	r3, [sp, #16]
 80068c4:	4303      	orrs	r3, r0
 80068c6:	9304      	str	r3, [sp, #16]
 80068c8:	3701      	adds	r7, #1
 80068ca:	7839      	ldrb	r1, [r7, #0]
 80068cc:	4825      	ldr	r0, [pc, #148]	; (8006964 <_svfiprintf_r+0x1dc>)
 80068ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80068d2:	2206      	movs	r2, #6
 80068d4:	1c7e      	adds	r6, r7, #1
 80068d6:	f7f9 fc83 	bl	80001e0 <memchr>
 80068da:	2800      	cmp	r0, #0
 80068dc:	d035      	beq.n	800694a <_svfiprintf_r+0x1c2>
 80068de:	4b22      	ldr	r3, [pc, #136]	; (8006968 <_svfiprintf_r+0x1e0>)
 80068e0:	b9fb      	cbnz	r3, 8006922 <_svfiprintf_r+0x19a>
 80068e2:	9b03      	ldr	r3, [sp, #12]
 80068e4:	3307      	adds	r3, #7
 80068e6:	f023 0307 	bic.w	r3, r3, #7
 80068ea:	3308      	adds	r3, #8
 80068ec:	9303      	str	r3, [sp, #12]
 80068ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068f0:	444b      	add	r3, r9
 80068f2:	9309      	str	r3, [sp, #36]	; 0x24
 80068f4:	e76c      	b.n	80067d0 <_svfiprintf_r+0x48>
 80068f6:	fb00 3202 	mla	r2, r0, r2, r3
 80068fa:	2101      	movs	r1, #1
 80068fc:	e7a3      	b.n	8006846 <_svfiprintf_r+0xbe>
 80068fe:	2300      	movs	r3, #0
 8006900:	9305      	str	r3, [sp, #20]
 8006902:	4618      	mov	r0, r3
 8006904:	240a      	movs	r4, #10
 8006906:	460f      	mov	r7, r1
 8006908:	3101      	adds	r1, #1
 800690a:	783a      	ldrb	r2, [r7, #0]
 800690c:	3a30      	subs	r2, #48	; 0x30
 800690e:	2a09      	cmp	r2, #9
 8006910:	d903      	bls.n	800691a <_svfiprintf_r+0x192>
 8006912:	2b00      	cmp	r3, #0
 8006914:	d0ca      	beq.n	80068ac <_svfiprintf_r+0x124>
 8006916:	9005      	str	r0, [sp, #20]
 8006918:	e7c8      	b.n	80068ac <_svfiprintf_r+0x124>
 800691a:	fb04 2000 	mla	r0, r4, r0, r2
 800691e:	2301      	movs	r3, #1
 8006920:	e7f1      	b.n	8006906 <_svfiprintf_r+0x17e>
 8006922:	ab03      	add	r3, sp, #12
 8006924:	9300      	str	r3, [sp, #0]
 8006926:	462a      	mov	r2, r5
 8006928:	4b10      	ldr	r3, [pc, #64]	; (800696c <_svfiprintf_r+0x1e4>)
 800692a:	a904      	add	r1, sp, #16
 800692c:	4640      	mov	r0, r8
 800692e:	f7fe f971 	bl	8004c14 <_printf_float>
 8006932:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006936:	4681      	mov	r9, r0
 8006938:	d1d9      	bne.n	80068ee <_svfiprintf_r+0x166>
 800693a:	89ab      	ldrh	r3, [r5, #12]
 800693c:	065b      	lsls	r3, r3, #25
 800693e:	f53f af38 	bmi.w	80067b2 <_svfiprintf_r+0x2a>
 8006942:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006944:	b01d      	add	sp, #116	; 0x74
 8006946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800694a:	ab03      	add	r3, sp, #12
 800694c:	9300      	str	r3, [sp, #0]
 800694e:	462a      	mov	r2, r5
 8006950:	4b06      	ldr	r3, [pc, #24]	; (800696c <_svfiprintf_r+0x1e4>)
 8006952:	a904      	add	r1, sp, #16
 8006954:	4640      	mov	r0, r8
 8006956:	f7fe fc13 	bl	8005180 <_printf_i>
 800695a:	e7ea      	b.n	8006932 <_svfiprintf_r+0x1aa>
 800695c:	08006c74 	.word	0x08006c74
 8006960:	08006c7a 	.word	0x08006c7a
 8006964:	08006c7e 	.word	0x08006c7e
 8006968:	08004c15 	.word	0x08004c15
 800696c:	080066d1 	.word	0x080066d1

08006970 <__ascii_mbtowc>:
 8006970:	b082      	sub	sp, #8
 8006972:	b901      	cbnz	r1, 8006976 <__ascii_mbtowc+0x6>
 8006974:	a901      	add	r1, sp, #4
 8006976:	b142      	cbz	r2, 800698a <__ascii_mbtowc+0x1a>
 8006978:	b14b      	cbz	r3, 800698e <__ascii_mbtowc+0x1e>
 800697a:	7813      	ldrb	r3, [r2, #0]
 800697c:	600b      	str	r3, [r1, #0]
 800697e:	7812      	ldrb	r2, [r2, #0]
 8006980:	1c10      	adds	r0, r2, #0
 8006982:	bf18      	it	ne
 8006984:	2001      	movne	r0, #1
 8006986:	b002      	add	sp, #8
 8006988:	4770      	bx	lr
 800698a:	4610      	mov	r0, r2
 800698c:	e7fb      	b.n	8006986 <__ascii_mbtowc+0x16>
 800698e:	f06f 0001 	mvn.w	r0, #1
 8006992:	e7f8      	b.n	8006986 <__ascii_mbtowc+0x16>

08006994 <memmove>:
 8006994:	4288      	cmp	r0, r1
 8006996:	b510      	push	{r4, lr}
 8006998:	eb01 0302 	add.w	r3, r1, r2
 800699c:	d803      	bhi.n	80069a6 <memmove+0x12>
 800699e:	1e42      	subs	r2, r0, #1
 80069a0:	4299      	cmp	r1, r3
 80069a2:	d10c      	bne.n	80069be <memmove+0x2a>
 80069a4:	bd10      	pop	{r4, pc}
 80069a6:	4298      	cmp	r0, r3
 80069a8:	d2f9      	bcs.n	800699e <memmove+0xa>
 80069aa:	1881      	adds	r1, r0, r2
 80069ac:	1ad2      	subs	r2, r2, r3
 80069ae:	42d3      	cmn	r3, r2
 80069b0:	d100      	bne.n	80069b4 <memmove+0x20>
 80069b2:	bd10      	pop	{r4, pc}
 80069b4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80069b8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80069bc:	e7f7      	b.n	80069ae <memmove+0x1a>
 80069be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069c2:	f802 4f01 	strb.w	r4, [r2, #1]!
 80069c6:	e7eb      	b.n	80069a0 <memmove+0xc>

080069c8 <_realloc_r>:
 80069c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ca:	4607      	mov	r7, r0
 80069cc:	4614      	mov	r4, r2
 80069ce:	460e      	mov	r6, r1
 80069d0:	b921      	cbnz	r1, 80069dc <_realloc_r+0x14>
 80069d2:	4611      	mov	r1, r2
 80069d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80069d8:	f7fe b828 	b.w	8004a2c <_malloc_r>
 80069dc:	b922      	cbnz	r2, 80069e8 <_realloc_r+0x20>
 80069de:	f7fd ffd7 	bl	8004990 <_free_r>
 80069e2:	4625      	mov	r5, r4
 80069e4:	4628      	mov	r0, r5
 80069e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069e8:	f000 f821 	bl	8006a2e <_malloc_usable_size_r>
 80069ec:	4284      	cmp	r4, r0
 80069ee:	d90f      	bls.n	8006a10 <_realloc_r+0x48>
 80069f0:	4621      	mov	r1, r4
 80069f2:	4638      	mov	r0, r7
 80069f4:	f7fe f81a 	bl	8004a2c <_malloc_r>
 80069f8:	4605      	mov	r5, r0
 80069fa:	2800      	cmp	r0, #0
 80069fc:	d0f2      	beq.n	80069e4 <_realloc_r+0x1c>
 80069fe:	4631      	mov	r1, r6
 8006a00:	4622      	mov	r2, r4
 8006a02:	f7ff fb79 	bl	80060f8 <memcpy>
 8006a06:	4631      	mov	r1, r6
 8006a08:	4638      	mov	r0, r7
 8006a0a:	f7fd ffc1 	bl	8004990 <_free_r>
 8006a0e:	e7e9      	b.n	80069e4 <_realloc_r+0x1c>
 8006a10:	4635      	mov	r5, r6
 8006a12:	e7e7      	b.n	80069e4 <_realloc_r+0x1c>

08006a14 <__ascii_wctomb>:
 8006a14:	b149      	cbz	r1, 8006a2a <__ascii_wctomb+0x16>
 8006a16:	2aff      	cmp	r2, #255	; 0xff
 8006a18:	bf85      	ittet	hi
 8006a1a:	238a      	movhi	r3, #138	; 0x8a
 8006a1c:	6003      	strhi	r3, [r0, #0]
 8006a1e:	700a      	strbls	r2, [r1, #0]
 8006a20:	f04f 30ff 	movhi.w	r0, #4294967295
 8006a24:	bf98      	it	ls
 8006a26:	2001      	movls	r0, #1
 8006a28:	4770      	bx	lr
 8006a2a:	4608      	mov	r0, r1
 8006a2c:	4770      	bx	lr

08006a2e <_malloc_usable_size_r>:
 8006a2e:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8006a32:	2800      	cmp	r0, #0
 8006a34:	f1a0 0004 	sub.w	r0, r0, #4
 8006a38:	bfbc      	itt	lt
 8006a3a:	580b      	ldrlt	r3, [r1, r0]
 8006a3c:	18c0      	addlt	r0, r0, r3
 8006a3e:	4770      	bx	lr

08006a40 <_sbrk>:
 8006a40:	4b04      	ldr	r3, [pc, #16]	; (8006a54 <_sbrk+0x14>)
 8006a42:	6819      	ldr	r1, [r3, #0]
 8006a44:	4602      	mov	r2, r0
 8006a46:	b909      	cbnz	r1, 8006a4c <_sbrk+0xc>
 8006a48:	4903      	ldr	r1, [pc, #12]	; (8006a58 <_sbrk+0x18>)
 8006a4a:	6019      	str	r1, [r3, #0]
 8006a4c:	6818      	ldr	r0, [r3, #0]
 8006a4e:	4402      	add	r2, r0
 8006a50:	601a      	str	r2, [r3, #0]
 8006a52:	4770      	bx	lr
 8006a54:	20000358 	.word	0x20000358
 8006a58:	20001c6c 	.word	0x20001c6c

08006a5c <_init>:
 8006a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a5e:	bf00      	nop
 8006a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a62:	bc08      	pop	{r3}
 8006a64:	469e      	mov	lr, r3
 8006a66:	4770      	bx	lr

08006a68 <_fini>:
 8006a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a6a:	bf00      	nop
 8006a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a6e:	bc08      	pop	{r3}
 8006a70:	469e      	mov	lr, r3
 8006a72:	4770      	bx	lr
